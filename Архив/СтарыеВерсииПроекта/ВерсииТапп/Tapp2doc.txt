Semantic Platform Project 2.0
The preliminary information
 April, 16  2011



1 General description

This system is means for creation of a semantic network for construction, storage and processing of logic models. The network uses object-oriented methodology. The network consists of classes, objects, methods, links. By means of this network it is possible to create graph - logic models and to do operations with them. The system allows to carry out partial or full abstraction of models, thus keeping their integrity and reliability. The system also potentially allows to make classification of models, in the presence of some initial experience.
Though now the system looks as the next realisation of the theory of semantic networks, despite it, it should be considered as some language and the programming environment. It is possible to design any type, to describe its behaviour and then to use. It is possible to develop system so that it has turned in framework, having realised typical classes of objects and operation with them then there is possible a construction of almost applicable models. 

It not a ready product, proceeding their which, it is possible to get representation about properties and profitability of idea. It only the begun trial realisation of the base. Really interesting properties of system consist in superstructures which should be created in the form of a set of scripts and models.
Thus, the project is represented as is, without guarantees and restrictions. I hope, somebody will support this unusual system. At me almost does not remain to time.


1.1 Current condition of the project. Changes of the new version.

It is the second version of a engine of the project. 3 axes of link (X Y Z) for construction of structures of classes, objects, operations are entered. (Aggregation, abstraction, etc.).

Methods can be organised in hierarchical structure for maintenance of work of abstract and modular methods. Methods are independent of classes, and can be used through links with classes or through hierarchy of methods.

Current realisation of system represents a code C#, allowing to create structure from classes, objects, operations.
- A code serving structure of classes and objects, ported from the first version. Restriction on quantity of links of objects is cleaned. The code is not tested. 
- The code serving operations, is not ready. It is created. It is planned to use calls of an executed code or interpretation of scripts. It is planned to support execution of abstract methods.  
- The user interface is not realised. The graphic interface like the first version, and/or the command console a-la linux bash is planned.
- The interpreter is not realised, planned.

The general functionality of classes and objects is taken out in a parental class.
Operations of links are unified, the number of axes is easy for increasing if necessary.
Methods are used with the help KTA.  “¿ allow to store the information on method use, on a redirection of a call, an estimation of qualities of methods.


1.2 system of support of intelligence (ISS). Sketches.

The system is personalised and adjusted under the user. The user can complete and reconstruct system as to it conveniently.
For the interface it is possible to use individual language (a symbol = concept) and individual elements of the interface.
(It is necessary to look semantics of hieroglyphic languages - as they are formed, the general rules likely are identical to all?)
Thus, interaction is realised in concepts which are broadcast in symbols for transmission to the user and back.
The set of concepts is defined by the user, translate by the rules defined by the user.
It is possible to use any, including individual, a way of representation of concepts.

The system represents the graph from classes, objects, operations. That is, the data and actions.
The system should be formed by certain rules, however their observance partially lays down on the user.
Applications in system are created by formation in the general global structure of the new structures using new and existing elements of system for realisation of necessary functions. Thus the distributive of the new application represents a text file - a script on which the new site of structure is created.
As the system is individual, each user should correct itself application structure if necessary.
That is, scripts should be opened. It any more the program, and instructions on its creation. Though in any sense it is still separate thing. Typically for the modern software.

For the user it is necessary to create the initial structure facilitating the beginning of use. Some general set which then the user will develop at own discretion. 
Also some initial knowledge, allowing to create and estimate structure be required to the user, to distinguish typical errors. 

The system will be a superstructure over computer OS. 
Possibilities:
- Modification by the user or self-modification, proceeding from requirements of the user.   
- Completely the individual interface of the user.
- Automation of typical actions of the user.
Existing realisations demand from the user of knowledge of algorithmization and programming languages, possession of corresponding tools.

Thus, a creation problem ISP: to create system which does not demand special knowledge for its use or modification.
To start work with system should be enough general educational preparation. (From what follows that general educational preparation should provide some stable minimum as the standard. This set of knowledge is quite suitable in any activity as represents semantics of environment.)


2 Tech Description

The system is created on C# for Microsoft VisualStudio 2005 or late versions. VisualStudio it is used as the working out and debugging environment, with viewing of conditions of objects and other data.
For storage of structure of system on a disk it is used XML. In an operating time the structure entirely is in operative memory of the computer.

In system the following architecture is supposed:
 - Assembly-engine of system in the form of class library. Gives means for system realisation. Exports the container in which all essence are created, exist and are destroyed.
 - Assemblies of methods for performance of operations with the base data. Assemblies contain the methods defined by the applied programmer. Methods are used by a engine by means of Reflection.
 - The application - a cover of the user from which it is possible to work in system.
 - Utilities and other applications. 

Users of the project share on system programmers, applied programmers and end users.
System programmers manage  the project API which shares on SystemLayer and UserLayer. SystemLayer carries out base operations according to architecture of a computer platform. UserLayer provides conformity of operations and methodology, the control of the entrance data and so on. 
Applied programmers use UserLayer for creation of methods of data processing. 
End users design structure of the data, add and delete the data, demand from applied programmers to realise necessary methods.

For base storage in an operating time operative memory is used. On a disk the base is stored in kind XML of the document a few optimised for simple viewing.
The database file has the version and a step. The version means a file structure. The step is intended for search of last kept copy of the data.
To keep integrity of structure of the data, operations should provide possibility of cancellation of changes at failure. If to cancel changes it is impossible, it is necessary to load last version of the data from a file. After operation end it is necessary to keep the new version of system on a disk.
It is planned to add support of files, also copies of files in this case remain. 

As the system is realised for research, for the basic entitites fields for storage of text descriptions are provided. 


2.1 Essences

The container - represents all system. Contains all the others of essence.
Objects - represent data. 
Classes - represent abstraction of the data. Can be connected in hierarchy of classes.
Links of classes/objects - connect classes with classes, objects with objects in one of axes.
Links a class-method - connect classes with methods.
Links of methods - connect methods with methods.
Methods - represent operation. Can be connected in hierarchy of methods.
KTA - the complete set of types of arguments. Represent method use.
Arguments - arguments of a method.


2.2 Identifiers, spaces of identifiers

Each class has a serial number, each object in a class has a serial number.
The object identifier consists of number of a class and object number in a class.
Numbers from 0 to 255 form system space. Objects and classes in this space are a part of architecture of system.
Numbers above 255 form the user space. The first user object of the first user class will have ObjID 256:256.


2.3 Container

The container represents system, stores the list of classes/methods of system, gives operations.
The container allows to load base from a file, to unload in a file, to make cleaning and optimisation of structure of the data, to create, remove, change a class and links of a class, object, to add or remove a method, to cause a method for object of a class and so on. 


2.4 Classes

Classes semantically are entity classes  and are used for storage of types of the data and the general structure of links with other classes. Links between classes, as well as between objects, are organised by a principle main-subordinated. The same class cannot be both the main thing and subordinates to any class. It is necessary to avoid ring links in structure of classes. In general, the structure of classes demands a great attention. Links between classes are projected on the user objects of a class, thus, the structure of objects as a whole repeats structure of classes. Each new link between classes is reflected in all user objects of these classes. Thus, if for some essence (object) a1 new property is added, it is added in the abstract form and to another entities the same class - essence a2, a3, Ö also receive the same property, but while in the uncertain form.

The class serves also as a template - the sample for creation of new objects of a class.
ObjID a class = 0. Links of a class with other classes are stored in a class. The class also stores type of the data, but not the data.
The class has the object identifier - the icons, compared to this class. (In this version it is not realised.)
The class, as well as object, has three axes of links: X (aggregation), Y (abstraction), Z (reserved).
Accordingly, six lists of links: X +, X - Y +, Y - Z +, Z-.
Classes can use all axes for formation of structure of classes.
The class includes the list of objects of a class, the list of links with methods. 

2.4.1 System classes

System classes are created automatically at database creation.
Class 0 - World. An initial class of base. All other structures of classes begin with it. The world is a navigation starting point on structure of classes. In system there can be some independent counts of classes, all of them should begin with a class the World. Otherwise they will be inaccessible to use and can be removed by optimizator.
Class 1 - Unknown. It is used in links of classes and designates the unknown essence which is not giving in to definition.
Class 2 - Undefined. It is used in links of classes and designates that the essence is not defined yet, that is, it needs to be defined.
Class 3 - Nothing. It is used in links of classes and designates that the essence does not exist.


2.5 Objects

Objects are intended for storage of the concrete data and links between them. Objects belong to a class. 
Each object contains lists of links with other objects. 
All objects can have some links with objects of one class.

The type of the data of object is defined by type of the data of a class. The type of the data is stored in a copy of object for convenience not to request a class.
The choice of type of the data is limited by possibilities of an applied platform .NET Framework, both regarding work with types of the data, and regarding creation of methods for them.

2.5.1 System objects

In each class system objects are automatically created.
The object 0 - designates a class in space of identifiers of objects.
Object 1 - Unknown. It is used in links of objects and designates unknown essence.
Object 2 - Undefined. It is used in links of objects and designates that the essence is not defined yet, that is, it needs to be defined.
Object 3 - Nothing. It is used in links of classes and designates Entity does not exist.


2.6 Methods

The general description of methods in version 2.0. Methods are essentially changed, therefore the complex description here is resulted.

The cores of essence of system:
- The container	- Represents system. MEngine the class, contains the list of classes, the list of methods, operations.
- The class	- Represents a entity class. The class contains the list of objects, lists of links with other classes, the list of links with methods,	 name and other data, operations.
- The object	- Represents essence. The object contains lists of links with other objects, the data, operations.
- The method	- Represents a method. The method carries out some operation, accepts and returns arguments. The method can be compared to one or  several classes, can be caused by a class or object of a class. 
The method contains links with other methods, the list of links with classes, list KTA, the data, operations.
- The argument	- Represents argument of a method. The argument has a name, type, value, other data.
-  “¿		- Represents the complete set of types of arguments for a method. It is a variant of use of a method.
- Link class/object-class/object	- Connects two classes or two objects. One copy for link for each party. Contains fields for storage of type of links.
- Link class-method	- Connects a method with a class and a class with a method.
- Link method-method	- Connects a method with other method. One copy for lnk for each party.

The description:
The container contains the list of methods. All methods are stored in this list.
The class has the list of links with methods. In version 1 all methods are rigidly connected with a class, stored in the list of methods of a class, caused only through a class.
In version 2.0 methods are independent essence, can be organised in own structure, can be caused through the class connected with them or individually, on a name or number. The method also can be chosen and caused by means of hierarchy of methods, this variant is not studied, but it is represented perspective, therefore in architecture its support is planned.

As the same method can be caused by different classes, with different types of the data, are entered  “¿.  “¿ stores types, the metadata values  about a call of a method, it provides check of a correctness of a call of a method.  “¿ fixes use of a method for a causing class. In a method there is a list KTA in which all calls of a method all classes remain. It is supposed to use this list for statistics and choice optimisation in hierarchy of methods. It is planned that metadata  “¿ will allow to define an admissible range of values and types of arguments, to estimate suitability of a method for concrete use, etc.  “¿ contains the identifier of a class/object which causes a method. For reduction of the size of list  “¿ periodically, during the next call, optimisation - removal of duplicated records, allocation of trends, etc. is spent.

The method can be abstract, not contain a code, only provide a choice of a suitable method in hierarchy of abstractions. Thus, together with hierarchy of the data, it provides operation performance at all levels of abstraction. It simplifies the control and debugging of abstract methods.

Link a class-method connects classes and methods. In a method there is a list of links with classes. In a class  - the list of links with methods.
As methods are used by classes through  “¿ link specifies in a class on the one hand, and on  “¿ a method with another. Thus, one class can be connected with several methods, and even with several KTA one method, differing types of arguments (for example, if a method abstract).
The method can be connected with several classes, or with one - in this case it can be used through hierarchy of classes. It is forbidden to store duplicates in the list of links.

The method contains the basic  “¿ -  “¿0. This KTA is created at method creation, and defines a set and types of arguments which the method uses.
It is supposed that  “¿ it will be used together with hierarchy of abstractions of methods that allows to create and use abstract methods the same as also concrete. That is, if  “‡ describes abstract types of the data the method can be caused for concrete types of the data. The suitable method thus should be automatically found and caused, the information on this choice/call is fixed in  “¿ an abstract method, the data comes back as though they were executed by an abstract method.
The method contains a field for the script text. If the way field to a code contains a way the method causes a CLR-code. If is not present, the field of the text of a script is checked. If it not empty, the text goes to the interpreter if empty is an abstract method or an error. The abstract method does not contain a code, is used for the organisation of a call of a concrete method. The information for search contains in the KTA list of a method.

It is possible to try to enter in  “¿ an indicator of efficiency of a method which registers by results of a method. It will be possible to choose a suitable method on the basis of efficiency, to define borders of effective work of a method, and other interesting possibilities. But it later.

Link method-method connects methods in the same way, as well as similar links class-class. It is possible to determine abstraction, aggregation of methods, and accordingly to realise structure. For better flexibility, methods communicate through concept  “¿, usually through KTA0.


2.7 Link class-class, object-object

Links represent relations of objects. Two objects are connected by relations top-bottom, main-subordinated. Links bilateral, that is, each of two objects has the copy of link. Link creation between objects probably only in the presence of link between classes. 
Links, as well as objects and classes, also have conditions. If link between two classes is marked by a condition it "Restricted", link between objects of these classes cannot have other condition.  
Links cannot connect two objects of the same class.
Links can refer to already deleted object, on system or on nonexistent object.
The class, as well as object, has three axes of links: X (aggregation), Y (abstraction), Z (reserved).
Accordingly, six lists of links: X +, X - Y +, Y - Z +, Z-.
Classes can use all axes for formation of structure of classes.
Objects use X-links for inclusion relations between objects.
 Y-links are used for abstraction relations. If at superclass there is an object, and it is necessary to create link with it (that is if there is an object of superclass as abstraction of objects of a current class. An atypical thing.) they link the same as and for ’ axes. If link is not present, as well as in ’ an axis, the current object contacts object superclass::Undefined.
Z the axis is realised by the same rules, but not used yet. It is supposed to apply it to a binding of properties of object/class. While it is not clear as it should look.  
Between two objects or classes there can be only one operating link. Presence of several void (deleted) links between objects is supposed.

Links between objects of various classes at creation are duplicated in links of classes. For example, if the object of a class A contacts object of a class B, link between a class should be created at first A and B. This links specifies in presence and character of communication between classes A and B, and at creation of new object of a class A at it link with object of a class B too is created  but while abstract - final object is the system object of B::Undefined. It is the mechanism for automatic maintenance of structure of the data when "hanging" links draw attention and should be allowed (to specify in something, to be somehow defined). If as a result of the permission it is established that the final object of link cannot exist, final object becomes B::Nothing. If as a result of the permission it is established that the final object of link is unknown, and cannot be defined now final object becomes B::Unknown. 
The link created between classes, extends on all its user objects.

2.7.1 Types of links:

- Restricted. Semantically it means that between two entities there can not be a link. If link between two classes is marked by a condition it "Restricted", link between objects of these classes cannot have a condition Normal. But can have a condition of Undefined. If in classes link  is not Restricted, link of objects can have any condition including Restricted.  
- Normally. Between two entities there is a usual link.
- Undefined. It is used by optimizator at structure service. 
- Not exist. This value is used only as a return code in functions of search of links.

2.7.2 Short description of rules for links:

Designations: 
 	A - the user class.
	M - a class the World. An index point of hierarchy of classes on all axes.
	Y - system class Undefined
	y - system object Undefined of the user class
 	‡1 - One user object of the user class
 	‡* - A little user objects of user class class
	+ - link creation between objects or classes
	- - link removal between objects or classes

1) If A + B that ‡* + by, ay + b*; If classes incorporate link objects also incorporate link - to objects Undefined of a target class.
2) If a1 + b1 that A + B; If objects incorporate link, classes also incorporate link. (Realisation - at first to connect the classes, then the necessary objects).
3) If a1 + b* that A + B; (Realization - at first to connect the classes, then the necessary objects).
4) If link AB has the condition Restricted, all links ab should have a condition Restricted.
5) Links between objects of one class cannot be created.
6) Between 2 objects there can be only one operating link.
7) If A hasnot any link in axes X +, Y + or Z +, it should be automatically connected with a class the World. If A has link in these axes (at least one) not with a class the World, it the World should be disconnected from a class. 
8) If A - B  all ab links to remove.
9) If a1 - b1, a1 + by, ay + b1; object of a target class to make Undefined


2.8 Link class-method

Connect classes and methods. Link consists of the identifier of object/class and the method/kta identifier.
The class can be connected with several methods, the method can be connected with several classes.
Allow to cause a method connected with a class.


2.9 Optimizator

It is the service procedure which is carrying out check and optimisation of structure of base.
Removal of unnecessary structures, expansion of bottlenecks, system development.




(C) 2011 Seljakov Pavel Mihajlovich

------------------------------------------------------------------------------------

Semantic Platform Project 2.0
œÂ‰‚‡ËÚÂÎ¸Ì‡ˇ ËÌÙÓÏ‡ˆËˇ
16 ‡ÔÂÎˇ 2011


1 Œ·˘ÂÂ ÓÔËÒ‡ÌËÂ

›Ú‡ ÒËÒÚÂÏ‡ ˇ‚ÎˇÂÚÒˇ ÒÂ‰ÒÚ‚ÓÏ ‰Îˇ ÒÓÁ‰‡ÌËˇ ÒÂÏ‡ÌÚË˜ÂÒÍÓÈ ÒÂÚË ‰Îˇ  ÔÓÒÚÓÂÌËˇ, ı‡ÌÂÌËˇ Ë Ó·‡·ÓÚÍË ÎÓ„Ë˜ÂÒÍËı ÏÓ‰ÂÎÂÈ. —ÂÚ¸ ËÒÔÓÎ¸ÁÛÂÚ Ó·˙ÂÍÚÌÓ-ÓËÂÌÚËÓ‚‡ÌÌÛ˛ ÏÂÚÓ‰ÓÎÓ„Ë˛. —ÂÚ¸ ÒÓÒÚÓËÚ ËÁ ÍÎ‡ÒÒÓ‚, Ó·˙ÂÍÚÓ‚, ÏÂÚÓ‰Ó‚, Ò‚ˇÁÂÈ. œË ÔÓÏÓ˘Ë ˝ÚÓÈ ÒÂÚË ÏÓÊÌÓ ÒÓÁ‰‡‚‡Ú¸ „‡Ù˚ - ÎÓ„Ë˜ÂÒÍËÂ ÏÓ‰ÂÎË Ë ‰ÂÎ‡Ú¸ ÓÔÂ‡ˆËË Ò ÌËÏË. —ËÒÚÂÏ‡ ÔÓÁ‚ÓÎˇÂÚ ‚˚ÔÓÎÌˇÚ¸ ˜‡ÒÚË˜ÌÛ˛ ËÎË ÔÓÎÌÛ˛ ‡·ÒÚ‡ÍˆË˛ ÏÓ‰ÂÎÂÈ, ÔË ˝ÚÓÏ ÒÓı‡Ìˇˇ Ëı ˆÂÎÓÒÚÌÓÒÚ¸ Ë ‰ÓÒÚÓ‚ÂÌÓÒÚ¸. —ËÒÚÂÏ‡ Ú‡ÍÊÂ ÔÓÚÂÌˆË‡Î¸ÌÓ ÔÓÁ‚ÓÎˇÂÚ ÔÓËÁ‚Ó‰ËÚ¸ ÍÎ‡ÒÒËÙËÍ‡ˆË˛ ÏÓ‰ÂÎÂÈ, ÔË Ì‡ÎË˜ËË ÌÂÍÓÚÓÓ„Ó Ì‡˜‡Î¸ÌÓ„Ó ÓÔ˚Ú‡.
’ÓÚˇ ÒÂÈ˜‡Ò ÒËÒÚÂÏ‡ ‚˚„Îˇ‰ËÚ Í‡Í Ó˜ÂÂ‰Ì‡ˇ Â‡ÎËÁ‡ˆËˇ ÚÂÓËË ÒÂÏ‡ÌÚË˜ÂÒÍËı ÒÂÚÂÈ, ÌÂÒÏÓÚˇ Ì‡ ˝ÚÓ, ÂÂ ÒÎÂ‰ÛÂÚ ‡ÒÒÏ‡ÚË‚‡Ú¸ Í‡Í ÌÂÍÓÚÓ˚È ˇÁ˚Í Ë ÒÂ‰Û ÔÓ„‡ÏÏËÓ‚‡ÌËˇ. ÃÓÊÌÓ ÒÍÓÌÒÚÛËÓ‚‡Ú¸ Î˛·ÓÈ ÚËÔ, ÓÔËÒ‡Ú¸ Â„Ó ÔÓ‚Â‰ÂÌËÂ Ë Á‡ÚÂÏ ËÒÔÓÎ¸ÁÓ‚‡Ú¸.  ÃÓÊÌÓ ‡Á‚ËÚ¸ ÒËÒÚÂÏÛ Ú‡Í, ˜ÚÓ·˚ ÓÌ‡ ÔÂ‚‡ÚËÎ‡Ò¸ ‚ framework, Â‡ÎËÁÓ‚‡‚ ÚËÔË˜Ì˚Â ÍÎ‡ÒÒ˚ Ó·˙ÂÍÚÓ‚ Ë ÓÔÂ‡ˆËË Ò ÌËÏË, ÔÓÒÎÂ ˜Â„Ó ÒÚ‡ÌÂÚ ‚ÓÁÏÓÊÌ˚Ï ÔÓÒÚÓÂÌËÂ Ô‡ÍÚË˜ÂÒÍË ÔËÏÂÌËÏ˚ı ÏÓ‰ÂÎÂÈ. 

›ÚÓ ÌÂ „ÓÚÓ‚˚È ÔÓ‰ÛÍÚ, ËÒıÓ‰ˇ Ëı ÍÓÚÓÓ„Ó, ÏÓÊÌÓ ÔÓÎÛ˜ËÚ¸ ÔÂ‰ÒÚ‡‚ÎÂÌËÂ Ó Ò‚ÓÈÒÚ‚‡ı Ë ÂÌÚ‡·ÂÎ¸ÌÓÒÚË Ë‰ÂË. ›ÚÓ ÚÓÎ¸ÍÓ Ì‡˜‡Ú‡ˇ ÔÓ·Ì‡ˇ Â‡ÎËÁ‡ˆËˇ ÙÛÌ‰‡ÏÂÌÚ‡. ƒÂÈÒÚ‚ËÚÂÎ¸ÌÓ ËÌÚÂÂÒÌ˚Â Ò‚ÓÈÒÚ‚‡ ÒËÒÚÂÏ˚ Á‡ÍÎ˛˜‡˛ÚÒˇ ‚ Ì‡‰ÒÚÓÈÍ‡ı, ÍÓÚÓ˚Â ‰ÓÎÊÌ˚ ·˚Ú¸ ÒÓÁ‰‡Ì˚ ‚ ‚Ë‰Â Ì‡·Ó‡ ÒÍËÔÚÓ‚ Ë ÏÓ‰ÂÎÂÈ.
“‡ÍËÏ Ó·‡ÁÓÏ, ÔÓÂÍÚ ÔÂ‰ÒÚ‡‚ÎˇÂÚÒˇ Í‡Í ÂÒÚ¸, ·ÂÁ „‡‡ÌÚËÈ Ë Ó„‡ÌË˜ÂÌËÈ. ﬂ Ì‡‰Â˛Ò¸, ÍÚÓ-ÌË·Û‰¸ ÔÓ‰‰ÂÊËÚ ˝ÚÛ ÌÂÓ·˚˜ÌÛ˛ ÒËÒÚÂÏÛ. ” ÏÂÌˇ ÔÓ˜ÚË ÌÂ ÓÒÚ‡ÎÓÒ¸ ‚ÂÏÂÌË.


1.1 “ÂÍÛ˘ÂÂ ÒÓÒÚÓˇÌËÂ ÔÓÂÍÚ‡. »ÁÏÂÌÂÌËˇ ÌÓ‚ÓÈ ‚ÂÒËË.
›ÚÓ ‚ÚÓ‡ˇ ‚ÂÒËˇ ‰‚ËÊÍ‡ ÔÓÂÍÚ‡. ¬‚Â‰ÂÌ˚ 3 ÓÒË Ò‚ˇÁË (X Y Z) ‰Îˇ ÔÓÒÚÓÂÌËˇ ÒÚÛÍÚÛ ÍÎ‡ÒÒÓ‚, Ó·˙ÂÍÚÓ‚, ÓÔÂ‡ˆËÈ. (¿„Â„‡ˆËˇ, ‡·ÒÚ‡ÍˆËˇ, ...).

ÃÂÚÓ‰˚ ÏÓ„ÛÚ ·˚Ú¸ Ó„‡ÌËÁÓ‚‡Ì˚ ‚ ËÂ‡ıË˜ÂÒÍÛ˛ ÒÚÛÍÚÛÛ ‰Îˇ Ó·ÂÒÔÂ˜ÂÌËˇ ‡·ÓÚ˚ ‡·ÒÚ‡ÍÚÌ˚ı Ë ‡„Â„‡ÚÌ˚ı ÏÂÚÓ‰Ó‚. ÃÂÚÓ‰˚ ÌÂÁ‡‚ËÒËÏ˚ ÓÚ ÍÎ‡ÒÒÓ‚, Ë ÏÓ„ÛÚ ËÒÔÓÎ¸ÁÓ‚‡Ú¸Òˇ ˜ÂÂÁ Ò‚ˇÁË Ò ÍÎ‡ÒÒ‡ÏË ËÎË ˜ÂÂÁ ËÂ‡ıË˛ ÏÂÚÓ‰Ó‚.

“ÂÍÛ˘‡ˇ Â‡ÎËÁ‡ˆËˇ ÒËÒÚÂÏ˚ ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒÓ·ÓÈ ÍÓ‰ C#, ÔÓÁ‚ÓÎˇ˛˘ËÈ ÒÓÁ‰‡‚‡Ú¸ ÒÚÛÍÚÛÛ ËÁ ÍÎ‡ÒÒÓ‚, Ó·˙ÂÍÚÓ‚, ÓÔÂ‡ˆËÈ.
- Ó‰, Ó·ÒÎÛÊË‚‡˛˘ËÈ ÒÚÛÍÚÛÛ ÍÎ‡ÒÒÓ‚ Ë Ó·˙ÂÍÚÓ‚, ÔÓÚËÓ‚‡Ì ËÁ ÔÂ‚ÓÈ ‚ÂÒËË. ”·‡ÌÓ Ó„‡ÌË˜ÂÌËÂ Ì‡ ÍÓÎË˜ÂÒÚ‚Ó Ò‚ˇÁÂÈ Ó·˙ÂÍÚÓ‚.  Ó‰ ÌÂ ÚÂÒÚËÓ‚‡Ì. 
- Ó‰, Ó·ÒÎÛÊË‚‡˛˘ËÈ ÓÔÂ‡ˆËË, ÌÂ „ÓÚÓ‚. —ÓÁ‰‡ÂÚÒˇ. œÎ‡ÌËÛÂÚÒˇ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ‚˚ÁÓ‚˚ ËÒÔÓÎÌˇÂÏÓ„Ó ÍÓ‰‡ ËÎË ËÌÚÂÔÂÚ‡ˆË˛ ÒÍËÔÚÓ‚. œÎ‡ÌËÛÂÚÒˇ ÔÓ‰‰ÂÊË‚‡Ú¸ ËÒÔÓÎÌÂÌËÂ ‡·ÒÚ‡ÍÚÌ˚ı ÏÂÚÓ‰Ó‚.  
-œÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÈ ËÌÚÂÙÂÈÒ ÌÂ Â‡ÎËÁÓ‚‡Ì. œÎ‡ÌËÛÂÚÒˇ „‡ÙË˜ÂÒÍËÈ ËÌÚÂÙÂÈÒ ÔÓ‰Ó·ÌÓ ÔÂ‚ÓÈ ‚ÂÒËË, Ë/ËÎË ÍÓÏ‡Ì‰Ì‡ˇ ÍÓÌÒÓÎ¸ a-la linux bash.
-»ÌÚÂÔÂÚ‡ÚÓ ÌÂ Â‡ÎËÁÓ‚‡Ì, ÔÎ‡ÌËÛÂÚÒˇ.

Œ·˘‡ˇ ÙÛÌÍˆËÓÌ‡Î¸ÌÓÒÚ¸ ÍÎ‡ÒÒÓ‚ Ë Ó·˙ÂÍÚÓ‚ ‚˚ÌÂÒÂÌ‡ ‚ Ó‰ËÚÂÎ¸ÒÍËÈ ÍÎ‡ÒÒ.
ŒÔÂ‡ˆËË Ò‚ˇÁÂÈ ÛÌËÙËˆËÓ‚‡Ì˚, ˜ËÒÎÓ ÓÒÂÈ ÎÂ„ÍÓ Û‚ÂÎË˜ËÚ¸ ÔË ÌÂÓ·ıÓ‰ËÏÓÒÚË.
ÃÂÚÓ‰˚ ËÒÔÓÎ¸ÁÛ˛ÚÒˇ ÔË ÔÓÏÓ˘Ë ÍÚ‡.  “¿ ÔÓÁ‚ÓÎˇ˛Ú ı‡ÌËÚ¸ ËÌÙÓÏ‡ˆË˛ Ó ËÒÔÓÎ¸ÁÓ‚‡ÌËË ÏÂÚÓ‰‡, Ó ÔÂÂÌ‡Ô‡‚ÎÂÌËË ‚˚ÁÓ‚‡, ÓˆÂÌÍË Í‡˜ÂÒÚ‚ ÏÂÚÓ‰Ó‚.


1.2 ÒËÒÚÂÏ‡ ÔÓ‰‰ÂÊÍË ËÌÚÂÎÎÂÍÚ‡ (—œ»). Õ‡·ÓÒÍË.

—ËÒÚÂÏ‡ ÔÂÒÓÌ‡ÎËÁËÓ‚‡Ì‡ Ë Ì‡ÒÚ‡Ë‚‡ÂÚÒˇ ÔÓ‰ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ. œÓÎ¸ÁÓ‚‡ÚÂÎ¸ ÏÓÊÂÚ ‰ÓÒÚ‡Ë‚‡Ú¸ Ë ÔÂÂÒÚ‡Ë‚‡Ú¸ ÒËÒÚÂÏÛ Í‡Í ÂÏÛ Û‰Ó·ÌÓ.
ƒÎˇ ËÌÚÂÙÂÈÒ‡ ÏÓÊÌÓ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ËÌ‰Ë‚Ë‰Û‡Î¸Ì˚È ˇÁ˚Í (ÒËÏ‚ÓÎ = ÔÓÌˇÚËÂ) Ë ËÌ‰Ë‚Ë‰Û‡Î¸Ì˚Â ˝ÎÂÏÂÌÚ˚ ËÌÚÂÙÂÈÒ‡.
(Õ‡‰Ó ÔÓÒÏÓÚÂÚ¸ ÒÂÏ‡ÌÚËÍÛ ËÂÓ„ÎËÙË˜ÂÒÍËı ˇÁ˚ÍÓ‚ - Í‡Í ÓÌË ÙÓÏËÛ˛ÚÒˇ, Ó·˘ËÂ Ô‡‚ËÎ‡ ‰Îˇ ‚ÒÂı Ì‡‚ÂÌÓ Ó‰ËÌ‡ÍÓ‚˚?)
“‡ÍËÏ Ó·‡ÁÓÏ, ‚Á‡ËÏÓ‰ÂÈÒÚ‚ËÂ Â‡ÎËÁÓ‚‡ÌÓ ‚ ÔÓÌˇÚËˇı, ÍÓÚÓ˚Â Ú‡ÌÒÎËÛ˛ÚÒˇ ‚ ÒËÏ‚ÓÎ˚ ‰Îˇ ÔÂÂ‰‡˜Ë ÔÓÎ¸ÁÓ‚‡ÚÂÎ˛ Ë Ó·‡ÚÌÓ.
Õ‡·Ó ÔÓÌˇÚËÈ ÓÔÂ‰ÂÎˇÂÚÒˇ ÔÓÎ¸ÁÓ‚‡ÚÂÎÂÏ, Ú‡ÌÒÎËÛÂÚÒˇ ÔÓ Ô‡‚ËÎ‡Ï, ÓÔÂ‰ÂÎÂÌÌ˚Ï ÔÓÎ¸ÁÓ‚‡ÚÂÎÂÏ.
ÃÓÊÌÓ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ Î˛·ÓÈ, ‚ ÚÓÏ ˜ËÒÎÂ ËÌ‰Ë‚Ë‰Û‡Î¸Ì˚È, ÒÔÓÒÓ· ÔÂ‰ÒÚ‡‚ÎÂÌËˇ ÔÓÌˇÚËÈ.

—ËÒÚÂÏ‡ ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒÓ·ÓÈ „‡Ù ËÁ ÍÎ‡ÒÒÓ‚, Ó·˙ÂÍÚÓ‚, ÓÔÂ‡ˆËÈ. “Ó ÂÒÚ¸, ‰‡ÌÌ˚ı Ë ‰ÂÈÒÚ‚ËÈ.
—ËÒÚÂÏ‡ ‰ÓÎÊÌ‡ ÙÓÏËÓ‚‡Ú¸Òˇ ÔÓ ÓÔÂ‰ÂÎÂÌÌ˚Ï Ô‡‚ËÎ‡Ï, Ó‰Ì‡ÍÓ Ëı ÒÓ·Î˛‰ÂÌËÂ ˜‡ÒÚË˜ÌÓ ÎÓÊËÚÒˇ Ì‡ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ.
œËÎÓÊÂÌËˇ ‚ ÒËÒÚÂÏÂ ÒÓÁ‰‡˛ÚÒˇ Ó·‡ÁÓ‚‡ÌËÂÏ ‚ Ó·˘ÂÈ „ÎÓ·‡Î¸ÌÓÈ ÒÚÛÍÚÛÂ ÌÓ‚˚ı ÒÚÛÍÚÛ, ËÒÔÓÎ¸ÁÛ˛˘Ëı ÌÓ‚˚Â Ë ÒÛ˘ÂÒÚ‚Û˛˘ËÂ ˝ÎÂÏÂÌÚ˚ ÒËÒÚÂÏ˚ ‰Îˇ Â‡ÎËÁ‡ˆËË ÌÂÓ·ıÓ‰ËÏ˚ı ÙÛÌÍˆËÈ. œË ˝ÚÓÏ ‰ËÒÚË·ÛÚË‚ ÌÓ‚Ó„Ó ÔËÎÓÊÂÌËˇ ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒÓ·ÓÈ ÚÂÍÒÚÓ‚˚È Ù‡ÈÎ - ÒÍËÔÚ, ÔÓ ÍÓÚÓÓÏÛ ÒÓÁ‰‡ÂÚÒˇ ÌÓ‚˚È Û˜‡ÒÚÓÍ ÒÚÛÍÚÛ˚.
œÓÒÍÓÎ¸ÍÛ ÒËÒÚÂÏ‡ ËÌ‰Ë‚Ë‰Û‡Î¸Ì‡, Í‡Ê‰˚È ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ ‰ÓÎÊÂÌ Ò‡Ï ÍÓÂÍÚËÓ‚‡Ú¸ ÒÚÛÍÚÛÛ ÔËÎÓÊÂÌËˇ ÔË ÌÂÓ·ıÓ‰ËÏÓÒÚË.
“Ó ÂÒÚ¸, ÒÍËÔÚ˚ ‰ÓÎÊÌ˚ ·˚Ú¸ ÓÚÍ˚Ú˚ÏË. ›ÚÓ ÛÊÂ ÌÂ ÔÓ„‡ÏÏ‡, ‡ ËÌÒÚÛÍˆËË ÔÓ ÂÂ ÒÓÁ‰‡ÌË˛. ’ÓÚˇ ‚ Í‡ÍÓÏ-ÚÓ ÒÏ˚ÒÎÂ ˝ÚÓ ‚ÒÂ Â˘Â ÓÚ‰ÂÎ¸Ì‡ˇ ‚Â˘¸. “ËÔË˜ÌÓ ‰Îˇ ÒÓ‚ÂÏÂÌÌÓ„Ó ÔÓ„‡ÏÏÌÓ„Ó Ó·ÂÒÔÂ˜ÂÌËˇ.

ƒÎˇ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ ÌÂÓ·ıÓ‰ËÏÓ ÒÓÁ‰‡Ú¸ Ì‡˜‡Î¸ÌÛ˛ ÒÚÛÍÚÛÛ, Ó·ÎÂ„˜‡˛˘Û˛ Ì‡˜‡ÎÓ ËÒÔÓÎ¸ÁÓ‚‡ÌËˇ. ÕÂÍÓÚÓ˚È Ó·˘ËÈ Ì‡·Ó, ÍÓÚÓ˚È Á‡ÚÂÏ Ò‡Ï ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ ·Û‰ÂÚ ‡Á‚Ë‚‡Ú¸ ÔÓ Ò‚ÓÂÏÛ ÛÒÏÓÚÂÌË˛. 
“‡ÍÊÂ ÔÓÎ¸ÁÓ‚‡ÚÂÎ˛ ÔÓÚÂ·Û˛ÚÒˇ ÌÂÍÓÚÓ˚Â Ì‡˜‡Î¸Ì˚Â ÁÌ‡ÌËˇ, ÔÓÁ‚ÓÎˇ˛˘ËÂ ÒÓÁ‰‡‚‡Ú¸ Ë ÓˆÂÌË‚‡Ú¸ ÒÚÛÍÚÛÛ, ‡ÒÔÓÁÌ‡‚‡Ú¸ ÚËÔË˜Ì˚Â Ó¯Ë·ÍË. 

—ËÒÚÂÏ‡ ·Û‰ÂÚ Ì‡‰ÒÚÓÈÍÓÈ Ì‡‰ Œ— ÍÓÏÔ¸˛ÚÂ‡. 
¬ÓÁÏÓÊÌÓÒÚË:
- ÏÓ‰ËÙËÍ‡ˆËˇ ÔÓÎ¸ÁÓ‚‡ÚÂÎÂÏ ËÎË Ò‡ÏÓÏÓ‰ËÙËÍ‡ˆËˇ, ËÒıÓ‰ˇ ËÁ ÚÂ·Ó‚‡ÌËÈ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ.   
- ÔÓÎÌÓÒÚ¸˛ ËÌ‰Ë‚Ë‰Û‡Î¸Ì˚È ËÌÚÂÙÂÈÒ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ.
- ‡‚ÚÓÏ‡ÚËÁ‡ˆËˇ ÚËÔË˜Ì˚ı ‰ÂÈÒÚ‚ËÈ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ.
—Û˘ÂÒÚ‚Û˛˘ËÂ Â‡ÎËÁ‡ˆËË ÚÂ·Û˛Ú ÓÚ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ ÁÌ‡ÌËÈ ‡Î„ÓËÚÏËÁ‡ˆËË Ë ˇÁ˚ÍÓ‚ ÔÓ„‡ÏÏËÓ‚‡ÌËˇ, ‚Î‡‰ÂÌËˇ ÒÓÓÚ‚ÂÚÒÚ‚Û˛˘ËÏË ËÌÒÚÛÏÂÌÚ‡ÏË.

“‡ÍËÏ Ó·‡ÁÓÏ, Á‡‰‡˜‡ ÒÓÁ‰‡ÌËˇ —œ»: ÒÓÁ‰‡Ú¸ ÒËÒÚÂÏÛ, ÍÓÚÓ‡ˇ ÌÂ ÚÂ·ÛÂÚ ÒÔÂˆË‡Î¸Ì˚ı ÁÌ‡ÌËÈ ‰Îˇ ÂÂ ËÒÔÓÎ¸ÁÓ‚‡ÌËˇ ËÎË ÏÓ‰ËÙËÍ‡ˆËË.
ƒÎˇ Ì‡˜‡Î‡ ‡·ÓÚ˚ Ò ÒËÒÚÂÏÓÈ ‰ÓÎÊÌÓ ·˚Ú¸ ‰ÓÒÚ‡ÚÓ˜ÌÓ Ó·˘ÂÓ·‡ÁÓ‚‡ÚÂÎ¸ÌÓÈ ÔÓ‰„ÓÚÓ‚ÍË. (»Á ˜Â„Ó ÒÎÂ‰ÛÂÚ, ˜ÚÓ Ó·˘ÂÓ·‡ÁÓ‚‡ÚÂÎ¸Ì‡ˇ ÔÓ‰„ÓÚÓ‚Í‡ ‰ÓÎÊÌ‡ Ó·ÂÒÔÂ˜Ë‚‡Ú¸ ÌÂÍÓÚÓ˚È ÒÚ‡·ËÎ¸Ì˚È ÏËÌËÏÛÏ Í‡Í ÒÚ‡Ì‰‡Ú. ›ÚÓÚ Ì‡·Ó ÁÌ‡ÌËÈ ‚ÔÓÎÌÂ ÔË„Ó‰ÂÌ ‚ Î˛·ÓÈ ‰ÂˇÚÂÎ¸ÌÓÒÚË, ÔÓÒÍÓÎ¸ÍÛ ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒÂÏ‡ÌÚËÍÛ ÓÍÛÊ‡˛˘ÂÈ ÒÂ‰˚.)


2 “ÂıÌË˜ÂÒÍÓÂ ÓÔËÒ‡ÌËÂ

—ËÒÚÂÏ‡ ÒÓÁ‰‡Ì‡ Ì‡ C# ‰Îˇ Microsoft VisualStudio 2005 ËÎË ÔÓÁ‰ÌËı ‚ÂÒËÈ. VisualStudio ËÒÔÓÎ¸ÁÛÂÚÒˇ Í‡Í ÒÂ‰‡ ‡Á‡·ÓÚÍË Ë ÓÚÎ‡‰ÍË, Ò ÔÓÒÏÓÚÓÏ ÒÓÒÚÓˇÌËÈ Ó·˙ÂÍÚÓ‚ Ë ‰Û„Ëı ‰‡ÌÌ˚ı.
ƒÎˇ ı‡ÌÂÌËˇ ÒÚÛÍÚÛ˚ ÒËÒÚÂÏ˚ Ì‡ ‰ËÒÍÂ ËÒÔÓÎ¸ÁÛÂÚÒˇ XML. ¬Ó ‚ÂÏˇ ‡·ÓÚ˚ ÒÚÛÍÚÛ‡ ˆÂÎËÍÓÏ Ì‡ıÓ‰ËÚÒˇ ‚ ÓÔÂ‡ÚË‚ÌÓÈ Ô‡ÏˇÚË ÍÓÏÔ¸˛ÚÂ‡.

¬ ÒËÒÚÂÏÂ ÔÂ‰ÔÓÎ‡„‡ÂÚÒˇ ÒÎÂ‰Û˛˘‡ˇ ‡ıËÚÂÍÚÛ‡:
 - Ò·ÓÍ‡-‰‚ËÊÓÍ ÒËÒÚÂÏ˚ ‚ ‚Ë‰Â ·Ë·ÎËÓÚÂÍË ÍÎ‡ÒÒÓ‚. œÂ‰ÓÒÚ‡‚ÎˇÂÚ ÒÂ‰ÒÚ‚‡ ‰Îˇ Â‡ÎËÁ‡ˆËË ÒËÒÚÂÏ˚. ›ÍÒÔÓÚËÛÂÚ ÍÓÌÚÂÈÌÂ, ‚ ÍÓÚÓÓÏ ‚ÒÂ ÒÛ˘ÌÓÒÚË ÒÓÁ‰‡˛ÚÒˇ, ÒÛ˘ÂÒÚ‚Û˛Ú Ë ÛÌË˜ÚÓÊ‡˛ÚÒˇ.
 - Ò·ÓÍË ÏÂÚÓ‰Ó‚ ‰Îˇ ‚˚ÔÓÎÌÂÌËˇ ÓÔÂ‡ˆËÈ Ò ‰‡ÌÌ˚ÏË ·‡Á˚. —·ÓÍË ÒÓ‰ÂÊ‡Ú ÏÂÚÓ‰˚, ÓÔÂ‰ÂÎˇÂÏ˚Â ÔËÍÎ‡‰Ì˚Ï ÔÓ„‡ÏÏËÒÚÓÏ. ÃÂÚÓ‰˚ ËÒÔÓÎ¸ÁÛ˛ÚÒˇ ‰‚ËÊÍÓÏ ÔË ÔÓÏÓ˘Ë Reflection.
 - ÔËÎÓÊÂÌËÂ ñ Ó·ÓÎÓ˜Í‡ ÔÓÎ¸ÁÓ‚‡ÚÂÎˇ, ËÁ ÍÓÚÓÓÈ ÏÓÊÌÓ ‡·ÓÚ‡Ú¸ ‚ ÒËÒÚÂÏÂ.
 - ÛÚËÎËÚ˚ Ë ÒÚÓÓÌÌËÂ ÔËÎÓÊÂÌËˇ. 

œÓÎ¸ÁÓ‚‡ÚÂÎË ÔÓÂÍÚ‡ ‰ÂÎˇÚÒˇ Ì‡ ÒËÒÚÂÏÌ˚ı ÔÓ„‡ÏÏËÒÚÓ‚, ÔËÍÎ‡‰Ì˚ı ÔÓ„‡ÏÏËÒÚÓ‚ Ë  ÍÓÌÂ˜Ì˚ı ÔÓÎ¸ÁÓ‚‡ÚÂÎÂÈ.
—ËÒÚÂÏÌ˚Â ÔÓ„‡ÏÏËÒÚ˚ Á‡‚Â‰Û˛Ú  ¿œ» ÔÓÂÍÚ‡, ÍÓÚÓ˚È ‰ÂÎËÚÒˇ Ì‡ SystemLayer Ë UserLayer. SystemLayer  ‚˚ÔÓÎÌˇÂÚ ·‡ÁÓ‚˚Â ÓÔÂ‡ˆËË ‚ ÒÓÓÚ‚ÂÚÒÚ‚ËË Ò ‡ıËÚÂÍÚÛÓÈ  ÍÓÏÔ¸˛ÚÂÌÓÈ ÔÎ‡ÚÙÓÏ˚. UserLayer Ó·ÂÒÔÂ˜Ë‚‡ÂÚ ÒÓÓÚ‚ÂÚÒÚ‚ËÂ ÓÔÂ‡ˆËÈ Ë ÏÂÚÓ‰ÓÎÓ„ËË, ÍÓÌÚÓÎ¸ ‚ıÓ‰Ì˚ı ‰‡ÌÌ˚ı Ë Ú‡Í ‰‡ÎÂÂ. 
œËÍÎ‡‰Ì˚Â  ÔÓ„‡ÏÏËÒÚ˚ ËÒÔÓÎ¸ÁÛ˛Ú UserLayer ‰Îˇ ÒÓÁ‰‡ÌËˇ  ÏÂÚÓ‰Ó‚ Ó·‡·ÓÚÍË ‰‡ÌÌ˚ı. 
 ÓÌÂ˜Ì˚Â ÔÓÎ¸ÁÓ‚‡ÚÂÎË ÍÓÌÒÚÛËÛ˛Ú ÒÚÛÍÚÛÛ ‰‡ÌÌ˚ı, ‰Ó·‡‚Îˇ˛Ú Ë Û‰‡Îˇ˛Ú ‰‡ÌÌ˚Â, ÚÂ·Û˛Ú ÓÚ ÔËÍÎ‡‰Ì˚ı ÔÓ„‡ÏÏËÒÚÓ‚ Â‡ÎËÁÓ‚‡Ú¸ ÌÂÓ·ıÓ‰ËÏ˚Â ÏÂÚÓ‰˚.

ƒÎˇ ı‡ÌÂÌËˇ ·‡Á˚ ‚Ó ‚ÂÏˇ ‡·ÓÚ˚ ËÒÔÓÎ¸ÁÛÂÚÒˇ ÓÔÂ‡ÚË‚Ì‡ˇ Ô‡ÏˇÚ¸. Õ‡ ‰ËÒÍÂ ·‡Á‡ ı‡ÌËÚÒˇ ‚ ‚Ë‰Â XML ‰ÓÍÛÏÂÌÚ‡, ÌÂÏÌÓ„Ó ÓÔÚËÏËÁËÓ‚‡ÌÌÓ„Ó ‰Îˇ ÔÓÒÚÓ„Ó ÔÓÒÏÓÚ‡.
‘‡ÈÎ ·‡Á˚ ‰‡ÌÌ˚ı ËÏÂÂÚ ‚ÂÒË˛ Ë ¯‡„. ¬ÂÒËˇ ÓÁÌ‡˜‡ÂÚ ÒÚÓÂÌËÂ Ù‡ÈÎ‡. ÿ‡„ ÔÂ‰Ì‡ÁÌ‡˜ÂÌ ‰Îˇ ÔÓËÒÍ‡ ÔÓÒÎÂ‰ÌÂÈ ÒÓı‡ÌÂÌÌÓÈ ÍÓÔËË ‰‡ÌÌ˚ı.
◊ÚÓ·˚ ÒÓı‡ÌˇÚ¸ ˆÂÎÓÒÚÌÓÒÚ¸ ÒÚÛÍÚÛ˚ ‰‡ÌÌ˚ı, ÓÔÂ‡ˆËË ‰ÓÎÊÌ˚ ÔÂ‰ÛÒÏ‡ÚË‚‡Ú¸ ‚ÓÁÏÓÊÌÓÒÚ¸ ÓÚÏÂÌ˚ ËÁÏÂÌÂÌËÈ ÔË Ò·ÓÂ. ≈ÒÎË ÓÚÏÂÌËÚ¸ ËÁÏÂÌÂÌËˇ ÌÂ‚ÓÁÏÓÊÌÓ, ÒÎÂ‰ÛÂÚ Á‡„ÛÁËÚ¸ ÔÓÒÎÂ‰Ì˛˛ ‚ÂÒË˛ ‰‡ÌÌ˚ı ËÁ Ù‡ÈÎ‡. œÓÒÎÂ Á‡‚Â¯ÂÌËˇ ÓÔÂ‡ˆËË ÌÛÊÌÓ ÒÓı‡ÌËÚ¸ ÌÓ‚Û˛ ‚ÂÒË˛ ÒËÒÚÂÏ˚ Ì‡ ‰ËÒÍ.
œÎ‡ÌËÛÂÚÒˇ ‰Ó·‡‚ËÚ¸ ÔÓ‰‰ÂÊÍÛ Ù‡ÈÎÓ‚, ‚ ˝ÚÓÏ ÒÎÛ˜‡Â ÒÓı‡Ìˇ˛ÚÒˇ Ú‡ÍÊÂ ÍÓÔËË Ù‡ÈÎÓ‚. 

œÓÒÍÓÎ¸ÍÛ ÒËÒÚÂÏ‡ Â‡ÎËÁÛÂÚÒˇ ‰Îˇ ËÒÒÎÂ‰Ó‚‡ÌËˇ, ‰Îˇ ÓÒÌÓ‚Ì˚ı ÒÛ˘ÌÓÒÚÂÈ ÔÂ‰ÛÒÏÓÚÂÌ˚ ÔÓÎˇ ‰Îˇ ı‡ÌÂÌËˇ ÚÂÍÒÚÓ‚˚ı ÓÔËÒ‡ÌËÈ. 


2.1 —Û˘ÌÓÒÚË

 ÓÌÚÂÈÌÂ - ÔÂ‰ÒÚ‡‚ÎˇÂÚ ‚Ò˛ ÒËÒÚÂÏÛ. —Ó‰ÂÊËÚ ‚ÒÂ ÓÒÚ‡Î¸Ì˚Â ÒÛ˘ÌÓÒÚË.
Œ·˙ÂÍÚ˚ - ÔÂ‰ÒÚ‡‚Îˇ˛Ú ‰‡ÌÌ˚Â. 
 Î‡ÒÒ˚ - ÔÂ‰ÒÚ‡‚Îˇ˛Ú ‡·ÒÚ‡ÍˆË˛ ‰‡ÌÌ˚ı. ÃÓ„ÛÚ ·˚Ú¸ Ò‚ˇÁ‡Ì˚ ‚ ËÂ‡ıË˛ ÍÎ‡ÒÒÓ‚.
—‚ˇÁË ÍÎ‡ÒÒÓ‚/Ó·˙ÂÍÚÓ‚ - Ò‚ˇÁ˚‚‡˛Ú ÍÎ‡ÒÒ˚ Ò ÍÎ‡ÒÒ‡ÏË, Ó·˙ÂÍÚ˚ Ò Ó·˙ÂÍÚ‡ÏË ‚ Ó‰ÌÓÈ ËÁ ÓÒÂÈ.
—‚ˇÁË ÍÎ‡ÒÒ-ÏÂÚÓ‰ - Ò‚ˇÁ˚‚‡˛Ú ÍÎ‡ÒÒ˚ Ò ÏÂÚÓ‰‡ÏË.
—‚ˇÁË ÏÂÚÓ‰Ó‚ - Ò‚ˇÁ˚‚‡˛Ú ÏÂÚÓ‰˚ Ò ÏÂÚÓ‰‡ÏË.
ÃÂÚÓ‰˚ - ÔÂ‰ÒÚ‡‚Îˇ˛Ú ÓÔÂ‡ˆË˛. ÃÓ„ÛÚ ·˚Ú¸ Ò‚ˇÁ‡Ì˚ ‚ ËÂ‡ıË˛ ÏÂÚÓ‰Ó‚.
 “¿ - ÍÓÏÔÎÂÍÚ ÚËÔÓ‚ ‡„ÛÏÂÌÚÓ‚. œÂ‰ÒÚ‡‚Îˇ˛Ú ËÒÔÓÎ¸ÁÓ‚‡ÌËÂ ÏÂÚÓ‰‡.
¿„ÛÏÂÌÚ˚ - ‡„ÛÏÂÌÚ˚ ÏÂÚÓ‰‡.


2.2 »‰ÂÌÚËÙËÍ‡ÚÓ˚, ÔÓÒÚ‡ÌÒÚ‚‡ Ë‰ÂÌÚËÙËÍ‡ÚÓÓ‚

 ‡Ê‰˚È ÍÎ‡ÒÒ ËÏÂÂÚ ÔÓˇ‰ÍÓ‚˚È ÌÓÏÂ, Í‡Ê‰˚È Ó·˙ÂÍÚ ‚ÌÛÚË ÍÎ‡ÒÒ‡ ËÏÂÂÚ ÔÓˇ‰ÍÓ‚˚È ÌÓÏÂ.
»‰ÂÌÚËÙËÍ‡ÚÓ Ó·˙ÂÍÚ‡ ÒÓÒÚÓËÚ ËÁ ÌÓÏÂ‡ ÍÎ‡ÒÒ‡ Ë ÌÓÏÂ‡ Ó·˙ÂÍÚ‡ ‚ ÍÎ‡ÒÒÂ.
ÕÓÏÂ‡ ÓÚ 0 ‰Ó 255 Ó·‡ÁÛ˛Ú ÒËÒÚÂÏÌÓÂ ÔÓÒÚ‡ÌÒÚ‚Ó. Œ·˙ÂÍÚ˚ Ë ÍÎ‡ÒÒ˚ ‚ ˝ÚÓÏ ÔÓÒÚ‡ÌÒÚ‚Â ˇ‚Îˇ˛ÚÒˇ ˜‡ÒÚ¸˛ ‡ıËÚÂÍÚÛ˚ ÒËÒÚÂÏ˚.
ÕÓÏÂ‡ ‚˚¯Â 255 Ó·‡ÁÛ˛Ú ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍÓÂ ÔÓÒÚ‡ÌÒÚ‚Ó. œÂ‚˚È ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÈ Ó·˙ÂÍÚ ÔÂ‚Ó„Ó ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍÓ„Ó ÍÎ‡ÒÒ‡ ·Û‰ÂÚ ËÏÂÚ¸ ObjID 256:256.


2.3  ÓÌÚÂÈÌÂ

 ÓÌÚÂÈÌÂ ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒËÒÚÂÏÛ, ı‡ÌËÚ ÒÔËÒÓÍ ÍÎ‡ÒÒÓ‚/ÏÂÚÓ‰Ó‚ ÒËÒÚÂÏ˚, ÔÂ‰ÓÒÚ‡‚ÎˇÂÚ ÓÔÂ‡ˆËË.
 ÓÌÚÂÈÌÂ ÔÓÁ‚ÓÎˇÂÚ Á‡„ÛÁËÚ¸ ·‡ÁÛ ËÁ Ù‡ÈÎ‡, ‚˚„ÛÁËÚ¸ ‚ Ù‡ÈÎ, ÔÓËÁ‚ÂÒÚË ˜ËÒÚÍÛ Ë ÓÔÚËÏËÁ‡ˆË˛ ÒÚÛÍÚÛ˚ ‰‡ÌÌ˚ı, ÒÓÁ‰‡Ú¸, Û‰‡ÎËÚ¸, ËÁÏÂÌËÚ¸ ÍÎ‡ÒÒ Ë Ò‚ˇÁË ÍÎ‡ÒÒ‡, Ó·˙ÂÍÚ‡, ‰Ó·‡‚ËÚ¸ ËÎË Û‰‡ÎËÚ¸ ÏÂÚÓ‰, ‚˚Á‚‡Ú¸ ÏÂÚÓ‰ ‰Îˇ Ó·˙ÂÍÚ‡ ÍÎ‡ÒÒ‡ Ë Ú‡Í ‰‡ÎÂÂ. 


2.4  Î‡ÒÒ˚

 Î‡ÒÒ˚ ÒÂÏ‡ÌÚË˜ÂÒÍË ˇ‚Îˇ˛ÚÒˇ ÍÎ‡ÒÒ‡ÏË ÒÛ˘ÌÓÒÚÂÈ Ë ËÒÔÓÎ¸ÁÛ˛ÚÒˇ ‰Îˇ ı‡ÌÂÌËˇ ÚËÔÓ‚ ‰‡ÌÌ˚ı Ë Ó·˘ÂÈ ÒÚÛÍÚÛ˚ Ò‚ˇÁÂÈ Ò ‰Û„ËÏË ÍÎ‡ÒÒ‡ÏË. —‚ˇÁË ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË, Í‡Í Ë ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË, Ó„‡ÌËÁÓ‚‡Ì˚ ÔÓ ÔËÌˆËÔÛ „Î‡‚Ì˚È-ÔÓ‰˜ËÌÂÌÌ˚È. Œ‰ËÌ Ë ÚÓÚ ÊÂ ÍÎ‡ÒÒ ÌÂ ÏÓÊÂÚ ·˚Ú¸ Ë „Î‡‚Ì˚Ï Ë ÔÓ‰˜ËÌÂÌÌ˚Ï Í‡ÍÓÏÛ-ÎË·Ó ÍÎ‡ÒÒÛ.  —ÎÂ‰ÛÂÚ ËÁ·Â„‡Ú¸ ÍÓÎ¸ˆÂ‚˚ı Ò‚ˇÁÂÈ ‚ ÒÚÛÍÚÛÂ ÍÎ‡ÒÒÓ‚. ¬ÓÓ·˘Â, ÒÚÛÍÚÛ‡ ÍÎ‡ÒÒÓ‚ ÚÂ·ÛÂÚ ·ÓÎ¸¯Ó„Ó ‚ÌËÏ‡ÌËˇ.  —‚ˇÁË ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË ÔÓÂˆËÛ˛ÚÒˇ Ì‡ ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÂ Ó·˙ÂÍÚ˚ ÍÎ‡ÒÒ‡, Ú‡ÍËÏ Ó·‡ÁÓÏ, ÒÚÛÍÚÛ‡ Ó·˙ÂÍÚÓ‚ ‚ ˆÂÎÓÏ ÔÓ‚ÚÓˇÂÚ ÒÚÛÍÚÛÛ ÍÎ‡ÒÒÓ‚.  ‡Ê‰‡ˇ ÌÓ‚‡ˇ Ò‚ˇÁ¸ ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË ÓÚ‡Ê‡ÂÚÒˇ Ì‡ ‚ÒÂı ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËı Ó·˙ÂÍÚ‡ı ˝ÚËı ÍÎ‡ÒÒÓ‚. “‡ÍËÏ Ó·‡ÁÓÏ, ÂÒÎË ‰Îˇ ÌÂÍÓÚÓÓÈ ÒÛ˘ÌÓÒÚË (Ó·˙ÂÍÚ‡) a1 ‰Ó·‡‚ÎÂÌÓ ÌÓ‚ÓÂ Ò‚ÓÈÒÚ‚Ó, ÓÌÓ ‰Ó·‡‚ÎˇÂÚÒˇ ‚ ‡·ÒÚ‡ÍÚÌÓÈ ÙÓÏÂ Ë Í ‰Û„ËÏ ÒÛ˘ÌÓÒÚˇÏ ÚÓ„Ó ÊÂ ÍÎ‡ÒÒ‡ - ÒÛ˘ÌÓÒÚË a2, a3, Ö Ú‡ÍÊÂ ÔÓÎÛ˜‡˛Ú ÚÓ ÊÂ Ò‚ÓÈÒÚ‚Ó, ÌÓ ÔÓÍ‡ ‚ ÌÂÓÔÂ‰ÂÎÂÌÌÓÈ ÙÓÏÂ.
 
 Î‡ÒÒ ÒÎÛÊËÚ Ú‡ÍÊÂ ¯‡·ÎÓÌÓÏ - Ó·‡ÁˆÓÏ ‰Îˇ ÒÓÁ‰‡ÌËˇ ÌÓ‚˚ı Ó·˙ÂÍÚÓ‚ ÍÎ‡ÒÒ‡.
ObjID ÍÎ‡ÒÒ‡ = 0. ¬ ÍÎ‡ÒÒÂ ı‡ÌˇÚÒˇ Ò‚ˇÁË ÍÎ‡ÒÒ‡ Ò ‰Û„ËÏË ÍÎ‡ÒÒ‡ÏË.  Î‡ÒÒ Ú‡ÍÊÂ ı‡ÌËÚ ÚËÔ ‰‡ÌÌ˚ı, ÌÓ ÌÂ Ò‡ÏË ‰‡ÌÌ˚Â.
 Î‡ÒÒ ËÏÂÂÚ Ë‰ÂÌÚËÙËÍ‡ÚÓ Ó·˙ÂÍÚ‡ ñ ËÍÓÌÍË, ÒÓÔÓÒÚ‡‚ÎÂÌÌÓÈ ˝ÚÓÏÛ ÍÎ‡ÒÒÛ. (¬ ˝ÚÓÈ ‚ÂÒËË ÌÂ Â‡ÎËÁÓ‚‡ÌÓ.)
 Î‡ÒÒ, Í‡Í Ë Ó·˙ÂÍÚ, ËÏÂÂÚ ÚË ÓÒË Ò‚ˇÁÂÈ: X (aggregation), Y (abstraction),  Z (reserved).
—ÓÓÚ‚ÂÚÒÚ‚ÂÌÌÓ, ¯ÂÒÚ¸ ÒÔËÒÍÓ‚ Ò‚ˇÁÂÈ: X+, X-, Y+, Y-, Z+, Z-.
 Î‡ÒÒ˚ ÏÓ„ÛÚ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ‚ÒÂ ÓÒË ‰Îˇ Ó·‡ÁÓ‚‡ÌËˇ ÒÚÛÍÚÛ˚ ÍÎ‡ÒÒÓ‚.
 Î‡ÒÒ ‚ÍÎ˛˜‡ÂÚ ‚ ÒÂ·ˇ ÒÔËÒÓÍ Ó·˙ÂÍÚÓ‚ ÍÎ‡ÒÒ‡, ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÏÂÚÓ‰‡ÏË. 

2.4.1 —ÎÛÊÂ·Ì˚Â ÍÎ‡ÒÒ˚

—ÎÛÊÂ·Ì˚Â/ÒËÒÚÂÏÌ˚Â ÍÎ‡ÒÒ˚ ÒÓÁ‰‡˛ÚÒˇ ‡‚ÚÓÏ‡ÚË˜ÂÒÍË ÔË ÒÓÁ‰‡ÌËË ·‡Á˚ ‰‡ÌÌ˚ı.
 Î‡ÒÒ 0 ñ ÃË/ World. Õ‡˜‡Î¸Ì˚È ÍÎ‡ÒÒ ·‡Á˚. ¬ÒÂ ÔÓ˜ËÂ ÒÚÛÍÚÛ˚ ÍÎ‡ÒÒÓ‚ Ì‡˜ËÌ‡˛ÚÒˇ Ò ÌÂ„Ó. ÃË ˇ‚ÎˇÂÚÒˇ ËÒıÓ‰ÌÓÈ ÚÓ˜ÍÓÈ Ì‡‚Ë„‡ˆËË ÔÓ ÒÚÛÍÚÛÂ ÍÎ‡ÒÒÓ‚. ¬ ÒËÒÚÂÏÂ ÏÓÊÂÚ ·˚Ú¸ ÌÂÒÍÓÎ¸ÍÓ ÌÂÁ‡‚ËÒËÏ˚ı „‡ÙÓ‚ ÍÎ‡ÒÒÓ‚, ‚ÒÂ ÓÌË ‰ÓÎÊÌ˚ Ì‡˜ËÌ‡Ú¸Òˇ Ò ÍÎ‡ÒÒ‡ ÃË. »Ì‡˜Â ÓÌË ·Û‰ÛÚ ÌÂ‰ÓÒÚÛÔÌ˚ ‰Îˇ ËÒÔÓÎ¸ÁÓ‚‡ÌËˇ Ë ÏÓ„ÛÚ ·˚Ú¸ Û‰‡ÎÂÌ˚ ÓÔÚËÏËÁ‡ÚÓÓÏ.
 Î‡ÒÒ 1 ñ Unknown. »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı ÍÎ‡ÒÒÓ‚ Ë Ó·ÓÁÌ‡˜‡ÂÚ ÌÂËÁ‚ÂÒÚÌÛ˛ ÒÛ˘ÌÓÒÚ¸, ÌÂ ÔÓ‰‰‡˛˘Û˛Òˇ ÓÔÂ‰ÂÎÂÌË˛.
 Î‡ÒÒ 2 ñ Undefined. »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı ÍÎ‡ÒÒÓ‚  Ë Ó·ÓÁÌ‡˜‡ÂÚ, ˜ÚÓ ÒÛ˘ÌÓÒÚ¸ Â˘Â ÌÂ ÓÔÂ‰ÂÎÂÌ‡, ÚÓ ÂÒÚ¸, ÂÂ ÌÛÊÌÓ ÓÔÂ‰ÂÎËÚ¸.
 Î‡ÒÒ 3 ñ Nothing.  »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı ÍÎ‡ÒÒÓ‚ Ë Ó·ÓÁÌ‡˜‡ÂÚ, ˜ÚÓ ÒÛ˘ÌÓÒÚ¸ ÌÂ ÒÛ˘ÂÒÚ‚ÛÂÚ.


2.5 Œ·˙ÂÍÚ˚

Œ·˙ÂÍÚ˚ ÔÂ‰Ì‡ÁÌ‡˜ÂÌ˚ ‰Îˇ ı‡ÌÂÌËˇ ÍÓÌÍÂÚÌ˚ı ‰‡ÌÌ˚ı Ë Ò‚ˇÁÂÈ ÏÂÊ‰Û ÌËÏË. Œ·˙ÂÍÚ˚ ÔËÌ‡‰ÎÂÊ‡Ú ÍÎ‡ÒÒÛ. 
 ‡Ê‰˚È Ó·˙ÂÍÚ ÒÓ‰ÂÊËÚ ÒÔËÒÍË Ò‚ˇÁÂÈ Ò ‰Û„ËÏË Ó·˙ÂÍÚ‡ÏË. 
¬ÒÂ Ó·˙ÂÍÚ˚ ÏÓ„ÛÚ ËÏÂÚ¸ ÌÂÒÍÓÎ¸ÍÓ Ò‚ˇÁÂÈ Ò Ó·˙ÂÍÚ‡ÏË Ó‰ÌÓ„Ó ÍÎ‡ÒÒ‡.

“ËÔ ‰‡ÌÌ˚ı Ó·˙ÂÍÚ‡ ÓÔÂ‰ÂÎˇÂÚÒˇ ÚËÔÓÏ ‰‡ÌÌ˚ı ÍÎ‡ÒÒ‡. ¬ ˝ÍÁÂÏÔÎˇÂ Ó·˙ÂÍÚ‡ ÚËÔ ‰‡ÌÌ˚ı ı‡ÌËÚÒˇ ‰Îˇ Û‰Ó·ÒÚ‚‡, ˜ÚÓ·˚ ÌÂ Á‡Ô‡¯Ë‚‡Ú¸ ÍÎ‡ÒÒ.
¬˚·Ó ÚËÔ‡ ‰‡ÌÌ˚ı Ó„‡ÌË˜ÂÌ ‚ÓÁÏÓÊÌÓÒÚˇÏË ÔËÏÂÌˇÂÏÓÈ ÔÎ‡ÚÙÓÏ˚ .NET Framework, Í‡Í ‚ ˜‡ÒÚË ‡·ÓÚ˚ Ò ÚËÔ‡ÏË ‰‡ÌÌ˚ı, Ú‡Í Ë ‚ ˜‡ÒÚË ÒÓÁ‰‡ÌËˇ ÏÂÚÓ‰Ó‚ ‰Îˇ ÌËı.

2.5.1 —ÎÛÊÂ·Ì˚Â Ó·˙ÂÍÚ˚

¬ Í‡Ê‰ÓÏ ÍÎ‡ÒÒÂ ‡‚ÚÓÏ‡ÚË˜ÂÒÍË ÒÓÁ‰‡˛ÚÒˇ ÒÎÛÊÂ·Ì˚Â/ÒËÒÚÂÏÌ˚Â Ó·˙ÂÍÚ˚.
Œ·˙ÂÍÚ 0 ñ Ó·ÓÁÌ‡˜‡ÂÚ Ò‡Ï ÍÎ‡ÒÒ ‚ ÔÓÒÚ‡ÌÒÚ‚Â Ë‰ÂÌÚËÙËÍ‡ÚÓÓ‚ Ó·˙ÂÍÚÓ‚.
Œ·˙ÂÍÚ 1 ñ Unknown. »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı Ó·˙ÂÍÚÓ‚ Ë Ó·ÓÁÌ‡˜‡ÂÚ ÌÂËÁ‚ÂÒÚÌÛ˛ ÒÛ˘ÌÓÒÚ¸.
Œ·˙ÂÍÚ 2 - Undefined.  »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı Ó·˙ÂÍÚÓ‚  Ë Ó·ÓÁÌ‡˜‡ÂÚ, ˜ÚÓ ÒÛ˘ÌÓÒÚ¸ Â˘Â ÌÂ ÓÔÂ‰ÂÎÂÌ‡, ÚÓ ÂÒÚ¸, ÂÂ ÌÛÊÌÓ ÓÔÂ‰ÂÎËÚ¸.
Œ·˙ÂÍÚ 3 ñ Nothing. »ÒÔÓÎ¸ÁÛÂÚÒˇ ‚ Ò‚ˇÁˇı ÍÎ‡ÒÒÓ‚ Ë Ó·ÓÁÌ‡˜‡ÂÚ CÛ˘ÌÓÒÚ¸ ÌÂ ÒÛ˘ÂÒÚ‚ÛÂÚ.


2.6 ÃÂÚÓ‰˚

Œ·˘ÂÂ ÓÔËÒ‡ÌËÂ ÏÂÚÓ‰Ó‚ ‚ ‚ÂÒËË 2.0. ÃÂÚÓ‰˚ ÒÛ˘ÂÒÚ‚ÂÌÌÓ ËÁÏÂÌÂÌ˚, ÔÓ˝ÚÓÏÛ Á‰ÂÒ¸ ÔË‚Â‰ÂÌÓ ÍÓÏÔÎÂÍÒÌÓÂ ÓÔËÒ‡ÌËÂ.

ŒÒÌÓ‚Ì˚Â ÒÛ˘ÌÓÒÚË ÒËÒÚÂÏ˚:
-  ÓÌÚÂÈÌÂ	- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒËÒÚÂÏÛ. MEngine ÍÎ‡ÒÒ, ÒÓ‰ÂÊËÚ ÒÔËÒÓÍ ÍÎ‡ÒÒÓ‚, ÒÔËÒÓÍ ÏÂÚÓ‰Ó‚, ÓÔÂ‡ˆËË.
-  Î‡ÒÒ		- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÍÎ‡ÒÒ ÒÛ˘ÌÓÒÚÂÈ.  Î‡ÒÒ ÒÓ‰ÂÊËÚ ÒÔËÒÓÍ Ó·˙ÂÍÚÓ‚, ÒÔËÒÍË Ò‚ˇÁÂÈ Ò ‰Û„ËÏË ÍÎ‡ÒÒ‡ÏË, ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÏÂÚÓ‰‡ÏË,
			 ËÏˇ Ë ‰Û„ËÂ ‰‡ÌÌ˚Â, ÓÔÂ‡ˆËË.
- Œ·˙ÂÍÚ	- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÒÛ˘ÌÓÒÚ¸. Œ·˙ÂÍÚ ÒÓ‰ÂÊËÚ ÒÔËÒÍË Ò‚ˇÁÂÈ Ò ‰Û„ËÏË Ó·˙ÂÍÚ‡ÏË, ‰‡ÌÌ˚Â, ÓÔÂ‡ˆËË.
- ÃÂÚÓ‰		- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÏÂÚÓ‰. ÃÂÚÓ‰ ‚˚ÔÓÎÌˇÂÚ ÌÂÍÓÚÓÛ˛ ÓÔÂ‡ˆË˛, ÔËÌËÏ‡ÂÚ Ë ‚ÓÁ‚‡˘‡ÂÚ ‡„ÛÏÂÌÚ˚. ÃÂÚÓ‰ ÏÓÊÂÚ ·˚Ú¸ ÒÓÔÓÒÚ‡‚ÎÂÌ Ó‰ÌÓÏÛ ËÎË 					ÌÂÒÍÓÎ¸ÍËÏ ÍÎ‡ÒÒ‡Ï, ÏÓÊÂÚ ‚˚Á˚‚‡Ú¸Òˇ ÍÎ‡ÒÒÓÏ ËÎË Ó·˙ÂÍÚÓÏ ÍÎ‡ÒÒ‡. 
			ÃÂÚÓ‰ ÒÓ‰ÂÊËÚ Ò‚ˇÁË Ò ‰Û„ËÏË ÏÂÚÓ‰‡ÏË, ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÍÎ‡ÒÒ‡ÏË, ÒÔËÒÓÍ  “¿, ‰‡ÌÌ˚Â, ÓÔÂ‡ˆËË.
- ¿„ÛÏÂÌÚ	- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ‡„ÛÏÂÌÚ ÏÂÚÓ‰‡. ¿„ÛÏÂÌÚ ËÏÂÂÚ ËÏˇ, ÚËÔ, ÁÌ‡˜ÂÌËÂ, ‰Û„ËÂ ‰‡ÌÌ˚Â.
-  “¿		- ÔÂ‰ÒÚ‡‚ÎˇÂÚ ÍÓÏÔÎÂÍÚ ÚËÔÓ‚ ‡„ÛÏÂÌÚÓ‚ ‰Îˇ ÏÂÚÓ‰‡. ›ÚÓ ‚‡Ë‡ÌÚ ËÒÔÓÎ¸ÁÓ‚‡ÌËˇ ÏÂÚÓ‰‡.
- Ò‚ˇÁ¸ ÍÎ‡ÒÒ/Ó·˙ÂÍÚ-ÍÎ‡ÒÒ/Ó·˙ÂÍÚ 	- Ò‚ˇÁ˚‚‡ÂÚ ‰‚‡ ÍÎ‡ÒÒ‡ ËÎË ‰‚‡ Ó·˙ÂÍÚ‡. œÓ Ó‰ÌÓÏÛ ˝ÍÁÂÏÔÎˇÛ Ò‚ˇÁË ‰Îˇ Í‡Ê‰ÓÈ ÒÚÓÓÌ˚. 
						—Ó‰ÂÊËÚ ÔÓÎˇ ‰Îˇ ı‡ÌÂÌËˇ ÚËÔ‡ Ò‚ˇÁÂÈ.
- Ò‚ˇÁ¸ ÍÎ‡ÒÒ-ÏÂÚÓ‰	- Ò‚ˇÁ˚‚‡ÂÚ ÏÂÚÓ‰ Ò ÍÎ‡ÒÒÓÏ Ë ÍÎ‡ÒÒ Ò ÏÂÚÓ‰ÓÏ.
- Ò‚ˇÁ¸ ÏÂÚÓ‰-ÏÂÚÓ‰	- Ò‚ˇÁ˚‚‡ÂÚ ÏÂÚÓ‰ Ò ‰Û„ËÏ ÏÂÚÓ‰ÓÏ.  œÓ Ó‰ÌÓÏÛ ˝ÍÁÂÏÔÎˇÛ Ò‚ˇÁË ‰Îˇ Í‡Ê‰ÓÈ ÒÚÓÓÌ˚.

ŒÔËÒ‡ÌËÂ:
 ÓÌÚÂÈÌÂ ÒÓ‰ÂÊËÚ ÒÔËÒÓÍ ÏÂÚÓ‰Ó‚. ¬ÒÂ ÏÂÚÓ‰˚ ı‡ÌˇÚÒˇ ‚ ˝ÚÓÏ ÒÔËÒÍÂ.
 Î‡ÒÒ ËÏÂÂÚ ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÏÂÚÓ‰‡ÏË. ¬ ‚ÂÒËË 1 ‚ÒÂ ÏÂÚÓ‰˚ ÊÂÒÚÍÓ Ò‚ˇÁ‡Ì˚ Ò ÍÎ‡ÒÒÓÏ, ı‡ÌˇÚÒˇ ‚ ÒÔËÒÍÂ ÏÂÚÓ‰Ó‚ ÍÎ‡ÒÒ‡, ‚˚Á˚‚‡˛ÚÒˇ ÚÓÎ¸ÍÓ ˜ÂÂÁ ÍÎ‡ÒÒ.
¬ ‚ÂÒËË 2.0 ÏÂÚÓ‰˚ ˇ‚Îˇ˛ÚÒˇ Ò‡ÏÓÒÚÓˇÚÂÎ¸ÌÓÈ ÒÛ˘ÌÓÒÚ¸˛, ÏÓ„ÛÚ ·˚Ú¸ Ó„‡ÌËÁÓ‚‡Ì˚ ‚ ÒÓ·ÒÚ‚ÂÌÌÛ˛ ÒÚÛÍÚÛÛ, ÏÓ„ÛÚ ‚˚Á˚‚‡Ú¸Òˇ ˜ÂÂÁ Ò‚ˇÁ‡ÌÌ˚È Ò ÌËÏË ÍÎ‡ÒÒ ËÎË ËÌ‰Ë‚Ë‰Û‡Î¸ÌÓ, ÔÓ ËÏÂÌË ËÎË ÌÓÏÂÛ. ÃÂÚÓ‰ Ú‡ÍÊÂ ÏÓÊÂÚ ·˚Ú¸ ‚˚·‡Ì Ë ‚˚Á‚‡Ì ÔË ÔÓÏÓ˘Ë ËÂ‡ıËË ÏÂÚÓ‰Ó‚,  ˝ÚÓÚ ‚‡Ë‡ÌÚ ÌÂ ËÁÛ˜ÂÌ, ÌÓ ÔÂ‰ÒÚ‡‚ÎˇÂÚÒˇ ÔÂÒÔÂÍÚË‚Ì˚Ï, ÔÓ˝ÚÓÏÛ ‚ ‡ıËÚÂÍÚÛÂ Ì‡ÏÂ˜ÂÌ‡ Â„Ó ÔÓ‰‰ÂÊÍ‡.

œÓÒÍÓÎ¸ÍÛ Ó‰ËÌ Ë ÚÓÚ ÊÂ ÏÂÚÓ‰ ÏÓÊÂÚ ‚˚Á˚‚‡Ú¸Òˇ ‡ÁÌ˚ÏË ÍÎ‡ÒÒ‡ÏË, Ò ‡ÁÌ˚ÏË ÚËÔ‡ÏË ‰‡ÌÌ˚ı, ‚‚Â‰ÂÌ˚  “¿.  “¿ ı‡ÌËÚ ÚËÔ˚, ÁÌ‡˜ÂÌËˇ, ÏÂÚ‡‰‡ÌÌ˚Â Ó ‚˚ÁÓ‚Â ÏÂÚÓ‰‡, ˝ÚÓ Ó·ÂÒÔÂ˜Ë‚‡ÂÚ ÔÓ‚ÂÍÛ ÍÓÂÍÚÌÓÒÚË ‚˚ÁÓ‚‡ ÏÂÚÓ‰‡.   “¿ ÙËÍÒËÛÂÚ ËÒÔÓÎ¸ÁÓ‚‡ÌËÂ ÏÂÚÓ‰‡ ‰Îˇ ‚˚Á˚‚‡˛˘Â„Ó ÍÎ‡ÒÒ‡. ¬ ÏÂÚÓ‰Â ÂÒÚ¸ ÒÔËÒÓÍ ÍÚ‡, ‚ ÍÓÚÓÓÏ ÒÓı‡Ìˇ˛ÚÒˇ ‚ÒÂ ‚˚ÁÓ‚˚ ÏÂÚÓ‰‡ ‚ÒÂÏË ÍÎ‡ÒÒ‡ÏË. œÂ‰ÔÓÎ‡„‡ÂÚÒˇ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ˝ÚÓÚ ÒÔËÒÓÍ ‰Îˇ ÒÚ‡ÚËÒÚËÍË Ë ÓÔÚËÏËÁ‡ˆËË ‚˚·Ó‡ ‚ ËÂ‡ıËË ÏÂÚÓ‰Ó‚. œÎ‡ÌËÛÂÚÒˇ, ˜ÚÓ ÏÂÚ‡‰‡ÌÌ˚Â  “¿ ÔÓÁ‚ÓÎˇÚ ÓÔÂ‰ÂÎˇÚ¸ ‰ÓÔÛÒÚËÏ˚È ‰Ë‡Ô‡ÁÓÌ ÁÌ‡˜ÂÌËÈ Ë ÚËÔÓ‚ ‡„ÛÏÂÌÚÓ‚, ÓˆÂÌË‚‡Ú¸ ÔË„Ó‰ÌÓÒÚ¸ ÏÂÚÓ‰‡ ‰Îˇ ÍÓÌÍÂÚÌÓ„Ó ËÒÔÓÎ¸ÁÓ‚‡ÌËˇ Ë Ú.‰.  “¿ ÒÓ‰ÂÊËÚ Ë‰ÂÌÚËÙËÍ‡ÚÓ ÍÎ‡ÒÒ‡/Ó·˙ÂÍÚ‡, ÍÓÚÓ˚È ‚˚Á˚‚‡ÂÚ ÏÂÚÓ‰. ƒÎˇ ÛÏÂÌ¸¯ÂÌËˇ ‡ÁÏÂ‡ ÒÔËÒÍ‡  “¿ ÔÂËÓ‰Ë˜ÂÒÍË, ‚Ó ‚ÂÏˇ Ó˜ÂÂ‰ÌÓ„Ó ‚˚ÁÓ‚‡, ÔÓ‚Ó‰ËÚÒˇ ÓÔÚËÏËÁ‡ˆËˇ - Û‰‡ÎÂÌËÂ ‰Û·ÎËÛ˛˘ËıÒˇ Á‡ÔËÒÂÈ, ‚˚‰ÂÎÂÌËÂ ÚÂÌ‰Ó‚, Ë Ú.‰.

ÃÂÚÓ‰ ÏÓÊÂÚ ·˚Ú¸ ‡·ÒÚ‡ÍÚÌ˚Ï, ÌÂ ÒÓ‰ÂÊ‡Ú¸ ÍÓ‰‡, ÚÓÎ¸ÍÓ Ó·ÂÒÔÂ˜Ë‚‡Ú¸ ‚˚·Ó ÔÓ‰ıÓ‰ˇ˘Â„Ó ÏÂÚÓ‰‡ ‚ ËÂ‡ıËË ‡·ÒÚ‡ÍˆËÈ. “‡ÍËÏ Ó·‡ÁÓÏ, ‚ÏÂÒÚÂ Ò ËÂ‡ıËÂÈ ‰‡ÌÌ˚ı, ˝ÚÓ Ó·ÂÒÔÂ˜Ë‚‡ÂÚ ‚˚ÔÓÎÌÂÌËÂ ÓÔÂ‡ˆËË Ì‡ ‚ÒÂı ÛÓ‚Ìˇı ‡·ÒÚ‡ÍˆËË. ›ÚÓ ÛÔÓ˘‡ÂÚ ÍÓÌÚÓÎ¸ Ë ÓÚÎ‡‰ÍÛ ‡·ÒÚ‡ÍÚÌ˚ı ÏÂÚÓ‰Ó‚.

—‚ˇÁ¸ ÍÎ‡ÒÒ-ÏÂÚÓ‰ Ò‚ˇÁ˚‚‡ÂÚ ÍÎ‡ÒÒ˚ Ë ÏÂÚÓ‰˚. ¬ ˝ÍÁÂÏÔÎˇÂ ÏÂÚÓ‰‡ ÒÛ˘ÂÒÚ‚ÛÂÚ ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÍÎ‡ÒÒ‡ÏË. ¬ ˝ÍÁÂÏÔÎˇÂ ÍÎ‡ÒÒ‡ - ÒÔËÒÓÍ Ò‚ˇÁÂÈ Ò ÏÂÚÓ‰‡ÏË.
œÓÒÍÓÎ¸ÍÛ ÏÂÚÓ‰˚ ËÒÔÓÎ¸ÁÛ˛ÚÒˇ ÍÎ‡ÒÒ‡ÏË ˜ÂÂÁ  “¿, ÚÓ Ò‚ˇÁ¸ ÛÍ‡Á˚‚‡ÂÚ Ì‡ ÍÎ‡ÒÒ Ò Ó‰ÌÓÈ ÒÚÓÓÌ˚, Ë Ì‡  “¿ ÏÂÚÓ‰‡ Ò ‰Û„ÓÈ. “‡ÍËÏ Ó·‡ÁÓÏ, Ó‰ËÌ ÍÎ‡ÒÒ ÏÓÊÂÚ ·˚Ú¸ Ò‚ˇÁ‡Ì Ò ÌÂÒÍÓÎ¸ÍËÏË ÏÂÚÓ‰‡ÏË, Ë ‰‡ÊÂ Ò ÌÂÒÍÓÎ¸ÍËÏ ÍÚ‡ Ó‰ÌÓ„Ó ÏÂÚÓ‰‡, ‡ÁÎË˜‡˛˘ËÏËÒˇ ÚËÔ‡ÏË ‡„ÛÏÂÌÚÓ‚ (Ì‡ÔËÏÂ, ÂÒÎË ÏÂÚÓ‰ ‡·ÒÚ‡ÍÚÌ˚È).
ÃÂÚÓ‰ ÏÓÊÂÚ ·˚Ú¸ Ò‚ˇÁ‡Ì Ò ÌÂÒÍÓÎ¸ÍËÏË ÍÎ‡ÒÒ‡ÏË, ËÎË ÌË Ò Ó‰ÌËÏ - ‚ ˝ÚÓÏ ÒÎÛ˜‡Â ÓÌ ÏÓÊÂÚ ËÒÔÓÎ¸ÁÓ‚‡Ú¸Òˇ ˜ÂÂÁ ËÂ‡ıË˛ ÍÎ‡ÒÒÓ‚.  «‡ÔÂ˘‡ÂÚÒˇ ı‡ÌËÚ¸ ‚ ÒÔËÒÍÂ Ò‚ˇÁÂÈ ‰Û·ÎËÍ‡Ú˚.

ÃÂÚÓ‰ ÒÓ‰ÂÊËÚ ÓÒÌÓ‚ÌÓÈ  “¿ -  “¿0. ›ÚÓÚ  “‡ ÒÓÁ‰‡ÂÚÒˇ ÔË ÒÓÁ‰‡ÌËË ÏÂÚÓ‰‡, Ë ÓÔÂ‰ÂÎˇÂÚ Ì‡·Ó Ë ÚËÔ˚ ‡„ÛÏÂÌÚÓ‚, ÍÓÚÓ˚Â ÏÂÚÓ‰ ËÒÔÓÎ¸ÁÛÂÚ.
œÂ‰ÔÓÎ‡„‡ÂÚÒˇ, ˜ÚÓ  “¿ ·Û‰ÂÚ ËÒÔÓÎ¸ÁÓ‚‡Ú¸Òˇ ÒÓ‚ÏÂÒÚÌÓ Ò ËÂ‡ıËÂÈ ‡·ÒÚ‡ÍˆËÈ ÏÂÚÓ‰Ó‚, ˜ÚÓ ÔÓÁ‚ÓÎˇÂÚ ÒÓÁ‰‡‚‡Ú¸ Ë ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ‡·ÒÚ‡ÍÚÌ˚Â ÏÂÚÓ‰˚ Ú‡Í ÊÂ, Í‡Í Ë ÍÓÌÍÂÚÌ˚Â. “Ó ÂÒÚ¸, ÂÒÎË  “‡ ÓÔËÒ˚‚‡ÂÚ ‡·ÒÚ‡ÍÚÌ˚Â ÚËÔ˚ ‰‡ÌÌ˚ı, ÚÓ ÏÂÚÓ‰ ÏÓÊÌÓ ‚˚Á‚‡Ú¸ ‰Îˇ ÍÓÌÍÂÚÌ˚ı ÚËÔÓ‚ ‰‡ÌÌ˚ı. œË ˝ÚÓÏ ‡‚ÚÓÏ‡ÚË˜ÂÒÍË ‰ÓÎÊÂÌ ·˚Ú¸ Ì‡È‰ÂÌ Ë ‚˚Á‚‡Ì ÔÓ‰ıÓ‰ˇ˘ËÈ ÏÂÚÓ‰, ËÌÙÓÏ‡ˆËˇ Ó· ˝ÚÓÏ ‚˚·ÓÂ/‚˚ÁÓ‚Â Á‡ÙËÍÒËÓ‚‡Ì‡ ‚  “¿ ‡·ÒÚ‡ÍÚÌÓ„Ó ÏÂÚÓ‰‡, ‰‡ÌÌ˚Â ‚ÓÁ‚‡˘‡˛ÚÒˇ Í‡Í ·Û‰ÚÓ ÓÌË ËÒÔÓÎÌˇÎËÒ¸ ‡·ÒÚ‡ÍÚÌ˚Ï ÏÂÚÓ‰ÓÏ.
ÃÂÚÓ‰ ÒÓ‰ÂÊËÚ ÔÓÎÂ ‰Îˇ ÚÂÍÒÚ‡ ÒÍËÔÚ‡. ≈ÒÎË ÔÓÎÂ ÔÛÚË Í ÍÓ‰Û ÒÓ‰ÂÊËÚ ÔÛÚ¸, ÚÓ ÏÂÚÓ‰ ‚˚Á˚‚‡ÂÚ CLR-ÍÓ‰. ≈ÒÎË ÌÂÚ, ÔÓ‚ÂˇÂÚÒˇ ÔÓÎÂ ÚÂÍÒÚ‡ ÒÍËÔÚ‡. ≈ÒÎË ÓÌÓ ÌÂ ÔÛÒÚÓÂ, ÚÂÍÒÚ ÓÚÔ‡‚ÎˇÂÚÒˇ ËÌÚÂÔÂÚ‡ÚÓÛ, ÂÒÎË ÔÛÒÚÓÂ - ˝ÚÓ ‡·ÒÚ‡ÍÚÌ˚È ÏÂÚÓ‰ ËÎË Ó¯Ë·Í‡. ¿·ÒÚ‡ÍÚÌ˚È ÏÂÚÓ‰ ÌÂ ÒÓ‰ÂÊËÚ ÍÓ‰‡, ËÒÔÓÎ¸ÁÛÂÚÒˇ ‰Îˇ Ó„‡ÌËÁ‡ˆËË ‚˚ÁÓ‚‡ ÍÓÌÍÂÚÌÓ„Ó ÏÂÚÓ‰‡. »ÌÙÓÏ‡ˆËˇ ‰Îˇ ÔÓËÒÍ‡ ÒÓ‰ÂÊËÚÒˇ ‚ ÒÔËÒÍÂ ÍÚ‡ ÏÂÚÓ‰‡.
  
ÃÓÊÌÓ ÔÓÔÓ·Ó‚‡Ú¸ ‚‚ÂÒÚË ‚  “¿ ÔÓÍ‡Á‡ÚÂÎ¸ ˝ÙÙÂÍÚË‚ÌÓÒÚË ÏÂÚÓ‰‡, ÍÓÚÓ˚È Á‡ÔËÒ˚‚‡ÂÚÒˇ ÔÓ ÂÁÛÎ¸Ú‡Ú‡Ï ÏÂÚÓ‰‡. ÃÓÊÌÓ ·Û‰ÂÚ ‚˚·‡Ú¸ ÔÓ‰ıÓ‰ˇ˘ËÈ ÏÂÚÓ‰ Ì‡ ÓÒÌÓ‚Â ˝ÙÙÂÍÚË‚ÌÓÒÚË, ÓÔÂ‰ÂÎËÚ¸ „‡ÌËˆ˚ ˝ÙÙÂÍÚË‚ÌÓÈ ‡·ÓÚ˚ ÏÂÚÓ‰‡, Ë ÔÓ˜ËÂ ËÌÚÂÂÒÌ˚Â ‚ÓÁÏÓÊÌÓÒÚË. ÕÓ ˝ÚÓ ÔÓÚÓÏ.

—‚ˇÁ¸ ÏÂÚÓ‰-ÏÂÚÓ‰ Ò‚ˇÁ˚‚‡ÂÚ ÏÂÚÓ‰˚ Ú‡ÍËÏ ÊÂ Ó·‡ÁÓÏ, Í‡Í Ë ‡Ì‡ÎÓ„Ë˜Ì˚Â Ò‚ˇÁË ÍÎ‡ÒÒ-ÍÎ‡ÒÒ. ÃÓÊÌÓ ‚˚‰ÂÎËÚ¸ ‡·ÒÚ‡ÍˆË, ‡„Â„‡ˆË˛ ÏÂÚÓ‰Ó‚, Ë ÒÓÓÚ‚ÂÚÒÚ‚ÂÌÌÓ Â‡ÎËÁÓ‚‡Ú¸ ÒÚÛÍÚÛÛ. ƒÎˇ ·ÓÎ¸¯ÂÈ „Ë·ÍÓÒÚË, ÏÂÚÓ‰˚ Ò‚ˇÁ˚‚‡˛ÚÒˇ ˜ÂÂÁ ÍÓÌˆÂÔˆË˛  “¿, Ó·˚˜ÌÓ ˜ÂÂÁ ÍÚ‡0.
  

2.7 —‚ˇÁË  À‡ÒÒ-ÍÎ‡ÒÒ, Ó·˙ÂÍÚ-Ó·˙ÂÍÚ

—‚ˇÁË ÔÂ‰ÒÚ‡‚Îˇ˛Ú ÓÚÌÓ¯ÂÌËˇ Ó·˙ÂÍÚÓ‚. ƒ‚‡ Ó·˙ÂÍÚ‡ Ò‚ˇÁ‡Ì˚ ÓÚÌÓ¯ÂÌËˇÏË ‚ÂıÌËÈ-ÌËÊÌËÈ, „Î‡‚Ì˚È-ÔÓ‰˜ËÌÂÌÌ˚È. —‚ˇÁË ‰‚ÛÒÚÓÓÌÌËÂ, ÚÓ ÂÒÚ¸, Í‡Ê‰˚È ËÁ ‰‚Ûı Ó·˙ÂÍÚÓ‚ ËÏÂÂÚ Ò‚Ó˛ ÍÓÔË˛ Ò‚ˇÁË. —ÓÁ‰‡ÌËÂ Ò‚ˇÁË ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ‚ÓÁÏÓÊÌÓ ÚÓÎ¸ÍÓ ÔË Ì‡ÎË˜ËË Ò‚ˇÁË ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË. 
—‚ˇÁË, Í‡Í Ë Ó·˙ÂÍÚ˚ Ë ÍÎ‡ÒÒ˚, Ú‡ÍÊÂ  ËÏÂ˛Ú ÒÓÒÚÓˇÌËˇ. ≈ÒÎË  Ò‚ˇÁ¸ ÏÂÊ‰Û ‰‚ÛÏˇ ÍÎ‡ÒÒ‡ÏË ÔÓÏÂ˜ÂÌ‡ ÒÓÒÚÓˇÌËÂÏ ´Á‡ÔÂ˘ÂÌÓª, ÚÓ Ò‚ˇÁ¸ ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ˝ÚËı ÍÎ‡ÒÒÓ‚ ÌÂ ÏÓÊÂÚ ËÏÂÚ¸ ËÌÓÂ ÒÓÒÚÓˇÌËÂ.  
—‚ˇÁË ÌÂ ÏÓ„ÛÚ ÒÓÂ‰ËÌˇÚ¸ ‰‚‡ Ó·˙ÂÍÚ‡ Ó‰ÌÓ„Ó Ë ÚÓ„Ó ÊÂ ÍÎ‡ÒÒ‡.
—‚ˇÁË ÏÓ„ÛÚ ÒÒ˚Î‡Ú¸Òˇ Ì‡ ÛÊÂ Û‰‡ÎÂÌÌ˚È Ó·˙ÂÍÚ, Ì‡ ÔÂ‰ÓÔÂ‰ÂÎÂÌÌ˚È ËÎË Ì‡ ÌÂÒÛ˘ÂÒÚ‚Û˛˘ËÈ Ó·˙ÂÍÚ.
 Î‡ÒÒ, Í‡Í Ë Ó·˙ÂÍÚ, ËÏÂÂÚ ÚË ÓÒË Ò‚ˇÁÂÈ: X (aggregation), Y (abstraction),  Z(reserved).
—ÓÓÚ‚ÂÚÒÚ‚ÂÌÌÓ, ¯ÂÒÚ¸ ÒÔËÒÍÓ‚ Ò‚ˇÁÂÈ: X+, X-, Y+, Y-, Z+, Z-.
 Î‡ÒÒ˚ ÏÓ„ÛÚ ËÒÔÓÎ¸ÁÓ‚‡Ú¸ ‚ÒÂ ÓÒË ‰Îˇ Ó·‡ÁÓ‚‡ÌËˇ ÒÚÛÍÚÛ˚ ÍÎ‡ÒÒÓ‚.
Œ·˙ÂÍÚ˚ ËÒÔÓÎ¸ÁÛ˛Ú ’-Ò‚ˇÁË ‰Îˇ ÓÚÌÓ¯ÂÌËÈ ‚ÍÎ˛˜ÂÌËˇ ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË.
 Y- Ò‚ˇÁË ËÒÔÓÎ¸ÁÛ˛ÚÒˇ ‰Îˇ ÓÚÌÓ¯ÂÌËÈ ‡·ÒÚ‡ÍˆËË. ≈ÒÎË Û Ì‡‰ÍÎ‡ÒÒ‡ ÂÒÚ¸ Ó·˙ÂÍÚ, Ë ÌÛÊÌÓ ÒÓÁ‰‡Ú¸ Ò‚ˇÁ¸ Ò ÌËÏ (ÚÓ ÂÒÚ¸, ÂÒÎË ÒÛ˘ÂÒÚ‚ÛÂÚ Ó·˙ÂÍÚ Ì‡‰ÍÎ‡ÒÒ‡ Í‡Í ‡·ÒÚ‡ÍˆËˇ Ó·˙ÂÍÚÓ‚ ÚÂÍÛ˘Â„Ó ÍÎ‡ÒÒ‡. ÕÂÚËÔË˜Ì‡ˇ ‚Â˘¸.), ÚÓ ÓÌË Ò‚ˇÁ˚‚‡˛ÚÒˇ Ú‡Í ÊÂ, Í‡Í Ë ‰Îˇ ’ ÓÒË.≈ÒÎË Ò‚ˇÁË ÌÂÚ, ÚÓ Í‡Í Ë ‚ ’ ÓÒË, ÚÂÍÛ˘ËÈ Ó·˙ÂÍÚ Ò‚ˇÁ˚‚‡ÂÚÒˇ Ò Ó·˙ÂÍÚÓÏ Ì‡‰ÍÎ‡ÒÒ::Undefined.
Z ÓÒ¸ Â‡ÎËÁÛÂÚÒˇ ÔÓ ÚÂÏ ÊÂ Ô‡‚ËÎ‡Ï, ÌÓ ÔÓÍ‡ ÌÂ ËÒÔÓÎ¸ÁÛÂÚÒˇ. œÂ‰ÔÓÎ‡„‡ÂÚÒˇ ÔËÏÂÌËÚ¸ ÂÂ ‰Îˇ ÔË‚ˇÁÍË Ò‚ÓÈÒÚ‚ Ó·˙ÂÍÚ‡/ÍÎ‡ÒÒ‡. œÓÍ‡ ÌÂˇÒÌÓ Í‡Í ˝ÚÓ ‰ÓÎÊÌÓ ‚˚„Îˇ‰ÂÚ¸.  
ÃÂÊ‰Û ‰‚ÛÏˇ Ó·˙ÂÍÚ‡ÏË ËÎË ÍÎ‡ÒÒ‡ÏË ÏÓÊÂÚ ÒÛ˘ÂÒÚ‚Ó‚‡Ú¸ ÚÓÎ¸ÍÓ Ó‰Ì‡ ‰ÂÈÒÚ‚Û˛˘‡ˇ Ò‚ˇÁ¸. ƒÓÔÛÒÍ‡ÂÚÒˇ Ì‡ÎË˜ËÂ ÌÂÒÍÓÎ¸ÍËı ÌÂ‰ÂÈÒÚ‚ËÚÂÎ¸Ì˚ı (Û‰‡ÎÂÌÌ˚ı) Ò‚ˇÁÂÈ ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË.

—‚ˇÁË ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ‡ÁÎË˜Ì˚ı ÍÎ‡ÒÒÓ‚ ÔË ÒÓÁ‰‡ÌËË ‰Û·ÎËÛ˛ÚÒˇ ‚ Ò‚ˇÁˇı ÍÎ‡ÒÒÓ‚. Õ‡ÔËÏÂ, ÂÒÎË Ó·˙ÂÍÚ ÍÎ‡ÒÒ‡ ¿ Ò‚ˇÁ˚‚‡ÂÚÒˇ Ò Ó·˙ÂÍÚÓÏ ÍÎ‡ÒÒ‡ ¬, ÚÓ ‰ÓÎÊÌ‡ ·˚Ú¸ ÒÌ‡˜‡Î‡ ÒÓÁ‰‡Ì‡ Ò‚ˇÁ¸ ÏÂÊ‰Û ÍÎ‡ÒÒÓÏ ¿ Ë ÍÎ‡ÒÒÓÏ ¬. ŒÌ‡ ÛÍ‡Á˚‚‡ÂÚ Ì‡ Ì‡ÎË˜ËÂ Ë ı‡‡ÍÚÂ Ò‚ˇÁË ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË ¿ Ë ¬, Ë ÔË ÒÓÁ‰‡ÌËË ÌÓ‚Ó„Ó Ó·˙ÂÍÚ‡ ÍÎ‡ÒÒ‡ ¿ Û ÌÂ„Ó ÚÓÊÂ ÒÓÁ‰‡ÂÚÒˇ Ò‚ˇÁ¸ Ò Ó·˙ÂÍÚÓÏ ÍÎ‡ÒÒ‡ ¬, ÌÓ ÔÓÍ‡ ‡·ÒÚ‡ÍÚÌ‡ˇ -  ÍÓÌÂ˜Ì˚Ï Ó·˙ÂÍÚÓÏ ˇ‚ÎˇÂÚÒˇ ÒËÒÚÂÏÌ˚È Ó·˙ÂÍÚ ¬.Undefined.   ›ÚÓ ÏÂı‡ÌËÁÏ ‰Îˇ ‡‚ÚÓÏ‡ÚË˜ÂÒÍÓ„Ó ÔÓ‰‰ÂÊ‡ÌËˇ ÒÚÛÍÚÛ˚ ‰‡ÌÌ˚ı, ÍÓ„‰‡ ´‚ËÒˇ˘ËÂª Ò‚ˇÁË ÔË‚ÎÂÍ‡˛Ú ‚ÌËÏ‡ÌËÂ Ë ‰ÓÎÊÌ˚ ·˚Ú¸ ‡ÁÂ¯ÂÌ˚ (ÛÍ‡Á˚‚‡Ú¸ Ì‡ ˜ÚÓ-ÚÓ, ·˚Ú¸ Í‡Í-ÚÓ ÓÔÂ‰ÂÎÂÌÌ˚ÏË). ≈ÒÎË ‚ ÂÁÛÎ¸Ú‡ÚÂ ‡ÁÂ¯ÂÌËˇ ÛÒÚ‡ÌÓ‚ÎÂÌÓ, ˜ÚÓ ÍÓÌÂ˜Ì˚È Ó·˙ÂÍÚ Ò‚ˇÁË ÌÂ ÏÓÊÂÚ ÒÛ˘ÂÒÚ‚Ó‚‡Ú¸, ÚÓ ÍÓÌÂ˜Ì˚Ï Ó·˙ÂÍÚÓÏ ÒÚ‡ÌÓ‚ËÚÒˇ B.Nothing. ≈ÒÎË ‚ ÂÁÛÎ¸Ú‡ÚÂ ‡ÁÂ¯ÂÌËˇ  ÛÒÚ‡ÌÓ‚ÎÂÌÓ, ˜ÚÓ ÍÓÌÂ˜Ì˚È Ó·˙ÂÍÚ Ò‚ˇÁË ÌÂËÁ‚ÂÒÚÂÌ, Ë ÌÂ ÏÓÊÂÚ ·˚Ú¸ ÓÔÂ‰ÂÎÂÌ ÒÂÈ˜‡Ò, ÚÓ ÍÓÌÂ˜Ì˚Ï Ó·˙ÂÍÚÓÏ ÒÚ‡ÌÓ‚ËÚÒˇ B.Unknown. 
—‚ˇÁ¸, ÒÓÁ‰‡‚‡ÂÏ‡ˇ ÏÂÊ‰Û ÍÎ‡ÒÒ‡ÏË, ‡ÒÔÓÒÚ‡ÌˇÂÚÒˇ Ì‡ ‚ÒÂ Â„Ó ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÂ Ó·˙ÂÍÚ˚.

2.7.1 “ËÔ˚ Ò‚ˇÁÂÈ:

- «‡ÔÂ˘ÂÌÓ.  —ÂÏ‡ÌÚË˜ÂÒÍË ˝ÚÓ ÓÁÌ‡˜‡ÂÚ, ˜ÚÓ ÏÂÊ‰Û ‰‚ÛÏˇ ÒÛ˘ÌÓÒÚˇÏË ÌÂ ÏÓÊÂÚ ·˚Ú¸ Ò‚ˇÁË.  ≈ÒÎË  Ò‚ˇÁ¸ ÏÂÊ‰Û ‰‚ÛÏˇ ÍÎ‡ÒÒ‡ÏË ÔÓÏÂ˜ÂÌ‡ ÒÓÒÚÓˇÌËÂÏ ´Á‡ÔÂ˘ÂÌÓª, ÚÓ Ò‚ˇÁ¸ ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ˝ÚËı ÍÎ‡ÒÒÓ‚ ÌÂ ÏÓÊÂÚ ËÏÂÚ¸ ÒÓÒÚÓˇÌËÂ ÕÓÏ‡Î¸ÌÓ. ÕÓ ÏÓÊÂÚ ËÏÂÚ¸ ÒÓÒÚÓˇÌËÂ ÕÂÓÔÂ‰ÂÎÂÌÓ. ≈ÒÎË ÊÂ ‚ ÍÎ‡ÒÒ‡ı Ò‚ˇÁ¸ ÌÂ «‡ÔÂ˘ÂÌÓ, ÚÓ Ò‚ˇÁ¸ Ó·˙ÂÍÚÓ‚ ÏÓÊÂÚ ËÏÂÚ¸ Î˛·ÓÂ ÒÓÒÚÓˇÌËÂ, ‚ ÚÓÏ ˜ËÒÎÂ Ë «‡ÔÂ˘ÂÌÓ.  
- ÕÓÏ‡Î¸ÌÓ.  ÃÂÊ‰Û ‰‚ÛÏˇ ÒÛ˘ÌÓÒÚˇÏË ÒÛ˘ÂÒÚ‚ÛÂÚ Ó·˚˜Ì‡ˇ Ò‚ˇÁ¸.
- ÕÂÓÔÂ‰ÂÎÂÌÓ. »ÒÔÓÎ¸ÁÛÂÚÒˇ ÓÔÚËÏËÁ‡ÚÓÓÏ ÔË Ó·ÒÎÛÊË‚‡ÌËË ÒÚÛÍÚÛ˚. 
- ÕÂ ÒÛ˘ÂÒÚ‚ÛÂÚ. ›ÚÓ ÁÌ‡˜ÂÌËÂ ËÒÔÓÎ¸ÁÛÂÚÒˇ ÚÓÎ¸ÍÓ Í‡Í ÍÓ‰ ‚ÓÁ‚‡Ú‡ ‚ ÙÛÌÍˆËˇı ÔÓËÒÍ‡ Ò‚ˇÁÂÈ.

2.7.2  ‡ÚÍÓÂ ÓÔËÒ‡ÌËÂ Ô‡‚ËÎ ‰Îˇ Ò‚ˇÁÂÈ:

Œ·ÓÁÌ‡˜ÂÌËˇ: 
 	¿ ñ ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÈ ÍÎ‡ÒÒ.
	Ã ñ ÍÎ‡ÒÒ ÃË. Õ‡˜‡Î¸Ì‡ˇ ÚÓ˜Í‡ ËÂ‡ıËË ÍÎ‡ÒÒÓ‚ ÔÓ ‚ÒÂÏ ÓÒˇÏ.
	” ñ ÒËÒÚÂÏÌ˚È ÍÎ‡ÒÒ Undefined
	Û- ÒËÒÚÂÏÌ˚È Ó·˙ÂÍÚ Undefined  ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍÓ„Ó ÍÎ‡ÒÒ‡
 	‡1 ñ Ó‰ËÌ ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍËÈ Ó·˙ÂÍÚ ÔÓÎ¸ÁÓ‚‡ÚÂÎ¸ÒÍÓ„Ó ÍÎ‡ÒÒ‡
 	‡* - ÌÂÒÍÓÎ¸ÍÓ ÔÓÎ¸ÁÓ‚. Ó·˙ÂÍÚÓ‚ ÔÓÎ¸ÁÓ‚. ÍÎ‡ÒÒ‡
	+ - ÒÓÁ‰‡ÌËÂ Ò‚ˇÁË ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ËÎË ÍÎ‡ÒÒ‡ÏË
	- - Û‰‡ÎÂÌËÂ Ò‚ˇÁË ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË ËÎË ÍÎ‡ÒÒ‡ÏË

1)≈ÒÎË ¿ + ¬   ÚÓ ‡* + ‚Û, ‡Û + ‚*; ≈ÒÎË ÍÎ‡ÒÒ˚ ÒÓÂ‰ËÌˇ˛ÚÒˇ Ò‚ˇÁ¸˛, ÚÓ Ó·˙ÂÍÚ˚ Ú‡ÍÊÂ ÒÓÂ‰ËÌˇ˛ÚÒˇ Ò‚ˇÁ¸˛ ñ Ò Ó·˙ÂÍÚ‡ÏË Undefined ˆÂÎÂ‚Ó„Ó ÍÎ‡ÒÒ‡.
2)≈ÒÎË ‡1 + ‚1 ÚÓ ¿ + ¬; ≈ÒÎË Ó·˙ÂÍÚ˚ ÒÓÂ‰ËÌˇ˛ÚÒˇ Ò‚ˇÁ¸˛, ÚÓ ÍÎ‡ÒÒ˚ Ú‡ÍÊÂ ÒÓÂ‰ËÌˇ˛ÚÒˇ Ò‚ˇÁ¸˛. (–Â‡ÎËÁ‡ˆËˇ ñ ÒÌ‡˜‡Î‡ Ò‚ˇÁ‡Ú¸ ÍÎ‡ÒÒ˚, ÔÓÚÓÏ ÌÛÊÌ˚Â Ó·˙ÂÍÚ˚).
3)≈ÒÎË ‡1 + ‚* ÚÓ ¿ + ¬; (–Â‡ÎËÁ‡ˆËˇ - ÒÌ‡˜‡Î‡ Ò‚ˇÁ‡Ú¸ ÍÎ‡ÒÒ˚, ÔÓÚÓÏ ÌÛÊÌ˚Â Ó·˙ÂÍÚ˚).
4)≈ÒÎË Ò‚ˇÁ¸ ¿¬ ËÏÂÂÚ ÒÓÒÚÓˇÌËÂ Á‡ÔÂ˘ÂÌÓ, ÚÓ ‚ÒÂ Ò‚ˇÁË ‡‚ ‰ÓÎÊÌ˚ ËÏÂÚ¸ ÒÓÒÚÓˇÌËÂ Á‡ÔÂ˘ÂÌÓ.
5)—‚ˇÁË ÏÂÊ‰Û Ó·˙ÂÍÚ‡ÏË Ó‰ÌÓ„Ó ÍÎ‡ÒÒ‡ ÌÂÎ¸Áˇ ÒÓÁ‰‡‚‡Ú¸.
6)ÃÂÊ‰Û 2 Ó·˙ÂÍÚ‡ÏË ÏÓÊÂÚ ÒÛ˘ÂÒÚ‚Ó‚‡Ú¸ ÚÓÎ¸ÍÓ Ó‰Ì‡ ‰ÂÈÒÚ‚Û˛˘‡ˇ Ò‚ˇÁ¸.
7)≈ÒÎË ¿ ÌÂ ËÏÂÂÚ ÌË Ó‰ÌÓÈ Ò‚ˇÁË ‚ ÓÒˇı X+, Y+ ËÎË Z+, ÓÌ ‡‚ÚÓÏ‡ÚË˜ÂÒÍË ‰ÓÎÊÂÌ ·˚Ú¸ Ò‚ˇÁ‡Ì Ò ÍÎ‡ÒÒÓÏ ÃË. ≈ÒÎË ÊÂ ¿ ËÏÂÂÚ Ò‚ˇÁ¸ ‚ ˝ÚËı ÓÒˇı (ıÓÚˇ ·˚ Ó‰ÌÛ) ÌÂ Ò ÍÎ‡ÒÒÓÏ ÃË, ÓÌ ‰ÓÎÊÂÌ ·˚Ú¸ ÓÚÒÓÂ‰ËÌÂÌ ÓÚ ÍÎ‡ÒÒ‡ ÃË. 
8) ≈ÒÎË ¿ ñ ¬, ÚÓ ‚ÒÂ ‡‚ Ò‚ˇÁË Û‰‡ÎËÚ¸.
9) ≈ÒÎË ‡1 ñ ‚1, ÚÓ ‡1 + ‚Û, ‡Û + ‚1;  Ó·˙ÂÍÚÓÏ ˆÂÎÂ‚Ó„Ó ÍÎ‡ÒÒ‡ Ò‰ÂÎ‡Ú¸  Undefined


2.8 —‚ˇÁË ÍÎ‡ÒÒ-ÏÂÚÓ‰

—‚ˇÁ˚‚‡˛Ú ÍÎ‡ÒÒ˚ Ë ÏÂÚÓ‰˚. —‚ˇÁ¸ ÒÓÒÚÓËÚ ËÁ Ë‰ÂÌÚËÙËÍ‡ÚÓ‡ Ó·˙ÂÍÚ‡/ÍÎ‡ÒÒ‡ Ë Ë‰ÂÌÚËÙËÍ‡ÚÓ‡ ÏÂÚÓ‰‡/ÍÚ‡.
 Î‡ÒÒ ÏÓÊÂÚ ·˚Ú¸ Ò‚ˇÁ‡Ì Ò ÌÂÒÍÓÎ¸ÍÏË ÏÂÚÓ‰‡ÏË, ÏÂÚÓ‰ ÏÓÊÂÚ ·˚Ú¸ Ò‚ˇÁ‡Ì Ò ÌÂÒÍÓÎ¸ÍËÏË ÍÎ‡ÒÒ‡ÏË.
œÓÁ‚ÓÎˇ˛Ú ‚˚Á‚‡Ú¸ Ò‚ˇÁ‡ÌÌ˚È Ò ÍÎ‡ÒÓÏ ÏÂÚÓ‰.


2.9 ŒÔÚËÏËÁ‡ÚÓ

›ÚÓ ÒÎÛÊÂ·Ì‡ˇ ÔÓˆÂ‰Û‡, ‚˚ÔÓÎÌˇ˛˘‡ˇ ÔÓ‚ÂÍÛ Ë ÓÔÚËÏËÁ‡ˆË˛ ÒÚÛÍÚÛ˚ ·‡Á˚.
”‰‡ÎÂÌËÂ ÌÂÌÛÊÌ˚ı ÒÚÛÍÚÛ, ‡Ò¯ËÂÌËÂ ÛÁÍËı ÏÂÒÚ, ‡Á‚ËÚËÂ ÒËÒÚÂÏ˚.




(—) 2011 —ÂÎˇÍÓ‚ œ‡‚ÂÎ ÃËı‡ÈÎÓ‚Ë˜
