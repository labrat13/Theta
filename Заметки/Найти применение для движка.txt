Надо найти применение для движка Тапп23, который я сейчас реставрирую.
Чтобы его переделка была востребована.

Надо описать требования к движку в каждом случае, чтобы переделывать его быстро и не отвлекаться на идеи.


- у меня был проект БД словоформ - я его остановил, но там как раз требовалась похожая система. Для хранения классов, объектов и отношений. На 10 миллионов словоформ.
- у меня есть проект Оператор. Для него требуется похожая система - где-то нужна там была.
  Для хранения типов мест итд - но там нужна БД.
- для анализа исходного кода - у меня есть 5Гб разных исходников, из них хорошо бы составить коллекцию алгоритмов. 
- для проекта классификации слов - у меня две семантические классификации там были сделаны, вот их надо бы переработать в одну или еще что-то сделать, как-то использовать. И наполнить ее объектами хорошо бы.

ПоискНадо
- задачи и проекты можно свести в единый граф сущностей и операций, который надо хранить в Тапп.

Инвентарь
- Инвентарь на Тапп - пока это чисто упражнение для добычи опыта работы с тапп. Пока нет надежно работающего мультиконтейнерного движка, эти данные нельзя извлекать из Тапп. Значит, их нельзя использовать для других проектов. Поэтому это чисто развлечение получается

АлгоритмСходстваСлов
- Там можно тапп использовать для хранения классов частей словоформ, но пока это вообще непонятно как должно работать.

РечевойИнтерфейс
+++Интерпретация сообщений Секретарьом
Для интерпретации сообщений Секретарьу нужна модель ситуации. А для нее нужен Тапп24. Этот движок Тапп24 желательно сделать с локальной БД вроде sqlite - это выглядит маленьким локальным хранилищем данных, с которым удобно экспериментировать.
По этой модели Секретарь будет строить вопросы и ответы. 

И полезен был бы граф сущностей, наполненный предварительно из текстов, чтобы находить в нем аналогии, делать классификации и предсказания. 

-------------------------
Для РИ нужно не только исполнять отдельные [Команда]ы, но и хранить их результаты. Для использования в дальнейших работах. Как это можно сделать?
1) помещать их в Тапп
2) хранить их в файлах, которые затем регистрировать как локальные временные [Место] в рамках [Задача]и.


Тапп можно использовать для хранения контекста [Задача]и и переменных общего процесса. Один контейнер Тапп на все [Задача]и сессии пользователя.

Хорошо бы использовать Тапп для хранения Сущностей-Мест и Методов-Процедур.
- но [Место] часто имеет несколько классов по разным классификациям. Как в моей Тапп описать несколько надклассов для [Место]а? Если в поле ТипЯчейки можно поместить только один класс?
  - Можно в это поле вписать пустой идентификатор, а надклассы указывать связями определенного типа с этими надклассами.
------------------------
++ Список Мест И Типов Мест
+++Замечания
* Тема очень глубокая, сейчас важно держаться на поверхности, не заныривать в дебри классификаций.
* Для полноценного применения типов сущностей нужен Тапп и много теории и методик. На них нет ресурсов, поэтому все должно быть сделано просто, хотя и с ограниченными возможностями. 

-------------------------
Для работы Оператора нужен УАМХ сейчас. И еще надо где-то хранить структуру типов сущностей, пока нет Тапп.
-------------------------
+++Места в Операторе
Места в Операторе это Сущности. Их нужно представить как объекты соответствующих классов. Для них надо определить и описать свойства и методы.
Вот как Оператор научить работать таким образом с этими [Место]ами?
Как представлять [Место]а как объекты классов, со свойствами и операциями, но не в коде, а наращивая это по ходу работы?
Как и где их хранить?
В Тапп?
Как добавлять и задавать свойства, методы и отношения сущностей?
- вручную можно задавать через некий интерпретируемый язык описания, где скрипты, [Алгоритм]ы, и все вообще будет создавать и дополнять сам Оператор. Ну или пользователь пока Оператор не готов.
------------------------

+++Напоминания
Их даты и описания надо где-то хранить.
Вероятно, в отдельной таблице БД.
Такая схема с кучей таблиц не универсальна.
Но Тапп пока нет, а в нем бы это было более единообразно и проще поддерживать.
Напоминания удобно хранить в Органайзер - там можно приделать удобные формы для просмотра и редактирования напоминаний.
И хранить их в собственной БД по УАМХ, и получать к ним доступ через АПИ.
Но пока этого ничего нет. И Оператор не модуль Органайзер сейчас.
-----------------------
И тут нужен проект КоллекцияСлов. который хранит слова, обозначающие сущности, и у которых есть еще формы - оттенки, которые обозначают смысл применения сущностей в контексте запроса. Это надо где-то хранить, поэтому нужен еще и Тапп24, нормальный, полноценный с методами. И эту систему надо еще расширять, ориентируясь на классы слов как классы сущностей. 
----------------------
Оператору нужна БД, где он будет хранить данные о сущностях, найденных на компьютере или введенных пользователем. 
Это нужно чтобы распознавать сущности по названиям в запросах пользователя.
Такая БД может быть реляционной, хотя Тапп удобнее.
----------------------
+++Функциональность - выбор мест
Для [Команда]ы "Покажи плейлисты" нужны средства выборки [Место] по типу.
То есть, нужно из общего списка [Место] выбрать [Место]а с типом Плейлист. Потом вывести их на экран.

Как это реализовать? Просмотрев классы [Место]. Но у классов должны быть известные и стандартные имена.
И для этого просмотра нужны операции АПИ.

Имена классов надо не вручную вписывать, а выбирать из классификации. Так меньше будет ошибок. Но пока я не могу это сделать - у меня в Оператор нет общего дерева классов. Можно выводить сообщение " Такого дерева нет в списке классов. Вы хотите создать новый класс?".
Но это требует еще и описания классов и дерева классов или Тапп-подобной структуры.
и соответственно функций АПИ для классов. И браузера классов. И еще много всего надо.

-----------------------
+++Как это будет использоваться?
* Сначала надо создать структуру для хранения этих распарсенных типов.
Для каждого класса надо хранить один или более надкласс абстракции, и ноль или более подклассов агрегации. Итого это два списка того же класса объектов.
* потом надо прочитать это выражение в это дерево классов. И хорошо бы и обратно записывать дерево классов в строку текста.
* теперь у нас есть для некоторого [Место]а его ТипМеста (класс). Он нужен для определения пригодности аргумента. Но только для конкретного применения в некоторой [Процедура]е, а не вообще. Поэтому строить общее супердерево классов не имеет смысла, пока нет Тапп. Ну разве что для любопытства. Или отладки сложных проблем с типами.
-----------------------









