++ Проектирование Кода Проекта
++++Описание концепции
Описывает процесс проектирования кода всего проекта.

Система создается на C# для Microsoft Visual Studio 2005 или поздних версий. Visual Studio используется как среда разработки и отладки, с просмотром состояний объектов и других данных.
Для хранения СтруктураСущностей на диске используется СУБД разных типов См. ПереченьТиповБд. Во время работы СтруктураСущностей частично находится в оперативной памяти компьютера, частично в БазаДанныхСолюшена.

++++Интерфейсы
В прошлых версиях использовались интерфейсы:
* Для сериализации: ИнтерфейсСериализации - ImSerializable
* для стандартного представления ЭлементСтруктурыСущностей: ИнтерфейсЭлементаСтруктуры - ImElement
* для инициализации менеджеров подсистем: ИнтерфейсМенеджеровПодсистем - нет названия
* Для работы с БД: ИнтерфейсАдаптераБД - нет названия  
* атрибуты для подключаемых сборок кода. (Из Тапп1) ? - ?
Возможно, подключаемые плагины были бы полезны в этой системе тоже, но я пока не знаю, как и зачем.

Новые интерфейсы:
* Для управления солюшеном через РегистраторСолюшенов. См. КонцепцияМультиконтейнерность.

+++Наработки
* См ОсмотрСловаряDictionary.
* wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=СписокКлассовПроекта
Отсюда можно взять оформление карточки класса и метода итд, и интерфейсы и прочее.
* non-Nullable типы CLR (int, float, ...) надо заменять на Nullable-типы, чтобы унифицировать - 
    использовать универсально значение null для всех типов данных объектов базы.
* СтруктураСущностей Тапп1 объемом 300000 объектов и классов довольно долго загружается/выгружается в ФайлСнимка, и занимает почти 1 гигабайт оперативной памяти.
* Сериализация классов в текст и в двоичный поток - вынесена в ИнтерфейсСериализации. 
* todo.концепция.код: После выяснения всех тонкостей переработать иерархию классов и заново ее документировать.

++++Тексты сообщений
В исключениях и еще где-то используются текстовые сообщения. Хорошо бы их для упрощения локализации единообразно организовать.
Но где их хранить? В отдельном файле нежелательно, если движок встраиваемый, дополнительный файл = дополнительный риск неудачи при запуске приложения.
Выводы:
* Потребность перевода сообщений на другой язык в настоящее время маловероятна. Поэтому сейчас можно эту проблему игнорировать.
* Все тексты сообщений нужно свести в один статический массив текстовых констант, который надо хранить в одном месте кода проекта.  
* Для ВстраиваемаяВерсияДвижка текстовые сообщения не могут быть вынесены из сборки движка.
   
++++Исключения
* В архитектуру нужно добавить Исключения, но это можно сделать только в процессе описания тела функций.
* надо переработать исключения так, чтобы они содержали объект-причину и подробно его описывали.
* Надо протестировать работу исключений. добиться легкости в использовании.
* возможно, потребуются новые исключения для нововведений
* [file:///V:/МоиПроекты/SIM/OldVersions/SimOldDocs/Exceptions.txt] - Соображения по организации исключений в Тапп1. 
    * todo: Надо переработать организацию исключений под нынешний проект.

++++XML формат
* Формат XML не позволяет легко добавить или удалить поле в элемент - данные перестают загружаться из-за неверного формата. Для одиночных XML файлов вроде ФайлСолюшена лучше использовать словарь как гибкую схему добавления новых полей.
* Формат XML удобен тем что можно вручную внести изменения в содержимое файла. Но это годится только для файлов настроек. 
* Система работает очень медленно при поиске связей ЭлементСтруктурыСущностей, если этих связей много. 
   Следует использовать хеш-таблицы, но они не сериализуются в ХМЛ. Оптимизация этого поиска пока невозможна. 

++++Контроль аппаратных ресурсов и производительность
В платформе NET Framework 2.0 есть класс GC, в нем есть статическая функция получения текущего размера кучи. Этой функцией можно пользоваться при диагностике в МенеджерЛога.
Еще есть специальный класс MemoryFailPoint для проверки возможности выделения блока памяти для нового объекта. Это позволяет выделить в куче память необходимого размера, проверив таким образом возможность создания объекта заранее, чтобы избежать исключения нехватки памяти внутри сложного процесса. После создания MemoryFailPoint объекта, его надо явно уничтожить вызовом Dispose. Это можно использовать в коде при создании различных объектов

* todo.концепция.код: Следует ли включать в СтатистикаСолюшена размер свободной памяти процесса и другие параметры подобных ресурсов? Мониторинг аппаратных ресурсов? Как представлять результаты этого мониторинга? Как назвать этот мониторинг и его результаты? Где и когда использовать?
    * Это ведь динамические характеристики, они не совсем то, что статические характеристики солюшена в СтатистикаСолюшена. Они действительны лишь при работе солюшена.
    * Надо посмотреть, как это сделано в MySqlСУБД - там есть подобный механизм, для отладки итп.

* [rel://files/MySqlPerformance.htm] - * todo.концепция.код: Извлечь отсюда сведения о технологии измерения производительности и мониторинга ресурсов на отдельную страницу.

+++Материалы










[bookmarked: true]
