++ Концепция Тапп Версии Бар/Ячейка Версии Бар
[//ДОПОЛНИТЬ]
См. [//СборкаЯчейка1]

[//Ячейка] представляет минимальную единицу структуры [//СтруктураСущностей]. 
Ячейка является универсальной сущностью, которую можно назначить объектом, классом, методом или чем еще.
Ячейка в [//КодДвижка] версии Бар представлена классом [MCell].

+++Свойства ячейки
Каждый элемент (ячейка, метод или связь) имеет состояния/обозначения, в зависимости от которых варьируется его использование. Эти состояния представляют собой самостоятельные сущности, и реализуются в системе как ячейки. Для каждого состояния можно определить [//МетодОбработчикЯчейки], реализующие индивидуальные аспекты поведения для соответствующего состояния ячейки. Таким образом, поведение ячейки определяется [//МетодОбработчикЯчейки]-обработчиками ячеек, обозначающих состояния этой ячейки. Короче, ячейка наследует обработчики ее над-ячеек. С возможностью их заменить собственными или сделать недоступными.
 
Чтобы добавить в СтруктураСущностей новое состояние, надо создать ячейку ЯчейкаОписатель, олицетворяющую это состояние, и организовать для нее некоторые вещи. 
После этого можно прицеплять эту [//ЯчейкаОписатель] к нужным ячейкам с помощью связей некоторого типа. 
Или использовать специальное поле в ячейке, записать в него идентификатор [//ЯчейкаОписатель], если связи создавать неудобно. 
Хотя нежелательно создавать поле в ячейке, это снижает универсальность [//КонцепцияТапп].
++++Константы
* public static int32 LinksTreshold = 512 - порог числа связей ячейки при выборе: искать в таблице БД или в памяти. Значение зависит от производительности [//СерверSQLБД], сети и состояния БД. Значение должно подбираться опытным путем в процессе эксплуатации Солюшена.
    * todo: перенести подобные константы в Солюшен, чтобы они были в одном месте кода, чтобы получать их из объекта Солюшена, а не из разных мест. И чтобы настраивать эти параметры через ГУИ в run-time, а не перекомпиляцией проекта.
++++Идентификатор ячейки
Используется для идентификации ячейки, определения принадлежности к контейнеру. 
Ячейка имеет уникальный составной ИдентификаторЯчейки, состоящий из ИдентификаторСолюшена и ИдентификаторЯчейкиВнутриКонтейнера. ИдентификаторСолюшена обозначает [Солюшен] и[Контейнер] и используется для обнаружения (ВнешняяЯчейка) ячеек из другого контейнера, связанных с текущей ячейкой. При доступе к такой ячейке используется МеханизмКоммуникацииКонтейнеров.

ИдентификаторЯчейкиВнутриКонтейнера представлен типом int. Положительные значения обозначают постоянные ячейки, отрицательные значения обозначают временные ячейки. Значение 0 зарезервировано.
Новые ПостояннаяЯчейка получают новый ИдентификаторЯчейкиВнутриКонтейнера, на 1 больше максимального существующего. Новые ВременнаяЯчейка - соответственно, с минусом. Для единообразия код, определяющий новый ИдентификаторЯчейкиВнутриКонтейнера, унифицирован для временных и постоянных ячеек.
Поскольку ИдентификаторЯчейки много используется в связях, а связей больше, чем ячеек, в памяти хранится только значение (8 байт), а не объект C#-класса (16 байт). Операции с ИдентификаторЯчейки - статические члены C#-класса. 

++++Название ячейки
Ячейка как ЭлементСтруктурыСущностей, имеет символьное НазваниеЯчейки. Это строка длиной до 128 символов. Представляет название сущности, представленной данной ячейкой. Определяется пользователем. 

+++++Уникальность названия ячейки
НазваниеЯчейки может быть не уникальным, поиск по НазваниеЯчейки должен возвращать список ячеек.
Уникальность НазваниеЯчейки устанавливается пользователем при разработке ПользовательскаяКонцепцияСолюшена. 
Нужно предоставить в КодДвижка инструментарий для проверки Уникальность НазваниеЯчейки, на случай, если он потребуется.

Можно постановить, чтобы НазваниеЯчейки были уникальными в пределах [Контейнер]а, но нельзя гарантировать их уникальность для всех контейнеров. Уникальность НазваниеЯчейки позволит пользователю однозначно указывать ячейку по названию, это удобно, но требует проверки уникальности названий в системе. Из-за особенностей языка, для обеспечения уникальности НазваниеЯчейки придется конкретизировать, то есть, удлинять, тогда их неудобно использовать. Тут можно предложить ввести соглашения об именовании ячеек, пространства имен, но это уже концепции, исполняемые пользователем, а не кодом КодДвижка.

++++Описание ячейки
Ячейка как [//ЭлементСтруктурыСущностей], имеет [//ОписаниеЯчейки].
todo: выявить ограничения длины строки, если они есть. 

++++Тип ячейки
Идентификатор ячейки ЯчейкаОписатель, обозначающей тип данной ячейки. Ячейка представляет некоторую [Сущность]. Эта сущность относится к некоторому единственному классу. Этот класс есть [Сущность], описывающая свойства своих объектов, и выражается ячейкой ЯчейкаТипаЯчейки.
Для обозначения типа ячейки используется поле ТипЯчейки, варианты значений в котором можно обновлять по мере развития СтруктураСущностей.
По ИдентификаторЯчейки невозможно определить ТипЯчейки. Для получения типа ячейки нужно получить саму ячейку.

Возможно, после испытаний можно будет отказаться от хранения ТипЯчейки, определяя его по связям ячейки.

++++Данные ячейки
Ячейка может хранить БлокДанныхЯчейки - двоичные данные, которые интерпретируются в зависимости от ее ТипЯчейки. 
В старых версиях Тапп это просто массив байт в памяти.
Этот блок данных лучше хранить как двоичный поток байт, а не как массив в памяти. Тогда и с чтением больших блоков данных из таблицы было бы проще.
todo.концепция.сс: Как реализовать этот поток? BinaryStream? Это должно быть общим для всех типов ячеек, и чтобы было быстро и гибко. Это проблема, которую надо решить в этом или следующем релизе Тапп.

++++Тип данных ячейки
Идентификатор ячейки, обозначающей тип для данных, хранящихся в данной ячейке.
Ячейка может хранить массив байт БлокДанныхЯчейки. Интерпретация этого массива байт определяется ячейкой, задающей тип данных. Эта ЯчейкаТипаДанных отвечает за описание типа данных и предоставление операций, корректно работающих с представленным ячейкой экземпляром данных.
Для поддержки различных типов данных предполагается связать с [//ЯчейкаТипаДанных] обработчики сериализации. Это позволит использовать любые типы данных, которые можно сериализовать.
Поиск по содержимому БлокДанныхЯчейки в этом случае возлагается на [//МетодОбработчикЯчейки] соответствующего типа, а не на СерверSQLБД.

Можно вместо указания идентификатора [//ЯчейкаТипаДанных] сделать связь-ссылку типа "Тип данных ячейки" на [//ЯчейкаТипаДанных], и для нее сделать обработчики. Но это расходует память на множество таких связей, можно вместо этого реализовать эту ассоциацию в алгоритме. 
    * Пока используем поле, переделаем на связь если потребуется.

++++Идентификатор состояния ячейки
Идентификатор ячейки ЯчейкаСостоянияЯчейки, обозначающей состояние данной ячейки.[//КВЕСТ]
todo.концепция.сс: Что такое это СостояниеЯчейки? Каков перечень состояний? Кем он определяется?
+++++1 
Каждый элемент (ячейка, метод или связь) имеет состояния/обозначения, в зависимости от которых варьируется его использование. Эти состояния представляют собой самостоятельные сущности, и реализуются в системе как ячейки. Для каждого состояния можно определить [//МетодОбработчикЯчейки] обработчики, реализующие индивидуальные аспекты поведения для соответствующего состояния ячейки. Таким образом, поведение ячейки определяется обработчиками ячеек, обозначающих состояния этой ячейки. Короче, ячейка наследует обработчики ее над-ячеек. С возможностью их заменить собственными или сделать недоступными. Чтобы добавить в систему новое состояние, надо создать ячейку, олицетворяющую это состояние, и организовать для нее некоторые вещи. После этого можно прицеплять эту ячейку-состояние к нужным ячейкам. Или использовать выделенное поле в ячейке, записать в него идентификатор ячейки-состояния, если связи создавать неудобно. Нежелательно создавать поле в ячейке, это снижает универсальность системы.
+++++2
Это некое состояние, определяемое [//ПользовательскаяКонцепцияСолюшена]. Например, для связей можно определить состояния Разрешено, Запрещено итп. Но тут не должно быть состояний других разновидностей, вроде readOnly или isActive, так как они затирают другие разновидности состояний. Нельзя в одном поле хранить несколько шкал состояний.

++++Флаг активности ячейки
Обозначает, что ячейка активна или наоборот недействительна и подлежит удалению.
Удаление НеактивнаяЯчейка это сложный процесс, поэтому оно выполняется [Оптимизатор]ом в комплексе для всей СтруктураСущностей сразу.
До тех пор ячейка продолжает существовать в СтруктураСущностей, и может быть восстановлена.
НеактивнаяЯчейка не участвует в операциях структуры СтруктураСущностей.

Ранее обсуждалась идея совместить это поле с СостояниеЯчейки, но потом решено было оставить его отдельным, чтобы состояние ячейки не терялось при ее удалении и могло быть восстановлено вместе с другими данными ячейки.

++++Идентификатор владельца ячейки - не используется

++++Идентификатор прав доступа - не используется

++++Время создания ячейки
Таймштамп создания ячейки. Позаимствовано из концепции файловой системы, реализовано, и пока что не выглядит полезным.
См. [//ИдеяУбратьТаймШтампыЯчеекИСвязей]
++++Время изменения ячейки
Таймштамп последнего изменения ячейки. Позаимствовано из концепции файловой системы, реализовано, и пока что не выглядит полезным.  Изменения связей ячейки не учитываются.
См. [//ИдеяУбратьТаймШтампыЯчеекИСвязей]
++++Время Доступа Ячейки
Таймштамп последнего доступа к ячейке. Нужен для выявления неиспользуемых ячеек для выгрузки из памяти. Только для ячеек типа MCellA MCellB.
++++Сервисное значение
Переменная, хранящая числовое значение для различных сервисных операций типа поиска в графе. Исключительно служебное поле. Значение по умолчанию = 0.
++++Флаг только чтение
todo.глоссарий: Распространяется ли действие поля MCell.ReadOnly на связи ячейки? Можно ли изменять связи у ячейки, находящейся в режиме Только для чтения?
todo.глоссарий: Что делает поле MCell.ReadOnly в ячейках?  запрещает:
 -изменять свойства ячейки (через проперти)?
 -изменять данные (поле value) ячейки?
 -изменять связи ячейки? 
 todo: решить, это поле должно быть отдельным, или его функции будет исполнять ИдентификаторСостоянияЯчейки?
Ранее обсуждалась идея совместить это поле с СостояниеЯчейки, но потом решено было оставить его отдельным, чтобы состояние ячейки не терялось и могло быть восстановлено вместе с другими данными ячейки.
++++Связи ячейки
Ячейка может быть связана с другими ячейками при помощи связей.
Ячейка имеет один общий КоллекцияСвязейЯчейки, содержащий все существующие в проекте связи ячейки.
Ячейки в своих КоллекцияСвязейЯчейки хранят только ссылки на связи в памяти.
КодДвижка управляет ссылками на один объект связи, это проще, чем в КонцепцияТапп1
[Ячейка] имеет доступ ко всем связям через свой КоллекцияСвязейЯчейки, этот список не упорядоченный.
Связь соединяет две ячейки и может содержать ссылки на объекты связанных ячеек в памяти.

Связи ячейки загружаются в память при загрузке в память самой ячейки. В памяти связи существуют в единственном экземпляре, поэтому их наличие в памяти нужно каким-либо образом проверять.
КоллекцияСвязейЯчейки может быть реализована как список или словарь.

++++Класс ячейки
Ячейка, представленная в памяти приложения, является clr-классом, осуществляющим операции. Однако, код выполняет только базовые низкоуровневые операции, а для операций ячейки вызываются сопоставленные ей методы.

Для разных условий предполагаются разные классы КлассЯчейки. Все классы ячеек могут существовать в памяти одновременно, имеют одинаковый набор операций и используют один и тот же способ связывания. Различаются поведением и размером занимаемой памяти. 
* MCellA ячейка занимает минимум памяти. Чтение и запись свойств непосредственно из/в ТаблицаЯчеекБд. Ячейка работает медленно. Ячейка только представляет запись в ТаблицаЯчеекБд. 
* MСellB ячейка хранит все свойства в памяти, кеширует чтение. Запись не кешируется. Удобна для интенсивного чтения. 
* MСellBds (DelaySave) ячейка кеширует чтение. Кеширует запись, поэтому изменения параметров ячейки должны быть записаны вызовом специальной функции. Работает быстро, удобна при проведении коротких интенсивных операций. При аварии структура базы будет несогласованной. 
* MCellBt (Temporary)- ВременнаяЯчейка. Не хранится в БазаДанныхСолюшена, используется для построения временных участков структуры. Быстрое чтение и запись. Связи с этой ячейкой также не хранятся в БазаДанныхСолюшена. Может быть сохранена в БазаДанныхСолюшена после создания, после сохранения становится MСellB типа.

Ячейки получают КлассЯчейки в процессе загрузки или создания. [Контейнер] содержит поле РежимСозданияЯчейки, определяющее КлассЯчейки по умолчанию, используемый при автоматическом создании ячейки.
При создании ячейки явным образом, нужно указать ее КлассЯчейки.
Ячейка MCellA не может быть преобразована в другие классы ячеек. Ячейка MCellB может быть (временно) преобразована в MCellBds сменой РежимЯчейки. Ячейки MCellBds и MCellBt могут быть преобразованы в MCellB при помощи операции сохранения Save(). 

Данное свойство ячейки обозначает реализацию конкретной ячейки, загруженной в память. Оно не сохраняется в БазаДанныхСолюшена, но вероятно, сохраняется в снимке. См. [//МенеджерСнимков]. 

done: решить, должно ли это быть поле или лучше извлекать его из информации о классе ячейки (MCell_?). 
* *Решено: Это поле.*
* Если для каждого класса ячейки использовать собственный подкласс MCell, то
    * Это упростит функции классов - сейчас там одна на все случаи.
    * КлассЯчейки можно извлекать из RTTI объекта и переводить в енум MCellMode. При этом экономится 4 байта памяти на соответствующее поле объекта ячейки.
    * не получится - ведь при сохранении ячейки MCellBt она должна превратиться в MCellB. Это можно было бы сделать заменой объекта другим, но тогда надо заменить и в связях, и в других местах, где используются ссылки на объект ячейки - в методах, в пользовательских алгоритмах итд. Это невозможно, поэтому придется реализовать это поле так, как это сделано в Тапп23. И код переписывать не придется сильно.

++++Методы ячейки
В версии Бар [//МетодОбработчикЯчейки] не поддерживаются.


++++Ссылка на текущий контейнер
Это ранее была статическая ссылка для экономии памяти. (Поскольку ссылка статическая, она действует для всех ячеек, находящихся в памяти, поэтому в будущей версии, где ячейки принадлежат разным контейнерам, ссылку на контейнер нужно помещать в экземпляр ячейки. Однако для ячейки из контейнера, располагающегося в другом процессе и соответственно, другом адресном пространстве, эта ссылка бесполезна, и для нее нужно разрабатывать отдельную концепцию работы. Которую придется распространить на все ячейки вообще, так как механизм работы с ячейками должен быть одинаков для любых ячеек.  Вывод: следующему прототипу нужна концепция работы многоконтейнерной системы. См КонцепцияМультиконтейнерность)
    * ссылка на контейнер для ячейки должна теперь добываться через статическую ссылку из класса контейнера или солюшена на объект [//РегистраторСолюшенов].

+++Операции ячейки

