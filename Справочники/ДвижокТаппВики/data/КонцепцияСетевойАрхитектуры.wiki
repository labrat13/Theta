++ Концепция Сетевой Архитектуры
[//СБОР МАТЕРИАЛОВ]
++++Описание концепции
Описывает подсистему сети и сетевую архитектуру системы.
Для МеханизмКоммуникацииКонтейнеров - зависит от КонцепцияМультиконтейнерность.
Также возможен доступ стороннего приложения к АпиСолюшена через сеть. Как другое применение концепции. 

+++Состояние
* Немного почищено. Вся концепция требует большой доработки и переработки. Нельзя даже сказать, что начато.

+++Материалы
Другие контейнеры будут доступны через сеть - МеханизмКоммуникацииКонтейнеров.
Значит, контейнер организуется в СерверСолюшена, который пересылает через МеханизмКоммуникацииКонтейнеров ячейки, связи, команды и другую информацию.
Два СерверСолюшена соединяются сетью через МеханизмКоммуникацииКонтейнеров, то есть TСР протоколом как самым доступным.
То есть, СерверСолюшена будет иметь IpАдресСервераСолюшена , ПортСервераСолюшена, ТаймаутСервераСолюшена.
 
Адрес СерверСолюшена удобно было бы задавать как интернет адрес. А вот нельзя, он же не HTTP, чтобы http://www.server.com - тут надо тогда собственный DNS сервер делать. Хотя такой уже есть - это РегистраторСолюшенов, надо только его вызывать из оболочки пользователя при разборе строки адреса. 

Для поиска [Солюшен]ов по ИдентификаторСолюшена надо заводить кеш ИП и портов [Солюшен]ов, и РегистраторСолюшенов, который будет хранить полный список всех СерверСолюшена в сети и выдавать их адреса по ИдентификаторСолюшена. В каждом СерверСолюшена будет храниться адрес и порт РегистраторСолюшенов, и необходимых СерверСолюшена.

Поскольку у СерверСолюшена может быть одновременно несколько клиентов, то это в целом неудобно для работы с контейнером - он однозадачный и может переключаться между пользователями только в те моменты, когда задуманная пользователем операция целиком выполнена. То есть, операции должны быть небольшими, независимыми. Проще всего это представить будет, когда будет работающий контейнер. Потом к нему прицепить сетевой интерфейс для КонсольКоманд, и вынести приложение пользователя в отдельный процесс. Потом еще один интерфейс для связи между контейнерами.
Контейнеры будут выполнять операции или поставлять ячейки для други контейнеров. Собственно, СерверСолюшена будет выглядеть со стороны вроде СерверSQLБД, но с возможностью выполнять сложные операции с данными. 

Приложение может соединяться с СерверСолюшена на локалхосте, и разные СерверСолюшена для теста тоже могут на локалхосте связываться.
Но нагрузка получается большая, лучше на разных машинах.

Функциональность:
* получение IP по интернет-имени
* проверка статуса соединения
* проверка доступности сети на машине
* посылка массива байт
* прием массива байт

++++Расчет параметров сервера
* [rel://files/Проектирование сервера.doc]

++++Размещение в Интернете.
Если переделать код на линукс, и использовать MySqlСУБД, то можно разместить на сайте.
При этом вся структура может быть доступна каждому пользователю, а если ввести уровни привилегий, то каждый пользователь может иметь собственный кусок системы для изменения, и остальное для чтения.
Поскольку каждый пользователь имеет доступ на чтение, он может видеть, как это устроено и работает. Структуру данных, алгоритм метода и прочее. В общем, всю концепцию системы.
В этом есть плюсы и минусы. Обдумать позже. 
Если концепция будет неудачной, пользователи не пойдут туда.
Если концепция будет хоть сколько-нибудь интересной, ее растащат и затрут до дыр.
Обзовут умным словами, понаоткрывают ее основные положения, извратят, и останется только выбросить.

++++Шифрование содержимого
_ Тут рассматривается шифрование содержимого Контейнера для защиты от дампа данных со стороны провайдера или хостера сайта. Это шифрование во-первых, не позволит работать нескольким пользователям. Во-вторых, оно не будет надежным, так как БД все же должна работать.
Надо сначала создать всю систему, чтобы оценить возможность ее шифрования.
И все равно, лучшим способом будет содержание Солюшена на собственном охраняемом сервере._

Можно ввести шифрование. Поскольку сервер сторонний, шифровать структуру базы не удастся. Можно шифровать записи в таблицах, так, чтобы только ИД были видны, для работы индексов. Однако, имея представление о концепции базы (а его все равно нужно будет опубликовать, чтобы пользователь работал), нетрудно восстановить общую структуру, а имея перехваченный траффик, можно предположить функциональное назначение элементов структуры, даже при шифровании имен, комментов и данных.
Шифрование методов, в общем, несложно, если они могут быть пересланы по сети.
Проблема в ключе шифрования. Симметричное шифрование требует ключ на стороне клиента. Данные на сервере приходят, уходят и хранятся уже зашифрованные, поэтому сервер не является слабым местом.
На устройстве клиента работает программа-клиент, которая расшифровывает данные и выполняет операции. Сервер только выполняет роль БД. Совместное использование невозможно, разве только если пользователь даст другому ключ.
Можно из защищенной части использовать публичную часть, хотя публичная часть не может использовать защищенную.
Публичная часть может поставлять информацию и методы для ее обработки, но эти методы не могут использовать защищенную часть системы. 
То есть, практически от сервера нужна только БД, если она поддерживает идентификацию пользователей. Пользователь, не имеющий ключа, может просматривать базу и портить данные.
Однако, на сервере в защищенной части невозможно запускать методы. Это несколько ухудшает задумку, поскольку удобно выполнять сложные операции на процессоре сервера, а клиенту отсылать результаты.
Также, система генерирует большой траффик, и будет работать медленно. Единственный плюс - полный сисуриту для большого объема данных.

Для ускорения и уменьшения траффика нужно использовать защищенный сервер, что позволит создавать на нем контейнер и работать с нешифрованными данными, то есть, классический веб-сервис. Но такой сервер может быть только в личном пользовании, его нет смысла арендовать.




