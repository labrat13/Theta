++ Применение Проекта
[//ДОПОЛНИТЬ] - найти и перетащить сюда тексты о применениях проекта.
[//ПЕРЕДЕЛАТЬ] - более четко и кратко оформить предложенные варианты применения, описать плюсы и минусы идеи, вынести остальной текст в разделы-приложения - вдруг пригодится.
Сейчас мы проектируем ВстраиваемаяВерсияДвижка, а для СервернаяВерсияДвижка потом надо будет проектировать более сложную конструкцию.
* См также РаспространениеПроекта.

++++Описание концепции
Описывает варианты использования разрабатываемой системы.

Надо описать десяток применений проекта. Где я его могу использовать и что я от него ожидаю.
Как он будет использоваться и какие задачи я могу решить с его помощью.
Надо собрать вместе примеры применения Тапп и проработать требуемый функционал движка. 
Функциональные требования к проекту. Это надо оформить ссылками, чтобы было ясно, чем обусловлено то или иное функциональное требование.

todo.концепция.применение: Разделить материалы на четкие сущности-модели с ясным описанием и применением и перспективами, зачем они нужны. Сейчас же непонятно, могу ли я это сделать на Тапп, и что для этого нужно.
todo.концепция.применение: Выделить сущности глоссария в текстах, где это полезно.

+++Полезные применения
Применения, которые принесут мне практическую пользу.
++++2. База радиодеталей
Пока в СтруктураСущностей нет методов, но их можно сделать в самом приложении. Остальное вроде все есть.
См. ПрименениеТаппБазаРадиодеталей
+++++2.1 Каталог радиодеталей
Каталог радиодеталей с даташитами и параметрами, присоединяемыми файлами, картинками, заметками.
- представление каталога?
А) ярлыками-ячейками и категории-оси связи
Б) гиперссылки-ячейки и категории-связи
В) страницами представлений, HTML, IIS, методы ячеек.
Вообще, это не структура представлений, а структура данных. Представление генерируется отдельно.
*Вывод*: практическая польза небольшая - она зависит от того, насколько часто я собираю электронные штуки. И я уже создал систему Хранилищ, которая уже выполняет эту задачу. В настоящее время нецелесообразно создавать еще одну систему для решения этой небольшой проблемы.
    * Но можно использовать эту, уже изученную, тему для ускорения разработки проекта.

++++3. Справочник по математике, физике
Там будут храниться константы, свойства материалов, формулы, ...
*Вывод*: практическая польза небольшая - она зависит от того, насколько часто я работаю по этой теме. А работаю я с этим редко - мне хватило бы и обычного справочника.

++++10. Система учета проектов
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=ПрименениеРазрабатываемойСистемы
ПрименениеТаппСистемаУчетаПроектов
*Вывод*: практическая польза в управлении проектами. Но эту пользу можно получить и от других проектов, в том числе, уже готовых программ сторонних производителей. Хотя там она ограничена, но зато не надо ее сопровождать.

++++11 Планер проектов
ПрименениеТаппПланерПроектов
*Вывод*: практическая польза в управлении проектами. Но эту пользу можно получить и от других проектов, в том числе, уже готовых программ сторонних производителей. Хотя там она ограничена, но зато не надо ее сопровождать.

++++12 Построение Модели Кода Проекта Как Разработка Концепции Методов
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=ПостроениеМоделиКодаПроектаКакРазработкаКонцепцииМетодов
Предлагается на движке существующей системы строить модели исходного кода проектов, проводить их анализ, разрабатывать лучшие модели представления кода, удобные для исполнения и анализа. 
Это должно предоставить лучшие способы реализации методов, и послужит прототипом системы анализа кода, пригодной для коммерческого использования.
*Вывод*: практическая польза в автоматизации создания программ. Но это сложная работа, требующая дополнительных специальных исследований. Ее имеет смысл проводить на уже отлаженном работающем движке. В общем, это не первоочередной кандидат на цель.

++++13 аналог Инвентарь
Из wiki:///V:/МоиПроекты/SIM/SimWiki/SimWiki.wiki?page=ПопыткаПредставитьПрименениеСистемы
Попытка Представить Применение Системы
Система, в которой есть список вещей, инвентаря, где каждая вещь названа, описана, привязана к месту расположения, итд. 
Можно при поиске некоторой сущности выводить где-то в отдельном разделе вещи, которые ассоциированы с этой сущностью. 
Например, запрос устройства высоковольтного генератора приведет к отображению в окне инвентаря катушки зажигания, подходящих транзисторов итд.
Используются вместе с генератором, входят как составная часть устройства, итд. Чтобы я мог сразу найти схему и узнать, есть ли у мня детали для нее.
Для этого надо описать высоковольтный генератор, катушку зажигания, варианты устройства итд.
- это все вместе выглядит трудоемко и не очень востребованно. Надо не только определить сущности, отношения между ними - надо внести в систему различные варианты устройства генератора, соответственные им наборы деталей, определить критерии выбора схемы итд - тут и работы очень много, и пользователь должен участвовать - он хочет собрать генератор или только узнать о его устройстве?
- сущности, хранящиеся в инвентаре, должны быть внесены в систему как сущности. И должны быть связаны отношениями, чтобы система, анализируя эти связи, могла бы что-то подсказать пользователю. 
*Вывод*: практическая польза в управлении ресурсами. Но эту пользу можно получить и от других проектов, в том числе, уже готовых программ сторонних производителей. Хотя там она ограничена, но зато не надо ее сопровождать.

++++14. Проект Оператор - управление процессами
3:54 25.11.2016

Применение Тапп
-Как из Тапп сделать штуку, которая непосредственно могла бы управлять некими процессами, повышая мои возможности управления и координации?
А то сейчас я могу только автоматизировать хранение и учет, и ничего более. К активным действиям или анализу эта штука сейчас не способна.

Хранение и учет - это работа с статическими моделями ситуации. Именно моделями, представлениями о ситуации, а не с реальными предметами. Именно ситуации, а не процесса. Статическая модель. Она пригодна для анализа. А для управления нужна динамическая модель -  с изменениями статической ситуации.
     
Даже хранение и учет использовать для анализа данных можно, но вопрос, как это организовать и представить пользователю. 
Можно этот анализ реализовать в системе Органайзер. В виде такой системы из функциональных единиц сущностей и создаваемых пользователем скриптов-алгоритмов и записей-знаний-заданий. 
Пользователь должен знать всю эту систему, ее ограничения и особенности. Иначе он не сможет содержать эту кучу сущностей организованной и она развалится под весом собственной сложности.
А как пользователя разгрузить от этой необходимости все знать? 
Можно было бы предложить механизм событий. Пользователь создает задание. Пользователь получает извещение о событии, пользователь отрабатывает задание, и забывает про это. Еще там есть контекст задания.
Такая работа по событиям удобна - пользователь создает ивент, пользователь отрабатывает задачу ивента.
И задачи выполняются, и голова не забита планами, и ничего не забудешь. События планирует и доставляет Органайзер. Часть заданий создает пользователь, часть - Органайзер по правилам и результатам анализа ситуации. 
С точки зрения пользователя это удобно: Алгоритмы и логика скрыты за интерфейсом создания задачи и просмотра состояния задач. Написал алгоритм, отладил, установил в Органайзер и пользуйся. Можно забыть про его реализацию.

И все равно это не то. Это механизм с множеством рычагов, звонков и лампочек. Это нелаконичная, некрасивая методика управления процессом. Хотя звонки и лампочки включает скрытый от пользователя коленчатый вал, это все же совокупность рычагов и пружин. И даже здесь не обойтись без анализа смысла текстов пользователя. Как командных, так и описательных. Эта система явно не способна сама себя обслуживать, придется часто лезть под кожухи. Все будет перепутываться, и в итоге будет работать только часть от всех реализованных возможностей, и то не все они будут полезны. 



+++Сомнительные применения
Применения, которые, скорее всего, потребуют больше, чем дадут.
++++1. Приложения на ячейках
Текстовый документ на ячейках, чертежи и схемы на ячейках.
Операционная система и [Движок] обслуживают одну единую систему ячеек. В этой системе сформированы структуры, позволяющие создавать текстовые документы (слова, абзацы, форматирование, стили, итд). Сами текстовые документы состоят также из ячеек, это позволяет, например, прицеплять к любой части документа чего-нибудь - другой документ, комментарий, что угодно.
То же для чертежей или схем. 
Плюсы: Удобно связывать и анализировать документы, удобно обрабатывать и генерировать автоматически.
Минусы: Документы будут состоять из множества ячеек, их поддержка будет занимать еще больше ячеек в общей структуре.

++++4. Прототип MeraMath
Сделать аналог маткада для хранения формул и вычислений по ним. 
Пользователь вводит формулу и константы, они сохраняются в бд, можно посчитать по формуле, подставив значения
Можно упростить формулу применив законы сокращения
Можно переделать формулу, выведя нужный ее член как результат.
Можно использовать внешний вычислитель
Предлагалось сделать ее для интернета, на яве. Пользователи сами будут наполнять бд.
*Вывод*: практическая польза небольшая - она зависит от того, насколько часто я использую вычисления по формулам.
Пользователи же не будут генерировать контент.

+++Непонятные применения
Применения, которые сейчас невозможно оценить.
++++15. Материалы из карты проектов СИМ
* [Тапп23Концепт] дает графовый движок для БазаЗадачОрганайзера, КоллекцияФактов, ХранилищеРесурсов, КлассификацияСлов, КоллекцияМетодов. 
* МетодикаПредставленияОтношенийСущностей дает реализацию отношений в [Тапп23Концепт]. 
* ЗадачиMeraMath дает представление задач в [Тапп23Концепт] для БазаЗадачОрганайзера.
* АлгоритмыMeraMath дает реализацию методов в [Тапп23Концепт].


++++5. Хранение и структурирование данных
Мне надо доделать Тапп для цели хранения и структурирования данных.
* должен быть в виде dll и использовать SqliteСУБД и/или MySqlСУБД.
* должен хранить данные и запускать для них операции-методы
* нужен GUI для просмотра и вообще работы с структурой ячеек.

А где все это будет использоваться? 
* вроде бы и есть где, но что-то не собирается вся схема. Чего-то не хватает.
    * этого чего-то давно уже не хватает во всех моих проектах. Мотивации не хватает. Не очевидно, что эта штука, будучи завершенной, даст мне новое качество, которое я смогу конвертировать в материальные блага.

*Вывод*: Это не конкретное применение, а более общий случай использования системы.

+++++5.1 База знаний
Можно использовать Тапп контейнер как БД: данные + их типы + методы этих типов данных.
Например, хранить в контейнере плотности веществ. И потом, когда при расчетах где-нибудь потребуется эта плотность, обращаться к контейнеру и получать эти значения. 
Тут надо отработать как процесс это вот использование контейнера Тарр для хранения типизированных - классифицированных данных. Подобно серверу Интернет. Такая база знаний.

Что я могу в такой базе знаний хранить?
* можно хранить табличные данные неких свойств, чтобы проводить некие расчеты и поиски вариантов.
    * мне пока такие расчеты не требовались. Где они мне могут пригодиться?
        * Поиск транзисторов по параметрам? Это поиск среди деталей по классу и по параметрам. Это требует большую базу данных о деталях, с неоднородной структурой. С возможно неполными или неточными значениями свойств. Это вот подходящее применение Тапп. А традиционно все детали одного класса сводятся в таблицу, и там ищется соответствие.
    * Одного примера недостаточно. Нужны еще два-три.
* можно сдавать в аренду доступ к некой такой большой базе данных.
    * кому? Я не знаю таких людей.
    * И эту базу данных надо сначала наполнить, а потом охранять от всяких халявщиков. Которые, как показала практика, ни перед чем не останавливаются для получения желаемого. Когда я буду наполнять базу данных, чем, и как смогу удержать над ней контроль, особенно в моей ситуации?

+++++5.2 База знаний
Зачем мне движок тапп.
Собирать и реструктурировать различные данные. Коды стандартных элементов , свойства радиодеталей, итд.
Я бы заносил их в контейнер соответсвующий и связывал их между собой. Постепенно накапливать, чтобы образовалась насыщенная информацией система данных.
Пока этот граф данных выглядит как самоцель. а что с ним делать - я пока не знаю.

Будет универсальная интегрированная сеть данных, в которой легко производить различные операции.
Если ее использовать в интернете, потребуется безопасность и права пользователей.
Надо придумать что-то, совсем не техническое, чтобы пользователи делали за меня работу, которая нужна им.

+++++Поисковый запрос к базе знаний
Вот мне потребовалось сравнить электропроводность меди и серебра - насколько серебряная катушка будет лучше медной по сопротивлению.

Я выяснил это с помощью интернета. Серебро имеет на 10% меньшее сопротивление, чем медью.
Кстати, куда я сейчас мог бы записать этот факт? Чтобы использовать его в дальнейшем, и потом найти и ссылаться на него в своих записях? Это надо поместить в Подсистема Фактов Органайзера.

Если бы я хранил эти константы электропроводности металлов в одном из контейнеров Тапп, как бы я мог их получить, так просто и быстро, без знания устройства контейнера, правил работы со структурой сущностей и без блуждания по ней?
А) Напечатав текстовый запрос к базе знаний, подобно поисковому запросу Гугл.
Б) Получив сводную страницу свойств меди и серебра, чтобы найти в них нужные данные. Как в Википедии.
в) добавить вариант здесь... 

++++6. Модуль Тапп для Органайзер
Сделать Тапп движок модулем для Инвентарь и других проектов.
Для работы с классификациями и структурами данных.
Он должен использовать SqliteСУБД БД, без проекта, те же три типа ячеек. Снимки пока не надо. Мультиконтейнерность. Один язык - русский. Сетевой интерфейс запланировать. Надо иметь возможность ссылаться на ячейки контейнера через веб-ссылки подобно Инвентарь. 
Остальные вопросы и неувязки надо выволочь на свет и разрулить.

Модуль предоставляет возможность построения сложных семантических моделей с целью их переделки и оптимизации структуры. Это должен быть небольшой модуль с собственной внутрипроцессной БД, большая часть работы ожидается быть локальной во времени, но возможны и долговременные операции с одним и более контейнерами. Один экземпляр Тарр в памяти = один открытый файл контейнера.
* Можно придумать текстовые ссылки на отдельные ячейки Тарр, по идентификатору ячейки, чтобы ссылаться из текста на сущности Тарр. 
* Для определения функциональности движка Тарр нужно определить условия задачи и среду, для которой нужен движок.
* Если сделать Документы на движке Тарр, то к документам в Тарр можно будет прицеплять различные метаданные.
* Тарр лучше всего подходит для каталогов, так как имеет прекрасную гибкость  и будет таким образом востребован и развиваться.
* Менеджер ресурсов Тарр надо отработать, чтобы он был единым классом, который потом использовать в других подобных местах. 
* Для Тарр еще нужен навигатор и интерфейсы для каждого использования.
* Тапп23 проект имеет сложности с правами пользователей. Это одна из причин, по которой он был отложен.
* Надо дорабатывать концепцию Тапп23 в части прав пользователей. Права пользователей надо вписать в систему ячеек.
* В результате теста памяти выявлено, что нет разницы в размере занимаемой памяти между 2 полями UInt64 класса и 4 полями Int32. Поэтому идентификаторы ячеек в Тапп можно представлять так или этак, на размер памяти это не влияет.

todo.концепция.применение: Надо осмотреть документацию Органайзер и выписать оттуда требования к модулю Тарр для их обсуждения.
todo.концепция.применение: Надо осмотреть старые версии документации тарр и извлечь оттуда требования к тарр для их обсуждения. Осмотрел, но пока ничего нового нет.
  


++++7. Средство проведения анализа взаимосвязей данных
* Надо сделать проект тапп и позиционировать его как средство проведения анализа взаимосвязей данных. Специально для таких разработок. Предлагать в интернете. Сделать конечный проект, с возможностью навигации по структуре, построения диаграмм, исполнения операций, некоторой начальной методологией. Этот проект статически держать на сайте, чтобы постепенно формировался комплект пользователей. Исходники не выкладывать, только релизы и документацию по ним.
+++++Анализ структур сущностей
В общем, солюшен представляет собой хранилище данных и интерпретатор.  Смешанное программирование: ООП и процедурное.
Мультииерархическая организация данных, интерпретация методов как данных, возможность модификации и наращивания структуры.
Гибкая организация позволяет создавать различные приложения в различных предметных областях. 
Структура данных и методов доступна для просмотра как пользователем, так и самой системой, 
 что позволяет производить модификацию/самомодификацию системы и упрощает ее использование.  
Рассмотрим наиболее интересный с моей точки зрения вариант.
Визуализация логических моделей.
 Сначала в системе необходимо создать низкоуровневые логические примитивы (контейнеры, списки, конвейеры, ...), 
затем средний уровень, реализующий типичные конструкции для выбранной предметной области, организованные в высокоуровневые абстракции. 
Это будет начальный набор, с которым система поставляется потребителю.
Потребитель, используя имеющийся в системе набор абстракций сущностей, создает нужную ему модель.
Это может быть система или часть системы, реализующая какую-либо функциональность.
Практически, берет из палитры компонентов нужный примитив, связывает его с остальными, задает какие-то параметры модели.
После окончания проектирования можно запустить эту модель, 
Система автоматически выбирает/создает реализацию и обеспечивает реальную обработку. 
Если не удалось подобрать реализацию, система способна вывести подробное описание причины и рекомендовать необходимые действия. 
Полученную модель можно оптимизировать вручную или автоматически, можно экспортировать в файл для распространения,
можно обсуждать, можно использовать для демонстрации или обучения, можно транслировать в другое представление. (например, в исполняемое приложение, или в текстовый документ)

В общем, у системы большое полуавтоматическиое будущее. :)

версия 1 - базовые концепции
версия 2 - моделирование, визуализация, исследования.
версия 3 - процессор потоков. Анализ и обработка потоков с средней энтропией.

++++8. Средство моделирования
+++++ Идея Модель Движка На Движке
Сделав простую модель движка из ячеек и связей, на этом движке проектировать и испытывать более сложные модели движков, с весами связей и прочими разными наворотами под конкретные потребности применения.
 Вместо того, чтобы переписывать движок под новое применение, просто построим на нем нужный движок.
 Работать будет несколько медленнее, зато переписывать код не надо, путаницы версий не будет, ошибок и недоделок будет меньше, проекты делаться будут быстрее.
 
+++++Заметки о проекте 
 Я создаю универсальную интегральную систему методов и данных разных пользователей.
Но эта стройная концепция организации и совместного использования данных и методов - а как она будет использоваться собственно пользователями?
.
Вряд ли пользователи пожелают бродить по этой сети ячеек.
Обычно они просто хотят получить информацию в удобном для восприятия представлении.
А это представление можно собрать и из обычных, не столь гармоничных источников данных.

Все преимущества этой моей системы оценить могут только те, кто непосредственно работает с данными и создает методы.
То есть, программисты и дизайнеры. И то, они обычно предпочитают более консервативные решения. 
Эта система должна дать им нечто большее, чем у них есть сейчас.
Вот об этом надо поразмыслить.

А еще есть математики, статистики итд. 
Они тоже работают с большим объемом данных, они тоже пишут скрипты вроде как для маткада.
И вот в области этих табличных вычислений ловить мне нечего - они и компактнее и быстрее.
Я могу тут выиграть на построении сложных структур из этих табличных данных, и их анализе.
Причем, желательно, автоматическом анализе, ну или хотя бы полуавтоматически, подобно накоплению опыта.
Вот такая возможность проводить эксперименты и поиск решения, комбинаций, могла бы стать важным преимуществом моей системы. 
Это направление надо продвигать при развитии системы.

Представление данных для пользователя можно создать с помощью методов системы. 
Так же, как оно создается в обычных приложениях, браузерах.
То есть, просто написать код метода или множества методов, и они отрисуют на экране диаграмму или форму или что там еще потребуется.
Так что для пользователя нет разницы, как он получит эту свою диаграмму - через обычные приложения, или через мою систему.
И то и это будет делать программист и дизайнер и технический писатель. 
Мне нужно придумать нечто, ради чего эти технические специалисты бросят свою любимую студию и освоят мою систему с нуля.
Это должна быть столь же существенная штука, сколь и мои другие удачные проекты.

++++9. Концепция СПИ
 КонцепцияСПИ - вариант применения Тапп?

+++Выводы
* Концепция в целом удобна для применений в анализе данных. Вероятно, следует ее для этого использовать.
* todo.концепция.применение: Возможность автоматизации, реорганизации СтруктураСущностей надо улучшить и использовать.
* Проект можно продолжать обкатывать и использовать для проектирования и отработки частей.

+++Материалы
* СписокРежимовЭксплуатацииСолюшена
