++ Текст Два


+++Тарр
О том как выглядит проект движка. Движок выглядит как система хранения сущностей, способ хранения отношений сущностей.
Отношения бывают простые и сложные. Их надо как-то обозначать. Простые будем обозначать простыми связями. 
Сложные, в том числе трансформации, будем обозначать как функции. В этих функциях участвуют и сущности и простые связи и временные сущности, которые временно создаются, чтобы эти отношения воплощать и далее реализовывать этот алгоритм отношений.
Ну и методы, как обычно - алгоритмы, операторы, сущности, аргументы. Вот весь этот комплект мы храним в одной структуре ячеек и она там как-то организована.
И соответственно надо организовать средства для построения, просмотра и редактирования диаграмм. Чтобы проводить статический анализ структуры. И такую динамическую модельку, чтобы можно было построить навигатор по структуре. Динамическую модельку будет делать сам пользователь. И ему нужно описание АПИ и какой-то пример, чтобы он мог эту динамическую модель построить, запустить и поиграться посмотреть что и как работает.
Вероятно, потребуется отладчик для алгоритмов методов и отношений. И возможно несколько языков описания алгоритмов методов и отношений и структуры сущностей. Эти языки придется свести воедино, написать парсер, интерпретатор чтобы исполнять эти скрипты, бекапы, дампы (это снимки всей системы целиком).
Это вот что можно по существующей системе сделать.

Если реализовать систему на яве, это будет популярным решением на линуксе.
Технический недостаток - объем оперативной памяти в яве ограничен от 64 до 1024мб. 
Это потому что в ява-машине эта область памяти процесса должна быть непрерывной.
А в фреймворке ограничение в этом плане лучше.

Организационный недостаток - система должна конкурировать с другими подобными системами, и разница между ними заключаться должна в идеологии.
Наша система точно предназначена для вот этого и этого и в ней для этого есть то-то и то-то.
Это должно обеспечить моему проекту лучшее применение и определенную часть аудитории.
Но поскольку пользователей мало, а разработчик всего один я, то проект будет продвигаться медленно, и заявленные фичи могут быть растащены разработчиками других проектов. 
Поэтому важно иметь сразу цельную концепцию системы, и выкладывать все по мере реализации функций.
То есть, сначала надо составить эту концепцию - описать себе детально, потом постепенно наращивать фугкциональность релизов в соответствии с планом разраотки.
Сначала надо выработать план, потом наращивать функциональность релизов так, чтобы они постепенно вписывались в намеченную функциональность. Тогда и будет все хорошо.
А сейчас - выложил документ концептуальный - а дальше ничего не идет. Соответсвенно, все фичи полезные растащили по проектам, и у нас есть шесть проектов, каждый обслуживает свою аудиторию, и не является подходящим для моих целей.
Сначала надо сделать концепцию, потом разработать план релизов, потом постепенно делать релизы и публиковать их, и как-то удерживать потребителей - им нужны средства коммуникации.
С клановой спецификой общества - проблемы.  

+++Распространение
На каких условиях можно будет наш программный продукт предлагать?
Это зависит от платформы - винда или линукс.
Если на линуксе, то предлагать будем его бесплатно. На линуксе надо исходники раздавать. А если их раздавать - их растащат и переделают под свои извраты. Тут все равно получается - надо написать более-менее полноценный комплект проекта, затем его пытаться распространять - это сложно. Там надо отслеживать применение кода моего проекта - где он используется. Чтобы сделать анализ и развивать дальше с учетом этого применения.
На винде тоже бесплатно - кто будет платить деньги за общественный проект-полуфабрикат. 
А для чего тогда он распространяется, раз бесплатно? 
Проект все равно делать - он часть моей цепочки проектов. А выложив его в инет, возможно получим дополнительные выгоды.
Под виндой могут быть проблемы с лицензией на студию. Но на винде разрабатывать удобнее. На линуксе на яве это сложнее. Зато там больше людей, заинтересованных в новой программе, так как программ под линуксом мало. 
Выводы:

+++Потоковая модель 
Если Тарр23 у нас появится, мы получим опыт для создания потоковой системы. Потоковая система состоит из потоков восприятия, потоков мышления. Эти потоки хранятся где-то в памяти, в определенном виде и затем они соответственно используются. Они преобразуются и используются таким образом, чтобы формировать постепенно базу знаний.
И формировать методы по ее обработке. То есть, формировать такой интеллект. Участки потоков между собой ассоциативно связаны, и это предполагает, что есть механизм, который записывает и ранит эти потоки в памяти, и механизм, который производит анализ входных потоков информации, и на основании этого анализа создает новый поток, который тоже сохраняется в памяти и тоже связывается с остальными потоками.
Весь этот комплект потоков и образует память и всякие там преференции и прочие интеллектуальные фишки. 
Получается: Потоки, подсистема хранения потоков, анализатор потоков. 
Хранение потоков - это запись последовательных событий или сущностей. Подобно тексту, только записываются параллельно.
Например, записываем одновременно появление собаки или кубика - у нас есть статическое поле - область действия, мы записываем, что обнаружили в нем кубик. потом записываем, что у нас все еще есть этот кубик, потом записываем, что у нас нет этого кубика - он куда-то делся. То есть, весь этот процес мы записываем в поток. И параллельно записываем другие объекты, предметы и действия. На такую временную шкалу записываем все эти события. Это же события.
Этот механизм регирует в основном на события. Мы обнаружили предмет. Мы опознали что это кубик. Мы отметили, что оно неподвижен. Мы шарим взглядом дальше, но помним, что у нас есть этот кубик.
Потом мы опять натыкаемся на этот кубик и подтверждаем что оно лежит (кстати, опознать состояние предмет лежит - это вроде как усвоенный рефлекс), что он неподвижен, что он продолжает находиться там, где мы его видели в прошлый раз.
Вот так постепенно мы записываем поток событиями как извещениями об изменении. 
Это сведения о состоянии этого кубика - что он лежит, неподвижно в некотором месте.
Потом записываем, что мы что-то там сделали, в результате у нас нет этого кубика, он исчез.
Сначала записываем наблюдения, потом произведенные операции отдельным слоем идут. Так параллельными слоями записываем весь поток в хранилище.
С этим потоком работает анализатор. Анализатор представляет собой систему рефлексов, которые срабатывают при определенных условиях. Такие рефлексы-реакции на события. Там много этих рефлексов и сложная их организация получается. Они ка-то структурируются, направляются, перерназначаются.
Как-то управляются. Постепенно накапливается система этих рефлексов. И вот образуется такой анализатор, который эту систему связанных между собой потоков просматривает и образует новый поток. Производя информационную организацию внутри себя, формирует новый поток и назначает его как наиболее свежий, актуальный потк, который и должен считаться теперь как наиболее правильный.
Причем это (что поток должен считаться как самый актуальный и правильный) записывается там же где-то отдельно в этом же потоке. Описывается, почему поток должен считаться актуальным. И анлизатор когда к этой системе все обращаются (к этой системе связей, ведь все потоки связаны друг с другом) и вот когда анализатор вю эту связку получает, он постепенно анализирует все эти связи, ухватывает тот поток, который самый новый и свежий (потому что он самый новый и свежий) и уже дальше работает с ним, (потому что он самый новый и свежий).

Вся эта система из анализатора с его наборами рефлексов-операций и потоков данных, собственоо, и образует сейчас интеллект. Хотя достаточно простой. Так у нас формируются и все остальные вещи. Все структуры и все остальное представляет собой просто запись потока. Поэтому для создания такой структуры нельзя просто так в башке посоображать и составить - это не запоминается. Запоминается только когда все эти вещи оформлены уже в новый поток, где все уже прописано - где что, с чем связано и почему - прямо таким непрерывным отдельным новым потоком вся эта классификация произведена. А в противном случае вся эта классификация фактически собирается из предыдущих потоков, на основании всего предыдущего опыта, и она производится в таком случае медленно и требует специальной работы, чтобы провести этот новый поток. В котором собственно отражена эта классификация.
Сейчас это примерно такой интеллект и он достаточно простой, чтобы его реализовать на компьютере.

Чтобы реализовать эти потоки на компьютере, надо создать определенный движок, систему, концепцию написать. Потом создать методику записи последовательности событий. Чтобы хотя бы входной поток - наблюдений - можно было вводить как поток, хранить как поток, анализировать. И ужимать итд итп. Чтобы его анализировать, нужны методы. А методы должны создаваться динамчески, и их тоже надо где-то хранить. Как-то создавать и где-то хранить. 
Тут надо Тарр или более специализированный движок.
Получается, мышление это достаточно медленный процесс, по сравнений с Тарр. Тарр достаточно статичен, предназначен в основном для исследований, накопления опыта, создания семантической сети. Он не подходит для реализации потоковой модели. Тарр можно использовать для анализа данных и создания этой потоковой модели как более лучшей концепции. 
Интеллект можно представить в этой потоковой модели, но для этого надо оцифровать входной поток, и надо как-то делать этот анализатор. Анализатор должен быть довольно сложным, и вероятно с первого раза его сделать не получится. Надо исследовать варианты, там будет много работы.        
Это получается более естественная модель интеллекта.

 

