++ Работа СУБД
[//В РАЗРАБОТКЕ]
++++Описание концепции
Описывает функционирование подсистемы баз данных.

+++Состояние

+++Сборки
* СборкаSqliteСУБД - SqliteСУБД
* СборкаMsSqlСУБД - MsSqlСУБД
* СборкаAccessСУБД - AccessСУБД
* СборкаMySqlСУБД  - MySqlСУБД
* СборкаFirebirdСУБД - FirebirdСУБД

* СборкаТаблицаЯчеекБд - ТаблицаЯчеекБд
* СборкаТаблицаСвязейБд - ТаблицаСвязейБд
* СборкаАдаптерБД - АдаптерБД
* СборкаБазаДанныхСолюшена - БазаДанныхСолюшена
* СборкаТранзакцииБД - ТранзакцияБД - надо еще искать материалы по слову транзакции

+++Материалы
* См СписокВозможныхТиповСУБД
* ОсмотрMySqlServer
* ПутьКСерверуСУБД, ПортСервераСУБД, ТаймаутСервераСУБД, ЛогинАккаунтаСУБД, ПарольАккаунтаСУБД надо хранить в ФайлСолюшена.
* [rel://files/Проектирование сервера.doc]
* Поиск наибольшего существующего идентификатора постоянных ячеек производится в ТаблицаЯчеекБд, так как там они все обязательно представлены.

++++Многопользовательская концепция
Тут КонцепцияМногоПользователей участвует.
    * Должен ли каждый пользователь Тапп иметь свой АккаунтСУБД для доступа к движку, или движок использует один АккаунтСУБД для работы, подобно веб-сайту?
        * Если много пользователей и много контейнеров, то каждого пользователя надо на каждом АккаунтСУБД регистрировать. Это плохо.
        * Если Интернет, то множество аккаунтов точно не годится.
        * Вывод: Один АккаунтСУБД на [Движок]. Пользователи Тапп разделяются движком.
            * Значит, в ФайлСолюшена хранить данные доступа к СУБД с текущей машины: ПутьКСерверуСУБД, ПортСервераСУБД, ТаймаутСервераСУБД, ЛогинАккаунтаСУБД, ПарольАккаунтаСУБД. 
                * ЛогинАккаунтаСУБД и ПарольАккаунтаСУБД можно не хранить, а вводить при начале СеансПользователя ( при запуске движка ). 
            * Должны ли эти же данные входить в ПолныйСнимокСтруктуры?
                * Если считать, что [Солюшен] можно восстановить из одного только ФайлСнимка, то да. Хотя зачем? Новый Солюшен создаст собственную БазаДанныхСолюшена с собственными путями и параметрами АккаунтСУБД. Зачем там старые?
                * Если считать ПолныйСнимокСтруктуры просто дампом СтруктураСущностей, а еще есть файлы Солюшена и привязанные файлы, то нет. Этих дампов в процессе работы будет много, зачем в них логин и пароль - они снижают безопасность СерверSQLБД.  Дамп СтруктураСущностей это просто дамп, моментальный снимок, он может включать в себя локальные во времени состояния, файлы (так как их можно потом отвязать, перепривязать, заменить, удалить), в общем, состояние Солюшена. АккаунтСУБД там явно лишний.
                * Выводы:
                    * АккаунтСУБД не должен входить в СнимокСтруктуры.
                    * todo.концепция.снимок: Надо осмотреть концепцию СнимокСтруктуры, у меня сложилось неправильное представление о снимках как о способе восстановления всего Солюшена.


++++Замечания о тестировании 
* Надо сделать полнофункциональный АккаунтСУБД пользователя на СерверSQLБД, с паролем и логином. Для чистого доступа к базе из кода. Логин и пароль передавать в строке соединения, строку пока создать вручную для тестов только. Эту строку приложение должно передать движку, а как оно ее получит - неважно.
* Надо в таблицы добавить несколько записей, для теста запросов. Надо запроектировать функции чтения-записи данных, и сделать запросы для них.
* Надо сделать тестовую таблицу, накидать в нее много строк данных и посмотреть как они будут выполняться из кода.
Попробовать пересоздать индексы вручную и из кода. Данные забивать случайные.

++++Идея Разбить таблицы для большего солюшена
* Максимальное число ячеек [Солюшен]а ограничено емкостью Int32 ИдентификаторЯчейкиВнутриКонтейнера и = 2048*1024*1024 - 1.
* В памяти компьютера может эффективно поместиться всего 4 млн ячеек MCellB.
* Ячеек MCellA поместится больше чем MCellB.
* Но не все ячейки Солюшена обычно загружаются в память.
* Поэтому можно увеличить число ячеек в Солюшене.

При увеличении размеров [Солюшен]а потребуется ускорить работу БазаДанныхСолюшена.
Можно разбить таблицы связей и ячеек на несколько таблиц.
    * Таблицу ячеек можно разбить на 2048 таблиц по 1024*1024 ячеек в каждой. 
    * Конкретную таблицу для ячейки следует выбирать по ИдентификаторЯчейки.
    * Таблицу связей разбить сложнее - для поиска связи надо просматривать все таблицы.
Соответственно надо будет переделать только АдаптерБД для работы с такими таблицами. Остальные подсистемы вроде не изменятся.

В MsSqlСУБД 2005 есть секционированные таблицы. Надо посмотреть, что это такое.
Для других типов СУБД можно предложить ограничить размер [Солюшен]а, разбить его на разные контейнеры. 
См. КонцепцияМультиконтейнерность.

++++111
* todo.концепция.бд: В архитектуре заведены таблицы БД как классы, они отличаются от классов кода, и эти отличия надо бы документировать
* Придется перепроектировать код АдаптерБД MDbLayer, поскольку выборка связей теперь не по tableId, а по новому идентификатору связи. Его все равно переделывать - к идентификаторам добавляется еще поле ИдентификаторСолюшена. Соответственно, потребуются новые индексы.

Сейчас поиск ячейки идет только по полю cellid - поля containerid в таблицах нет, поле первичного ключа таблицы ячеек не используется. Нужно создавать индексы идентификаторов по двум полям, и добавлять поля в таблицы, и работать соответственно. То есть, переделывать весь код MDbLayer.
Целесообразно совместить это с переработкой всей архитектуры.

Первичный ключ ТаблицаЯчеекБд не используется, поэтому структура ячеек не разваливается при переносе на другую базу данных, когда создаваемым строкам назначаются другие первичные ключи. 
Надо избавиться от использования первичного ключа таблицы ячеек.
То же для связей и ТаблицаСвязейБд.

Сразу можно проектировать подсистему БД и проекта на выбор одной из БД. Это если MySqlСУБД поддерживает необходимый набор возможностей. Набор предстоит определить и проверить его реализацию в каждом СерверSQLБД. Предлагается сделать класс-интерфейс стандартного набора функций АдаптерБД, и потом для каждого типа СУБД из ПереченьТиповБд его переопределять.

++++Тест поля varbinary - как с ним работать
Надо создать таблицу с таким полем, записать и прочитать данные, убедиться, что они пишутся/читаются, и размер данных сохраняется.
ЗАВЕРШЕНО - успешно читаются размером 12000, см тест в MDbLayer

