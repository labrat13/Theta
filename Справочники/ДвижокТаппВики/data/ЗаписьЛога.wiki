++ Запись Лога
[template: ШаблонКарточкиГлоссария]
Состояние: [В РАЗРАБОТКЕ]
Входит в: [//ПодсистемаЛога]


Запись лога представляет собой запись о событии. 


+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
 todo.глоссарий.форма: Укажите здесь соответствующий класс кода проекта, если известен.
++++Свойства - данные
++++Методы

+++Дополнительная информация 
* СообщениеЛога должно быть реализовано как объект ЗаписьЛога с потоком данных.
* Каждая ЗаписьЛога содержит таймштамп, код события, текстовое описание события, состояние элементов, участвующих в событии.
* Предлагается ЗаписьЛога пока считать абстрактной сущностью, и сосредоточиться на общем устройстве и операциях файлов ФайлЛогаСолюшена.
* Все объекты, выводимые в лог, должны иметь стандартную возможность сериализации и десериализации в двоичный блок данных.
    * todo.концепция.лог:Эти классы должны поддерживать ИнтерфейсСериализации. Убедиться в этом! 
* ИдентификаторСеансаПользователя должен входить в состав каждой ЗаписьЛога, поскольку одновременно с Солюшеном может работать несколько пользователей в одном СеансДвижка.
* Собственно пока нельзя точно сказать, что должно входить в запись лога. Поэтому это пока в основном абстракция.
* Запись лога подобна записи файла снимка, содержит заголовок секции, длину секции, разные поля, некоторые со своими полями длины, некоторые - фиксированные по длине и семантике.
* Запись лога представлена классом, который обеспечивает доступ к данным, сериализацию и десериализацию, представление в списке, отладочную информацию, итд.
    * Класс должен иметь функцию десериализации из двоичного потока
    * Класс должен иметь функцию сериализации в двоичный поток
    * Класс должен иметь проперти для часто используемых свойств класса. 
* Запись лога должна иметь свойство КодСобытияЛога, которое обозначает семантику события и используется для регулирования детализации лога. Это может использоваться также для анализа лога, чтобы не заполнять оперативную память ненужными для анализа записями лога. Поэтому КодСобытияЛога должен быть хорошо проработан, чтобы упростить его применение. 
* ЗаписьЛога должна иметь свойство ИдентификаторСеансаПользователя, так как даже внутри одного приложения может быть несколько одновременных пользователей солюшена.
* ЗаписьЛога должна иметь свойство ТаймштампСозданияЗаписиЛога
* Запись лога должна иметь фиксированный байт заголовка записи.
* Запись лога должна иметь значение общей длины записи, чтобы быстро перемещаться к следующей записи, не читая всю запись целиком. Есть вопрос - где это поле должно располагаться. Ведь надо не только перейти к следующей записи, а и узнать что-то о ней. Вот чтобы потом не исправлять указатель на следующую запись,е надо правильно расположить в потоке байт. Чтобы сразу прочитал значение, прибавил к текущей позиции и перепрыгнул на заголовок следующей записи. Вот что должно располагаться между заголовком записи и полем длины записи, надо продумать.
    * Эту длину записи надо считать быстро, лучше сразу в памяти. Однако, данные Ячейки могут быть очень большими по размеру, и даже они могут не влезть в файл лога. Поэтому, во-первых, надо ограничить размер данных Ячейки менее максимального размера файла лога, а во-вторых, нельзя обрабатывать такие записи лога в памяти - они должны сразу писаться на диск потоком, а потом уже должна вычисляться и вписываться в файл длина записи лога.
* Еще важно, что иногда надо двигаться не вниз, а вверх от последней записи. Вот как это сделать, если записи пишутся сверху вниз? Только если писать длину записи в конце записи, чтобы прочитав ее, отнять значение и попасть на заголовок записи.
* В итоге, надо писать длину записи и в начале записи, чтобы двигаться вниз, и в конце записи, чтобы двигаться вверх. И это разные длины записей, получаемые из общей длины записи минус оптимизации. Такой двусвязный список получается.
* Можно предложить для некоторого большого поля данных Записи лога использовать чтение из двоичного потока. Сами данные хранятся в файле, а в Записи только указатель на их позицию и менеджер-читатель потока. Тогда длинные данные Записи лога вообще не придется держать в памяти, а прямо из файла лога читать их. Изменять же их все равно нельзя.

++++Формат сообщения лога - устарело, переделать
Сейчас это прикидки. Прорабатываются служебные свойства сообщения.
* todo.концепция.лог: Надо переработать формат текстовой версии сообщения для передачи ее через КаналСообщенийЛога приложению для показа пользователю как сообщение лога. 
    * Не каждое сообщение будет показано пользователю, но каждое сообщение может быть показано пользователю. Это должно регулироваться при помощи КонтрольДетализацииЛога.

СообщениеЛога состоит из: (старый текст)
* Кода НомерКлассаСообщенияЛога - для поддержки фильтров.
* Кода КодСобытияЛога - какое событие произошло (функция, исключение или пользовательский комментарий) 
* АббревиатураСобытияЛога (для пользователя) 
* Таймштампа сообщения - когда оно добавлено в лог.
* Исходного состояния объекта: в HEX и в кратком текстовом описании
* Конечного состояния объекта: в HEX и в кратком текстовом описании
* Текста сообщения - для пользователя
