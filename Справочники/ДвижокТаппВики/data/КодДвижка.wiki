++ Код Движка
[template: ШаблонКарточкиГлоссария]
Состояние: [В РАЗРАБОТКЕ]

Обозначение кода движка Тапп в текстах.


+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 
 

+++Список набросков классов
См. также ПроектированиеКодаПроекта
Хорошо бы здесь где-то в этой вики перечислить классы примерно, чтобы больше конкретики было в концепции.
++++Классы КодДвижка
* КодДвижка
* MVersion - Базовый класс для ОбозначениеВерсииДвижка и ОбозначениеВерсииСолюшена. У них разные функции проверки совместимости версий.
* MLinkCollection - класс коллекции связей ячейки
    * MEngineLinkCollection - предполагающийся класс коллекции связей контейнера.
* [MID] - родительский класс идентификатора элемента
    * [MCellID] - идентификатор ячейки
    * [MLinkID] - идентификатор связи 
* MCell - абстрактный класс ячейки
    * MCellA
    * MCellB 
* MCellTemplate
* MLink - класс связи
* MLinkTemplate
* MEngine - класс контейнера
* MCellCollection - класс коллекции ячеек контейнера
* MElementIdManager - класс менеджера идентификаторов элементов
    * MCellIdManager - класс менеджера идентификаторов ячеек
    * MLinkIdManager - класс менеджера идентификаторов связей
* MDbLayer  - класс адаптера БД
* MLog - класс менеджера лога
* MNetwork - класс менеджера сети
* MSolution - класс менеджера проекта
* MSolutionInfo - класс информации о Солюшена, файла Солюшена
* MResource - класс менеджера ресурсов Солюшена
* MSnapshot - класс менеджера снимков Солюшена
* MMethod - класс менеджера методов Солюшена    
* MUtility - статический класс разных функций без определенной принадлежности.
* MStatistics - предсавляет статистику солюшена   
    
++++ Интерфейсы
* ИнтерфейсСериализации - ImSerializable - сериализация для лога итд
* ИнтерфейсАдаптераБД
* ИнтерфейсМенеджеровПодсистем - ImManager
* ИнтерфейсЭлементаСтруктуры - ImElement
* ICloneable - создание копии объекта
* ИнтерфейсРегистратораСолюшенов См КонцепцияМультиконтейнерность.

++++Енумы
* MDatabaseType  - енум типа БД
* MLogMessageClass - енум классов сообщений лога
* MEngineState - енум состояний контейнера
* MCellMode - енум типов ячеек
* MAxisDirection - Енум направление связи
* MSnapshotType - енум типа снимка
* MSerialRecordType - енум типа секций снимка
* MSnapshotFileVersion - енум ВерсияФорматаСнимка - устарел, заменен на ВерсияПодсистемыСнимков.

+++Дополнительная информация 
* АпиСолюшена делится на ApiSystemLayer и ApiUserLayer. 
    * ApiSystemLayer  выполняет базовые операции [Движок] в соответствии с архитектурой  компьютерной платформы. 
    * ApiUserLayer обеспечивает соответствие операций и методологии, контроль входных данных и так далее. 
* Есть список классов старого проекта Он может оказаться полезным. wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=СписокКлассовПроекта




++++Старый код
* [file:///V:/МоиПроекты/ДвижокТапп/РаботатьЗдесь/Tapp23code/Старые/3Tapp23Desktop]- недоделан, там явно была начата очередная переделка и остановилась. Он точно не может быть скомпилирован в работающую модель. Там шло внедрение менеджеров подсистем, менеджеров идентификаторов, интерфейсов, отработка операций с солюшеном и автоматического создания БД. И вот в середине все остановилось.
* [file:///V:/МоиПроекты/ДвижокТапп/РаботатьЗдесь/Tapp23code/Старые/2Tapp231]- испытания менеджеров идентификаторов. Остальной код взят из проекта ниже.
* [file:///V:/МоиПроекты/ДвижокТапп/РаботатьЗдесь/Tapp23code/Старые/1Tapp230]- наиболее полная версия тапп, есть приложение для графического представления ячеек и связей, есть тестовое приложение, есть пример пользовательского солюшена. Этот комплект вроде бы может быть скомпилирован в почти работоспособный движок. Он использует Microsoft Sql Server 2005.

 
+++++Реализация на Java
Если реализовать систему на яве, это будет популярным решением на линуксе.
Технический недостаток - объем оперативной памяти в яве ограничен от 64 до 1024мб. 
Это потому что в ява-машине эта область памяти процесса должна быть непрерывной.
А в NET Framework ограничение в этом плане лучше.


[bookmarked: true]
