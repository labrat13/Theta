++ Структура Сущностей
[template: ШаблонКарточкиГлоссария]
Состояние: [ПЕРЕДЕЛАТЬ] - Надо как-то упростить и структурировать. Но пока не представляю себе, как это сделать и что должно получиться.

Это система сущностей, отношений и действий с максимально гибкой структурой.


+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
 todo.глоссарий.форма: Укажите здесь соответствующий класс кода проекта, если известен.
++++Свойства - данные
++++Методы

+++Дополнительная информация 
[//ДОПОЛНИТЬ] - тут есть и белые пятна, и излишние подробности. Это будет более видимо, если все свести в один документ и читать после достаточного перерыва.

Свойства относительно других технологий: 
    * ниже производительность,
    * сложнее создавать,
    * выше гибкость, 
    * потребует меньшей переделки в процессе развития, 
    * подходит для большего числа применений. 
    * Сложно контролировать структуру.

todo.концепция.сс.важно: Сначала надо определить, что такое [Сущность] и [Отношение]. А то без этого СтруктураСущностей рискует оказаться недостаточно проработанной.

[Сущность] является смысловой единицей в СтруктураСущностей. 
Сущности предполагаются как данные и методы.
[Сущность] может быть реализована одной или несколькими более простыми сущностями - ячейками, связанными между собой отношениями - связями.
 
СтруктураСущностей физически состоит из [Связь]ей, [Ячейка]ек, [Контейнер]а. 
Ячейки и связи обобщенно именуются ЭлементСтруктурыСущностей.

СтруктураСущностей разрабатывается и строится в соответствии с КонцепцияТапп и ПользовательскаяКонцепцияСолюшена.

Контроль СтруктураСущностей выполняется пользователем или автоматическим [Оптимизатор]ом.

СтруктураСущностей включает в себя СлужебнаяЧастьСтруктурыСущностей, которая обеспечивает инфраструктуру для работы в соответствии с ПользовательскаяКонцепцияСолюшена.

СтруктураСущностей хранится в БазаДанныхСолюшена. 
Во время исполнения постоянные ячейки и связи загружаются из БазаДанныхСолюшена в оперативную память для ускорения работы. 
Временные ячейки и связи создаются в памяти во время работы системы и могут быть сохранены - стать постоянными.
СтруктураСущностей может целиком или частично состоять из временных участков. Временные участки, образованные ВременнаяЯчейка ячейками и связями с ними, не сохраняются в БД.


++++Элементы структуры сущностей
Поскольку [Движок] реализуется для исследования, для ЭлементСтруктурыСущностей предусмотрены поля для хранения текстовых описаний.

Свойства, типы и другие характеристики элементов ЭлементСтруктурыСущностей являются самостоятельными сущностями, и также представлены в виде ячеек. Чтобы ввести новый тип, нужно как-то вписать его в существующую систему. Поскольку первоначально никаких сущностей в базе нет, таким первоначальным ячейкам назначается ТипПоУмолчанию.

++++Контейнер
[Контейнер] представляет собой среду для функционирования и обслуживания СтруктураСущностей.

++++Ячейка
[Ячейка] представляет минимальную единицу структуры. 
[Ячейка] хранит двоичные данные, которые интерпретируются в зависимости от ее типа. 
[Ячейка] может быть связана с другими ячейками при помощи связей.

[Ячейка] может быть связана с методами. 
[Метод]ы могут выполнять специфическую обработку операций ячейки - переопределять операции для ячейки. 
[Движок] вызывает МетодОбработчикЯчейки или выполняет собственный код. 

++++Связь
[Связь] представляет некоторое Отношение между двумя Сущностями.
[Связь] соединяет две ячейки как From..To. 
Связь имеет ТипСвязи, описывающий Отношение.

++++Методы
[Движок] предоставляет набор операций, с помощью которого выполняются базовые операции с элементами ЭлементСтруктурыСущностей. Из этого набора пользователь создает специфические операции сущностей, названные [Метод]ами. 
В настоящее время не определена КонцепцияМетодов. Методы сопоставляются ячейкам, но как организовано взаимодействие - непонятно. Поэтому сейчас рассматривается работа с точки зрения организации данных, а организацию методов пока не удается представить. 
++++Снимки
СтруктураСущностей может быть сериализована в текстовый или двоичный ФайлСнимка, и восстановлена из него.
ТекстовыйФайлСнимка пригоден для анализа пользователем, ДвоичныйФайлСнимка используется для хранения промежуточных СнимокСтруктуры.

++++Лог
[Движок] имеет [Лог], в котором отражаются операции и состояния элементов СтруктураСущностей. Этот [Лог] можно использовать для отката ошибок, для анализа происходящих в [Движок] или СтруктураСущностей процессов, для отладки [Метод]ов. 

++++Хранение структуры сущностей
Каждому ЭлементСтруктурыСущностей соответствует строка в таблице в БазаДанныхСолюшена и представление в памяти.

СтруктураСущностей хранится в БазаДанныхСолюшена. 
    * Если БазаДанныхСолюшена серверного типа, то она размещается на СерверSQLБД. СерверSQLБД может быть локальным или удаленным - это не имеет значения. 
    * Если БазаДанныхСолюшена файлового типа, то она размещается в выделенном файле базы данных.
    * Если СолюшенБезБД, то БазаДанныхСолюшена не создается, а все данные СтруктураСущностей размещаются только в оперативной памяти компьютера, и могут быть сохранены в файл ПолныйСнимокСтруктуры или загружены из него.

Для хранения СтруктураСущностей во время работы используется  БазаДанныхСолюшена и оперативная память. На диске СтруктураСущностей хранится в БазаДанныхСолюшена. А если СолюшенБезБД, то в файле ФайлПолногоСнимка. 
ФайлПолногоСнимка имеет свойства ВерсияДвижка и ВерсияСолюшена. ВерсияДвижка означает строение ФайлПолногоСнимка. ВерсияСолюшена предназначена для поиска последней сохраненной копии данных.

++++Представление в памяти
Во время исполнения постоянные ЭлементСтруктурыСущностей загружаются из БазаДанныхСолюшена в оперативную память для ускорения работы. 
Временные ЭлементСтруктурыСущностей создаются в памяти во время работы системы и могут быть сохранены - стать постоянными.

Представления элементов ЭлементСтруктурыСущностей могут использоваться в двух вариантах:
А) использоваться как ярлыки к строкам таблицы, содержащим соответствующие данные элементов. В этом случае база всегда в согласованном состоянии, но работает медленнее. Этот способ для ячеек реализуется классом MCellA.
В) полностью загружаться в память, образуя цельное связное представление участка графа, что ускоряет выполнение операций, но увеличивает риск несогласованности базы при некорректном поведении.  Этот способ для ячеек реализуется классом MCellB.

++++Транзакции и откат изменений
Чтобы сохранять целостность  СтруктураСущностей, операции должны предусматривать возможность отмены изменений при сбое (То есть, поддерживать ТранзакцияСолюшена). Если отменить изменения невозможно, следует загрузить последнюю версию данных из ФайлПолногоСнимка. 
    * То есть, ФайлПолногоСнимка является точкой восстановления [Солюшен]а, и должен делаться регулярно так, чтобы обеспечить откат [Солюшен]а к последней точке восстановления.
        * Но ФайлПолногоСнимка не содержит ФайлРесурса итп, и не является поэтому реально способом восстановления Солюшена.
        * todo.концепция.сс: Обсудить создание точек восстановления Солюшена в КонцепцияСнимков. 

++++Загрузка структуры сущностей в контейнер
При обычной работе ячейки загружаются в контейнер из таблиц БазаДанныхСолюшена пооодиночке.
Массовая загрузка ячеек из таблиц БазаДанныхСолюшена в контейнер выполняется при загрузке из СнимокСтруктуры. 
    * Загружаем список ячеек в КоллекцияЯчеекКонтейнера, 
    * затем загружаем список связей каждой загруженной ячейки в КоллекцияСвязейЯчейки и в КоллекцияСвязейКонтейнера, причем в поля ссылок на ячейки пишем null, 
    * затем по идентификаторам ячеек в связях получаем ячейки из КоллекцияЯчеекКонтейнера,
    * последовательно проходим, записываем адрес ячейки в связь, записываем адрес связи в ячейку. Так пока все поля адресов ячеек не будут заполнены.
    * Хотя это тоже долго. Поля адресов связей в ячейке обязательны, а поля адресов ячеек в связи - нет, поэтому их можно записывать по мере использования.

++++Организация структуры сущностей
+++++Организация служебной части структуры сущностей
См. СлужебнаяЧастьСтруктурыСущностей.

+++++Организация собственно структуры сущностей
Всего пока есть несколько основных вариантов организации структуры сущностей:
1) КонцепцияТапп1. Создаем класс сущности, ее свойства обозначаем связями с другими классами. Затем создаем копию этой структуры для хранения объектов сущности.
2) Neo4J. Свойства сущности обозначаем типами связей, данные сущности храним в ячейках.
3) Тапп23. Сущности представляем ячейками. Отношения, как можем, представляем одиночными связями.

1 вариант удобен, если для всех деталей свойство представлено одним и тем же классом. Неудобен, когда свойство представлено объектами разных классов, которые не принадлежат общему суперклассу.
Удобен при прямом указании. Неудобен при косвенном указании. Косвенное указание это «В качестве основания применена керамическая статуэтка». Прямое указание: материал-алюминий.

2 вариант 
 +) не требует предварительного создания классов
 +) свойствами могут быть любые классы или несколько классов
 -) невозможно проверить типы данных свойств, поскольку нет четкого шаблона – что это.
 -) много типов связей будет.

Наверно, есть какой-то средний вариант, который :
- представляет семантические слоты свойств сущности
- обеспечивает гибкость и типизацию свойств.

Эволюционный подход:
1)	свойства просто прицеплены к сущности ассоциативными связями
2)	классификация поэтапная. Несоответствия обрабатываются отдельно, по мере обработки всей структуры. Часть связи остается нетронутыми, пока не будет найден подходящий способ организации.

Распознавание потока – подход
Свойства начально классифицируются, прицепляются и обрабатываются как см выше. Поток хранится и несет информацию для последующего анализа семантики. Остальное – как эволюционный подход.

Очевидно, цена и сумма денег относятся к одному и тому же суперклассу, но могут храниться раздельно. Это поскольку табличные данные уже прошли обработку и абстракцию, а реальная модель есть часть общей структуры.

Таким образом, сначала заносим все данные в ячейки, связываем их по варианту 2, потом проводим классификацию и переводим в вариант 1 то что возможно.







