++ Класс Файл Лога
[template: ШаблонКарточкиГлоссария]
Состояние: [В РАЗРАБОТКЕ] - переработать в связное описание сущности
Входит в: [//ПодсистемаЛога]

Представляет [//ФайлЛогаСолюшена] в ФайловаяСистемаСолюшена и в подсистеме [Лог]а.
Рассматривается ДвоичныйФайлЛога только.


+++Используется в
* todo.глоссарий.форма: Перечислите здесь страницы концепций, в которых используется сущность, и роль сущности в этой концепции. Например: Концепция Х - помывка слона.
 
+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
 todo.глоссарий.форма: Укажите здесь соответствующий класс кода проекта, если известен.
++++Свойства - данные
++++Методы

+++Дополнительная информация 
+++Файл лога - дополнить
* todo.концепция.лог: Для управления файлами ФайлЛогаСолюшена нужны операции создания, удаления, поиска. 
* done: Нужны правила именования файлов ФайлЛогаСолюшена.
* done.концепция.лог: Придумать нумерацию файлов ФайлЛогаСолюшена, которая нужна для ограничения их размера.  
    * Надо учитывать сессии СеансДвижка, нежелательно чтобы сессии занимали несколько файлов лога. 
    * Надо учитывать накопление файлов лога в каталоге - иногда это необходимо, иногда достаточно логов последних трех сеансов, а иногда и вообще незачем хранить лог сеанса - его надо удалять после окончания сеанса.

Файл лога хранит события в течение СеансЛога (СеансДвижка).
* ФайлЛогаСолюшена содержит ШапкаФайлаЛога и последовательность ЗаписьЛога.
* Группировку записей по СеансПользователя (по ИдентификаторСеансаПользователя) делает код из ИнтерпретаторЛога. Он превращает ЗаписьЛога в объекты и выдает их вызывающему коду.
* Фактически, файл лога это база данных, с быстрой вставкой и медленным получением.
Совсем сделать его на БД вроде sqlite нельзя, так как БД будет жрать память процесса (На индексы, кеши запросов, итд), а ее всегда не хватает.
    * С механизмом транзакций ТранзакцияСолюшена и многопользовательской концепцией это уже не набор независимых записей, а дерево транзакций. Все файлы лога связаны друг с другом ссылками от более поздних к более ранним записям.
* Обработка и поиск в логе будут медленными, но это и не предполагается часто использовать.
* ФайлЛогаСолюшена представлен некоторым С#-классом, который выполняет работы, относящиеся к файлам лога и их содержимому.
* Все ФайлЛогаСолюшена текущего СеансЛога должны храниться в соответствующей ПапкаСеансаЛога.

++++Номер файла лога
* НомерФайлаЛога это порядковый номер ФайлЛогаСолюшена внутри СеансЛога (ПапкаСеансаЛога).
    * НомерФайлаЛога начинается с 1. Это целое число от 000 до 999, дополнять нулями до 3 знаков. Его следует хранить в памяти МенеджерЛога, назначать = 1 при создании СеансДвижка и инкрементировать при создании нового файла лога внутри сеанса. Это проще, чем извлекать его из имен файлов (другой способ).

++++Название файла лога - дополнить
См. НазваниеФайлаЛога.

++++Создание и открытие файлов лога - дополнить
* Проблема: Обычно файл лога открывается только на монопольную запись. 
Но здесь предполагается чтение лога для отработки транзакций ТранзакцияСолюшена. 
Эти транзакции не изменяют лог, но файл нужно читать.
Значит, его нужно открывать и на запись и на чтение.
Транзакции ТранзакцияСолюшена могут быть вызваны в любой момент, и чтение файла может потребоваться в любой момент.
И не только текущего файла, но и предыдущих.
    * todo.концепция.лог: Проработать вопрос доступа к файлу лога на чтение и запись из разных ридеров и вритеров.
* При открытии файла лога надо считать ШапкаФайлаЛога и проверить:
    * ВерсияПодсистемыЛога - должна быть совместимой с той, что есть в Движок. Иначе ФайлЛогаСолюшена не будет правильно читаться.
    * todo.концепция.лог: Добавить проверки здесь... 
++++Закрытие и Ограничение размера файла лога - дополнить
* Максимальный размер ФайлЛогаСолюшена не должен превышать 2 Гб.
* Размер файла лога надо проверять при:
    * добавлении записи в лог
    * Открытии лога
    * еще где-то?
* Где останавливать файл лога? Есть некий установленный размер файла лога, например, 2 гб.
    * todo.концепция.лог: Этот предел размера файла лога надо прописать в НастройкиСолюшена. 
* Варианты:
    * СеансДвижка закрывается, размер файла лога  менее 2гб.
        * Закрыть файл лога, не завершая его.
    * СеансДвижка закрывается, размер файла лога примерно 2гб.
        * Завершить файл лога и закрыть его.
    * Добавляется запись, СеансДвижка не закрывается, размер файла лога около 2гб
        * Добавить запись, завершить файл лога, открыть новый файл лога.
* То есть, размер файла лога получается около 2гб или менее?
* Можно оценивать размер записи - если вместе с файлом она будет более 2гб, то завершать файл лога и открывать новый, в него и писать эту запись. Тогда размер файла лога точно не превысит 2гб.
    * Тогда для каждой записи надо легко получать размер текущего файла лога.
        * Это легко - размер можно взять из объекта Writer-а файла. 
* Как реализовать завершение файла лога? Ссылкой на следующий файл лога? Это уже где-то тут есть, про деревья версий логов.
    * Нет, деревья версий - это для снимков только, пока что.  
    * todo.концепция.лог: Надо это все увязать в один процесс.

++++Чтение файла лога - дополнить
* ФайлЛогаСолюшена представлен некоторым С#-классом, который выполняет работы, относящиеся к файлам лога и их содержимому. Однако, из-за большого размера файла лога нельзя собрать все его записи в список в памяти. Тут надо использовать другие способы доступа к записям. Читать их через поток, наверно, как-то. 
    * todo.концепция.лог: Определить оптимальный способы работы с большим файлом лога.
    * Можно предложить создать енумератор записей, и работать с записями лога как с потоками. Но насколько это будет производительно? И есть проблемы с одновременными чтением и записью в лог. Хотя записи в середину лога не будет, только в конец, но все же это надо продумать.
    * Есть идея реализовать чтение Записей файла лога через паттерн Итератор. Это для foreach, только можно вверх или вниз перемещаться. Такой итератор будет навешиваться поверх потока файла лога, как StreamReader это делает.
И просто переходить от одной записи лога к другой. Правда, классов дополнительных для этого надо много создавать.
А сама Запись лога должна предоставлять поток для чтения или записи данных ассоциированных объектов. Возможно, таких объектов будет несколько. Тогда писать в эти потоки придется строго по очереди. Это сложно контролировать, лучше избегать такого.
    * См. Итератор: [file:///V:/МоиПроекты/ДвижокТапп/Материалы/Построение итератора.zip]
  

++++Ограничение общего размера лога - дополнить
* Если общий размер КаталогЛоговСолюшена превышает установленный предел, или место на диске закончилось, то надо удалить файлы старых сеансов лога. Начиная с самых старых сеансов, постепенно, по мере потребности.
* Удалять допускается только сразу все файлы сеанса - весь сеанс целиком, вместе с ПапкаСеансаЛога.
    * После удаления сеанса лога надо скорректировать содержимое Итератора в части СеансЛога - либо пересчитать сеансы, либо просто удалить сеанс из этого списка Итератора. 
* А если файлы лога внутри текущего сеанса Движка не помещаются на диск, а других сеансов нет, удалять нечего, то как тогда быть? done.концепция.лог: Тут надо перечислить варианты и выбрать лучший.
    а) *Выбрано:* Вывести сообщение об ошибке и Завершить работу Движка.
    б) Удалить самый старый файл лога в текущем сеансе и продолжить работу - Неприемлемо, так как нельзя будет откатить ТранзакцияСолюшена, начатые в этом файле. И еще много чего нельзя будет, поскольку СеансЛога это множество взаимосвязанных ФайлЛогаСолюшена.
