++ Концепция Методов
[//В РАЗРАБОТКЕ]
++++Описание концепции
Описывает подсистему методов.

+++Состояние
* Тут много и мусора и всяких набросков, так как вообще вся эта концепция СтруктураСущностей не отработана толком, а я в нее пытаюсь еще впихать многоконтейнерность, многопользователей и исполнение методов. И весь этот клубок непроработок мешает друг-другу, порождая множество вариантов решения и проблемы с каждым вариантом.
    * Эту всю кучу надо разделить на варианты решений, и прорабатывать отдельно. 
    * На этот разбор и наведение порядка мне не хватает памяти и вычислительной мощности.
    * Даже методы из кода, самые в этом плане простые, требуют некоторой типовой структуры ячеек описания  метода. Ее потом легко перенести на прочие типы методов.
* Тут есть еще старые тексты Тапп2 с КТА. Надо решить, нужен ли КТА и как его использовать в новой концепции. 
* Это все будет очень долго и трудно пилить и переваривать на факты и решения.


+++Сборки

СтруктураМетодов - множество методов, связанных отношениями абстракции и агрегации.

* СборкаКТА - понятие из Тапп2, но вдруг пригодится зачем-нибудь?

* СборкаСемантическийСлот

* СборкаМетод1

* СборкаМетодГраф1

* СборкаМетодИзКода1

* СборкаМетодСкрипт1

* СборкаАргументМетода1	- представляет АргументМетода. 

* СборкаАлгоритмМетода

СборкаУстройствоМетода1

СборкаИсполнениеИОткатМетодов1

СборкаВидыМетодов1

СборкаОбработчикиЯчеек1

СборкаРазныеКонцепцииОМетодах1

СборкаМетодыВСтарыхВерсияхТапп

СборкаДиалоговоеОкноВМетоде

СборкаСписокТиповОтношенийВМетодах

+++Общее описание
Метод выполняет некоторую операцию, принимает аргументы АргументМетода и возвращает результаты РезультатМетода.

todo.концепция.методы: Нужно разработать общую концепцию [Метод]ов, МетодОбработчикЯчейки и СемантическийСлот слотов.

Методы являются самостоятельной сущностью, могут быть организованы в собственную структуру, могут вызываться через связанную с ними ячейку-сущность или индивидуально, по НазваниеМетода или ИдентификаторЯчейки ГоловнаяЯчейкаМетода. 
Метод также может быть выбран и вызван при помощи ИерархияМетодов,  этот вариант не изучен, но представляется перспективным, поэтому в архитектуре намечена его поддержка.

++++Виды методов
Предполагается разделить все операции с элементами на базовые(неизменяемые) и модифицируемые. 
Базовые реализуют низкоуровневые операции, изменяемые состоят из базовых и позволяют индивидуальное поведение для каждого элемента.
Например, каждый тип связи может проводить собственные проверки и обработку операций создания/удаления/...
Типы связей можно добавлять, удалять, изменять, модифицировать операции со связями.

++++О представлении методов отношениями
* ОПредставленииМетодовОтношениями - важная тема. Надо разрабатывать усиленно.

++++Устройство сборки
* Сборка содержит классы, пригодные для Солюшена.
* Классы содержат методы, пригодные для Солюшена.
* Сборка также может содержать *косвенные* классы и их методы, используемые в методах Солюшена.
* Сборка должна храниться в КаталогМетодовСолюшена.
* Также в КаталогМетодовСолюшена могут располагаться *косвенные* сборки, используемые в методах Солюшена.
* Сборки, классы, методы помечены специальным атрибутом, который обозначает предназначение элемента для использования в подсистеме методов Солюшена. Эта схема была опробована в Тапп2 и оказалась удобной для указания кода метода пользователем через гуй. Такой атрибут содержит также степень завершенности кода метода, это уменьшает путаницу внутри сборки, когда часть методов отлажена, часть требует отладки, часть только обозначена. Пользователь снаружи сборки понимает, какие методы уже можно подключать к структуре сущностей, а какие еще требуют доводки.
* Косвенные сборки, классы и методы не помечаются таким атрибутом, поэтому не могут быть выбраны в качестве кода методов. Но могут использоваться в алгоритме кода методов. 

++++Хранение сборок методов
* Сборка должна храниться в КаталогМетодовСолюшена.
* Сборка имеет название, оно нужно для пользователя.
* Пользователю придется создавать сборку, добавлять ее в Солюшен, потом метод из нее указывать в ячейке метода.
Все это делается вручную.
* Можно именовать сборки уникальным номером, например, Сборка.1.dll. Внутрь сборки нельзя записать информацию о номере, поэтому остается только добавить уникальный номер в название сборки.
* В Тапп Бар методы не используются, но надо предусмотреть некую начальную их поддержку.
* Номер для новой сборки не хранить в НастройкиСолюшена, а высчитывать из имен файлов сборок в КаталогМетодовСолюшена при первом его требовании.
* Операции со сборками должны Установить (Добавить либо Заменить) и Удалить сборку.


++++Версии сборок методов
Сборки придется различать по версиям. Если сборки вообще будут применяться, то они должны будут совершенствоваться.
Хотя можно завести рядом в той же сборке улучшенную версию того же класса. 
Общая проблема со сборками в том, что они должны будут дополняться по мере выявления потребностей.
А как это дополнение выглядит в существующих обстоятельствах?
Сборка собирается из исходников. Сначала собираются требования к методу, потом пишется сам метод. Потом сборка компилируется, устанавливается в солюшен. Потом сборка отлаживается. Иногда долго. При этом сборка несколько раз перекомпилируется, версия в Солюшене заменяется на новую, каждый раз.
В итоге, сборку в Солюшене надо *заменять*, как обновлять.
Но и при этом, возможно, все же придется держать в Солюшене одновременно несколько сборок разных версий.






