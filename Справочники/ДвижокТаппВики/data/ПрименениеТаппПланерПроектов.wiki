++ Применение Тапп Планер Проектов
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=ПрименениеСистемыКакПланерПроектов

Рассматривается применение системы как средства планирования проектов.
* Для проектов нужны ресурсы. Типы ресурсов можно взять из существующих менеджеров.
* Для ресурсов нужны работы по хранению, содержанию, учету.
* Если представить проекты в виде графа, то не придется постоянно сводить все требования воедино.
* Таким образом, каждый проект, ресурс, задача объединены в граф. Это позволяет одновременно поддерживать порядок, актуальность, автоматизировать операции, с минимумом усилий.
* Проект программы в общих чертах уже разработан, проблема в удобном пользовательском интерфейсе для просмотра и построения структуры.

+++Наброски
Задачи могут требовать завершения других задач, наличия-появления ресурсов, итд.
Чтобы автоматизировать этот процесс, надо как-то описывать эти зависимости, причем легко и наглядно. Запускать проверки событиями - завершение задачи, изменение состояния ресурса - доступности, количества, итд.
То есть, описав что для начала работы над задачей нужны ресурсы р1, р2, р3, и собрав таким образом граф задач, изменение состояния ресурса приводит к проверке доступности задач. Соответственно, доступные задачи становятся актуальными для выполнения. Однако это не показывает необходимость ресурсов для задач, если только не представить добычу ресурса как задачу.
Следовательно, выполнение проекта начинается с задач добычи ресурсов для выполнения задач проекта. Их выполнение приводит к появлению ресурсов и соответственно к проверке доступности других задач.
Тут задача - поскольку ее выполняет пользователь, ему нужно время для выполнения задачи. Время это тоже есурс но не учитываемый так как материальные ресурсы.
Для ресурсов могут быть блокировки/резервирование.
* по количеству. Задача А резервирует для себя 30 единиц ресурса. Задача Б не может быть выполнена, так как всего имеется  35 единиц ресурса, а ей необходимо 10. Соответственно проверка ресурса показывает пользователю, что ресурс есть, но резервирован для задачи А. Соответственно, задачи должны разделяться по приоритетам, но эти приоритеты и накладываемые ограничения должны быть визуально доступны пользователю, чтобы он мог пересмотреть приоритеты при желании.
* по другим причинам . Могут быть выявлены в процессе разработки темы.

То есть, проект начинается с желания пользователя иметь некоторую сущность или, вернее, ситуацию. Процесс создания этой ситуации определяется, исходя из опыта пользователя. То есть, это первичная задача - создать ситуацию. Она может быть выполнена одним из известных пользователю способов. 
Таким образом, первая неявная задача проекта - создать алгоритм решения задачи проекта. Для этого надо выбрать способ и методику, это пока не рассматриваем...
В результате выполнения этой задачи получается алгоритм, состоящий из одной или более задач. Каждой задаче требуются ресурсы. Каждый ресурс получается при помощи своей задачи, и так вложенность задач завершается задачами, для которых уже есть необходимые ресурсы.
Поскольку условия с течением времени меняются, то незачем строить сразу полный алгоритм задач - можно создать алгоритм из верхних задач, а потом каждую из них достраивать по мере выполнения проекта. Каждую задачу анализировать, разбивать на подзадачи, выполнять.
В результате анализа получается список задач для анализа и выполнения. Каждой задаче требуются ресурсы, поэтому можно использовать события изменения состояния ресурса, или события завершения задачи, для выполнения проверок и прочих действий.
То есть, мы строим такой граф подобно цепи Маркова. Доступность всех ресурсов позволяет начать задачу. Хотя все ресурсы нельзя выявить и описать, но методику надо же как-то совершенствовать.

То есть, получается так:
* есть БД ресурсов. Ресурсы - это материалы, люди, документы, решения, в общем все что можно представить сущностью.
* есть описание задачи. В него входят также список необходимых ресурсов с количеством и характеристиками, описание выходного ресурса-результата, его характеристики, примерный алгоритм, контекст задачи, вспомогательная информация.
* есть БД всякой информации для принятия к сведению, для формирования контекста задачи, для принятия решений
* есть алгоритмы предыдущих задач, представляющие опыт пользователя. Из них можно выбрать подходящие задачи как шаблоны для постройки нового алгоритма.
* есть проект - как совокупность задач, как контейнер для задач.
* задача включает в себя подзадачи, как алгоритм, где задачи - вызовы функций, а ресурсы - данные.
* можно ожидать шаблонные задачи и их решения в каждом проекте. Из таких шаблонов легко собирать алгоритм, и потом проще планировать решение задач.
* изменение ресурса вызывает событие пересмотра задач на предмет их готовности к выполнению. Другие события тоже.
* Связывание задач идет через алгоритм более верхней задачи. То есть, событие начала выполнения задачи блокирует ресурсы, необходимые для этой задачи а завершение выполнения задачи перезапускает поиск задач, готовых к исполнению.
* так, пользователь сначала собирает БД ресурсов, БД фактов, потом заводит проект, разрабатывает алгоритм решения задачи из модулей-задач, ресурсов, итд, указывает факты, собирает контекст задачи.
* факты есть следствие выполнения задач, их можно искать по БД, по ключевым словам, итд. Факты могут содержать файлы ссылки на сущности, итд.
* Затем пользователь начинает выполнение проекта и программа работает интерпретатором алгоритма, выдавая задания и описания пользователю и принимая от него факты и ресурсы, возникающие при решении задачи. Потом следующая задача и так далее. Пока я такой системы не знаю.

+++Сроки задач
Задачи могут быть привязаны к моменту времени - начать в, начать до, окончить в, окончить до. Это тоже надо описывать при создании задачи. 
Вообще, задачи можно рассматривать как параллельные потоки и применять похожие механизмы синхронизации. Это надо обдумать.    

То есть, это получается последовательность ситуация-задача-ситуация-задача-ситуация-... Если ситуацией считать совокупность состояний ресурсов, а задача изменяет состояние ресурсов, то есть, изменяет ситуацию. То добавив автоматический анализ, предсказание и планирование, получаем искусственный интеллект. Только он делать ничего не может, но может планировать действия, такой консультант получается.

+++Факты
Факты можно собирать из прочитанной литературы, интернет-источников, и обязательно оценивать их достоверность и указывать ссылку на первоисточник. Википедия и другие энциклопедии как источник фактов, но их надо переводить в формат фактов. 
todo.концепция.применение: Надо заняться фактами - как их представлять, что уже по ним в мире наработано, как их добывать и откуда.
Факты при добавлении надо снабжать тегами для удобства поиска, и желательно сохранять контекст. Для этого всего требуется индексатор подобно поисковику, но на локальной машине и в интернете. 
todo.концепция.применение: поискать программы для индексирования в интернете и на локальном диске.
Надо формировать хранилище фактов по разным областям. Надо формировать хранилище документов для поиска фактов и создания контекста задачи. 
todo.концепция.применение: Факты можно уже собирать, они все равно пригодятся когда-нибудь.


+++Далее
Итак, система состоит из:
* БД ресурсов. Ресурсы будут разных типов. У разных ресурсов разные свойства, поэтому интерпретировать их все однообразно не получится. Одинаковые поля будут, но их недостаточно для эффективного представления ресурса некоторого типа.
* БД фактов и механизмы для их обработки (добавления, извлечения из текстов, поиска, формирования конструкций).
* БД проектов и их задач. Такая графовая структура, состоящая из задач, их адгоритмов, описаний текстовых итд.
* В каждой такой БД кроме собственно сущностей, еще полезны будут абстракции, классы сущностей и прочие механизмы.

Для совершенствования этой модели надо прорабатывать и эксплуатировать опытную структуру. Предлагается создать вики-структуру для этого. Затем постоянно наполнять ее ресурсами, проектами, задачами, фактами, записывать возникающие идеи, совершенствовать представения элементов и структуру системы, чисто практически использовать. После того, как все это обретет устоявшийся порядок, надо проанализировать работу и устройство, и выработать практически пригодную концепцию системы. После этого можно планировать реализацию системы в коде.

Если каждую подсистему реализовать на движке Тарр как контейнер, то можно будет их взаимоиспользовать, и эксплуатировать многоконтейнерную систему через сетевой интерфейс.
Тут однако проблема в том, насколько окупится создание такой системы. Если только для себя, то задачи должны быть достаточно масштабныи. Если еще для кого-то, то как это организовать и получать с этого пользу? А именно, как  получать с пользователей деньги? Никаких вариантов не просматривается совершенно.