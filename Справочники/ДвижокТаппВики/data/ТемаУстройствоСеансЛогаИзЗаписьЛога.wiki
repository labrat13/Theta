++ Тема Устройство Сеанс Лога Из Запись Лога

Надо разработать схему устройства СеансЛога из ФайлЛогаСолюшена. 
Надо разработать всю схему устройства СеансЛога из СообщениеЛога.

Тут получается несколько устройств:
- устройство СеансЛога из ФайлЛогаСолюшена, ИтераторЛога.
- устройство ФайлЛогаСолюшена из Шапка файла Лога  и ЗаписьЛога.

Чтобы тему прояснить, надо сначала переработать материалы в КонцепцияЛога. Там много уже готовых идей и решений, и есть такие, которые надо тоже учитывать. А тут я только могу описать то, что помню. Да еще натаскать материалов из разных мест и делать всю работу дважды, собирая из них что-то пригодное.

++Устройство СеансЛога из ФайлЛогаСолюшена
* [//КаталогЛоговСолюшена] содержит много ПапкаСеансаЛога, которая содержит много ФайлЛогаСолюшена, который содержит [//ШапкаФайлаЛога] и много ЗаписьЛога.
* [//ИтераторЛога] позволяет перемещаться по этим ЗаписьЛога и ФайлЛогаСолюшена и СеансЛога вперед и назад.
* [//ИтераторЛога] используется только для чтения, и не может изменять эти данные или дописывать новые.
* В ИтераторЛога сделать функцию Найти Файл лога по ИдентификаторЗаписиЛога.
* Итератор должен иметь функцию получения ЗаписьЛога по ее ИдентификаторЗаписиЛога
* Не сделать ли ИтераторЛога отдельным классом в составе МенеджерЛога?
    * Пока сделаем просто группой функциональности в МенеджерЛога. Потом если все будет гладко, перенесем в отдельный класс/объект и сделаем доступ к нему через проперти.
* Как ИтераторЛога в СеансЛога будет собирать список Файлов Сеанса лога, когда создаются новые ФайлЛогаСолюшена?
    * При создании нового ФайлЛогаСолюшена его надо включить в объект СеансЛога ИтераторЛога. Или перечитать заново весь СеансЛога, если так будет проще. 

++Устройство ФайлЛогаСолюшена из Шапка файла Лога  и ЗаписьЛога

Записи лога будут храниться подобно записям в ФайлСнимка - последоватеьными секциями.
+++1
Записи лога в файле лога надо организовать в двусвязный список, чтобы можно было переходить по этому файлу и вперед и назад. Для этого надо в каждой записи иметь ссылку на предыдущую и следующую?
    * Можно использовать смещения относительно начала файла подобно адресам в памяти.
    * Можно каждую секцию ЗаписьЛога оформлять заголовком, и относительно него считать смещения в файле для передвижения вперед и назад.
    * Для перемещения вперед надо в заголовке секции хранить размер секции для перехода на заголовок следующей секции.
    * Для перемещения назад надо либо в заголовке текущей секции хранить смещение для перехода к заголовку предыдущей секции. Либо в формат секции добавить еще и признак окончания секции - хвостовик секции, и перед ним хранить смещение для перехода на заголовок секции. То есть, это получится действие подобно переходу вперед, симметричное - тоже маркер, но конца, а после него - смещение для перехода на заголовок секции. 
        * Второе решение проще первого - надо просто в содержимое секции вставлять данные о ее длине и в начале и в конце секции. Их легко вычислить сразу, и в блок данных секции ничего потом не надо дописывать. 
    * Тут проблема в том, что сообщение лога тоже надо читать. Хотя, возможно, не полностью, но чтобы определить что оно содержит. И вот исходя из этого, надо решить, как добыть из сообщения ссылку на предыдущее сообщение лога.
    * todo.концепция.лог: Надо составить диаграмму - строение файла лога. И на ней показать, как реализовать эту навигацию по файлу лога. 

+++2
* См ШапкаФайлаЛога и ЗаголовокСнимка - выявить свойства для заголовка файла лога.
* Лучше посмотреть код проекта Тапп - там больше полезного материала и готовых решений.

+++3
См ЗаписьЛога, СообщениеЛога.
* Лучше посмотреть код проекта Тапп - там больше полезного материала и готовых решений.

++Строение файла снимка из старого кода проекта

+++поля менеджера снимков
* private int m_step;    шаг для файла, номер версии данных. Аналог здесь: ВерсияСолюшена.  
* private MEngine m_containerRef; - ссылка на контейнер для доступа
* public const UInt64 SnapshotFileSignature = 0x313033324152454D;  //MERA2301 - сигнатура файла снимка.

+++Общая структура файла снимка
* шапка файла снимка MSnapshotFileInfo
* секция контейнера из интерфейса сериализации
* секция ячеек из памяти
* секция ячеек из таблицы БД
* секция связанных (внешних) ячеек
* секция связей (из памяти и таблицы)(?)
* секция конца снимка

+++универсальная запись секции файла
1 1 байт Тип секции из енума Тип Секции.
2 8 байт размер секции - перезаписывается в конце функции
3 4 байт число записей в секции - перезаписывается в конце функции 
4 2 байт CRC16 секции - перезаписывается в конце функции
5 собственно записи элементов как последовательность секций.
6 признака конца секции нет

+++структура шапки файла снимка
Интересно, что он не поддерживает интерфейс сериализации, хотя должен бы.
1 8 байт UInt64 SnapshotFileSignature
2 4 байт размер секции - перезаписывается в конце функции
3 4 байт число ячеек в памяти
4 4 байт число ячеек в таблице
5 4 байт число временных ячеек
6 4 байт число внешних ячеек
7 4 байт число связей в памяти
8 4 байт число связей в таблице
9 4 байт число временных связей
10 4 байт число внешних связей
11 4 байт число файлов ресурсов
12 8 байт общий размер файлов ресурсов
13 4 байт версия движка
14 4 байт подверсия движка
15 4 байт версия структуры
16 1 байт тип снимка (полный или краткий)
17 ? байт строка имени проекта - сама предваряется длиной строки. Но из-за переменного размера строки надо размещать в конце блока данных.
18 ? байт строка описания проекта.
19 2 байт CRC16 чексумма блока данных


+++структура записи ячейки
Интересно, что сериализация реализована только в MCellB. MCellA создает временный объект MCellB и из него вызывает функцию сериализации.
1 1 байт тип секции     
2 4 байт длина секции - перезаписывается в конце функции
3 8 байт ид ячейки            
4 1 байт режим ячейки           
5 ? байт строка имя ячейки   
6 8 байт  ид ячейки состояния ячейки  
7 8 байт  ид ячейки типа ячейки    
8 8 байт  ид ячейки типа значения ячейки  
9 4 байт  размер блока данных ячейки 
10 ? байт блок данных ячейки 
11 ? байт строка описания ячейки 
12 1 байт флаг активности ячейки 
13 8 байт время создания ячейки   
14 8 байт время изменения ячейки     
15 1 байт поле только чтение ячейки       
16 4 байт сервис-флаг ячейки            
17 2 байт CRC16 чексумма секции           

+++структура записи свяи и контейнера - несущественно сейчас
Они не сделаны потому, что я устал, они устроены подобным же образом, и это все равно сейчас не нужно.

+++Выводы
* это оптимизировано для последовательного чтения от начала к концу. Запись или чтение в обратном порядке не предполагается.
* строки надо помещать в конец набора полей секции.
* булевые флаги записываются одним байтом сами.
* Енумы надо переводить в байты, если их размер позволяет (обычно да).
* Есть поля, которые надо перезаписывать, возвращая на них позицию записи файла.
* ИД ячейки связи контейнера записывать 8 байтами. А информация о типе элемента уже есть в самом типе секции.
* Желательно реализовать секции объектами, хотя бы временно - так проще их читать и выводить. В старом коде это было сделано функциями, и они содержали много одинакового кода.
* все эти классы придется переделать для новой версии Тапп Бар. И какой смысл в отдельной сборке модуля лога, если под него придется переделывать Движок?
    * Потом проще вводить новые фичи при сохранении интерфейса Движок - Модуль лога. Не придется весь движок переделывать, а то иногда хочется что-то по ходу подправить, а потом все запутывается. А тут движок отдельно, модуль лога отдельно.
 


 