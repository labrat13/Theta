++ Сеансы И Транзакции В Логе
[//В РАЗРАБОТКЕ]
Описывает пользователей, сеансы и транзакции в логе.

+++Общее представление.
* Отрезок времени между созданием объекта Движок и уничтожением объекта Движок называется СеансДвижка.
* Отрезок времени между Открытием Солюшена и Закрытием Солюшена называется СеансЛога. Это потому, что только в солюшене ведется лог Движка. Это старый термин из старой концепции, в ней предполагался только один пользователь, монопольно использующий Солюшен и Движок. А сейчас этот термин только вносит путаницу в концепцию. Его надо почистить. Заменить на СеансСолюшена.
* Отрезок времени между подключением пользователя к Солюшену и отключением пользователя от Солюшена называется СеансПользователя. Если у солюшена только один пользователь, то СеансПользователя почти полностью совпадает с СеансЛога и СеансДвижка. Почти, потому что Закрытие Солюшена может потребовать длительного времени на неизвестные пока работы.
Если у солюшена несколько пользователей, их сеансы могут перекрываться или не перекрываться. 
* ПодсистемаЛога инициализируется при открытии Солюшена и завершает работу в конце закрытия Солюшена. Соответственно, СеансЛога содержит сведения о начале и конце всех СеансПользователя. СобытиеЛога Начало или  Завершение СеансПользователя записываются в лог как СообщениеЛога (логически), как ЗаписьЛога физически. Это просто разные термины для разных аспектов восприятия. Тут бардак, и эти все термины надо как-то сократить. 
* Пользователь начинает СеансПользователя, запрашивая КонсольПользователя. КонсольПользователя это прокси-объект, который содержит данные СеансПользователя и сам их подставляет при выполнении операций [Движок]а. Таким образом, пользователь работает с более простой системой, чем она есть на самом деле.  Пользователь работает с КонсольПользователя как с [Движок].
КонсольПользователя предоставляет пользователю доступ к функциям [Движок], и это место, где можно реализовать разделение доступа и проверку и синхронизацию данных, доступ по сети, итд.
* В ходе работы Пользователь может начать ТранзакцияСолюшена. Это средство группировки операций Движок, с возможностью их подтверждения, отката или даже повтора. ТранзакцияСолюшена покрывает весь Солюшен, а не только БазаДанныхСолюшена или СтруктураСущностей. Поскольку это транзакция, начатая некоторым пользователем, она записывается в лог как ТранзакцияПользователя, наполненная соответствующими данными.
* Транзакции могут вкладываться одна в другую. Нельзя принять или откатить некоторую транзакцию, не приняв или не откатив вложенные в нее транзакции.
* Для принятия, отката или подтверждения ТранзакцияСолюшена в Движок должны быть предусмотрены соответствующие операции.
* Для повтора ТранзакцияСолюшена пока нет операции - не ясно, как это организовать - эта часть концепции пока не продумана.
* Собственно СеансПользователя сам является транзакцией базового уровня вложенности, и его весь тоже можно откатить.
* Итак, операция [Движок]а, вызванная пользователем, записывается в лог как ЗаписьЛога, которая является частью ТранзакцияПользователя, которая является частью СеансПользователя, который является частью СеансЛога.
* Цепочка объектов еще длиннее: Движок.МенеджерЛога.КоллекцияСеансовПользователей.КонсольПользователя.СеансПользователя.КоллекцияТранзакцийПользователя.ТранзакцияПользователя А вот ЗаписьЛога не хранятся в памяти, поскольку незачем. 
* В этом механизме транзакций можно реализовать блокировку одновременного доступа (записи или чтения) разных пользователей к одному и тому же Элементу Солюшена на время действия транзакции. Но пока это не предлагается реализовывать, поскольку это слишком сложная система получается. В будущем можно попробовать. Хотя из-за сильной связанности СтруктураСущностей это не позволит совершенно избежать проблем. 
* При окончании работы пользователь должен Закрыть сеанс пользователя. При этом выполняется завершение СеансПользователя и зависимых от него объектов.
* Затем надо Закрыть Солюшен, если нет других пользователей. Но это будем рассматривать отдельно.  

++ Сеансы В Логе
Описывает организацию сеансов всех типов.



++ Транзакции В Логе
Описывает реализацию транзакций с помощью лога.



++Материалы
* У Тапп может быть несколько одновременных пользователей, поэтому несколько одновременных СеансПользователя. Поэтому не получится прямо в логе группировать записи лога в СеансПользователя.
Вместо этого в каждой ЗаписьЛога будем указывать ИдентификаторСеансаПользователя, непосредственно или косвенно.

++++Идеи и положения - С2
* todo.концепция.лог: извлечь из текста положения и идеи и перенести их сюда.
* Лог разбить на сеансы работы Движка СеансДвижка.
* Внутри СеансДвижка может быть несколько сеансов пользователей. Начинаться и завершаться. вперемешку.
* Каждая ЗаписьЛога должна содержать ИдентификаторСеансаПользователя. Даже пока пользователь всего один. И один бот - [Оптимизатор].
* Файлы ФайлЛогаСолюшена создавать в пределах СеансДвижка, а не сквозными, как ранее предполагалось.
    * Так проще будет удалять файлы. По границам сеанса.
    * Целесообразно удалять не отдельные файлы, а целиком СеансЛога, так как точки между сеансами предполагается сохранять в  ПолныйСнимокСтруктуры. И туда можно откатиться, просто загрузив этот ФайлПолногоСнимка.
        * Но создание ПолныйСнимокСтруктуры не должно автоматически приводить к закрытию сеанса и созданию нового сеанса. Снимок может быть сделан с другими целями, а не как ТочкаСохранения СтруктураСущностей. 


