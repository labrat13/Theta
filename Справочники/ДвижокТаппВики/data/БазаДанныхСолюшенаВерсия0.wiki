++ База Данных Солюшена Версия0
[template: ШаблонКарточкиГлоссария]
Состояние: [В РАЗРАБОТКЕ]

todo.глоссарий.форма: Опишите определение сущности здесь.


+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
 todo.глоссарий.форма: Укажите здесь соответствующий класс кода проекта, если известен.
++++Свойства - данные
++++Методы

+++Дополнительная информация
* См. РаботаСУБД
* См. ПредставлениеЯчейкиВБд
* См. [//ПредставлениеДанныхВПамятиИБд] 
* См. ЗапросыБД
* См. 

* Нельзя спроектировать таблицы и интерфейс БазаДанныхСолюшена, пока не определено устройство описателя прав пользователей.

++++1
Источник wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=БазаДанныхПроекта
[//ДОПОЛНИТЬ]
Обобщенное устройство базы данных, в которой хранятся элементы структуры проекта.

+++++Описание
База данных может быть различных типов - предполагаются MySqlСУБД и MsSqlСУБД. Эти системы имеют различия, поэтому нужно создать оболочки-адаптеры, реализующие стандартный интерфейс для работы с БазаДанныхСолюшена.
БазаДанныхСолюшена состоит из таблицы ячеек и таблицы связей.
Предполагается, что в таблице ячеек будет до 10млн записей, в память контейнера можно будет одновременно загрузить около 1 млн ячеек. 

+++++Заметки
* Сейчас можно создать только общую концепцию системы, так как не определены поля ячеек и связей.
* [Лог] должен инициализироваться раньше, чем подсистема БазаДанныхСолюшена и вообще лучше самым первым - чтобы в него писать остальные действия.
* Для вывода в [Лог] пока можно создать функцию-местодержатель, а после определения концепции переписать весь код.
* В классе SqlConnection есть событие StateChange изменение состояния соединения. Это событие и старое и новое состояния соединения нужно вывести в [Лог]. Также если соединение закрылось, по этому событию его можно открыть через несколько (5) секунд. Для всего этого на событие надо навесить обработчик. Навесить в процессе инициализации подсистемы БазаДанныхСолюшена. Снять перед закрытием соединения в процессе деинициализации подсистемы БазаДанныхСолюшена. Это для того, чтобы если в процессе работы с БД произойдет крупная ошибка, соединение с БазаДанныхСолюшена автоматически закрывается, и дальнейшие операции невозможны - надо открывать соединение. Обработчик события автоматически откроет соединение через установленное время, и код будет продолжать работу.
* В классе SqlConnection есть событие InfoMessage сообщения о предупреждении при исполнении запросов. Их надо вывести в [Лог] для отладки. Для всего этого на событие надо навесить обработчик. Навесить в процессе инициализации подсистемы БазаДанныхСолюшена. Снять после закрытия соединения в процессе деинициализации подсистемы БазаДанныхСолюшена.
* StateChange - событие смены состояния соединения. Можно отлавливать события закрытия соединения при ошибках, и затем его открывать. Типично у нас соединение открыто постоянно, но при некоторых ошибках оно закрывается, и нормальная работа дальше невозможна. Можно перед каждой операцией проверять, что соединение открыто, а если нет, то открывать. А можно повесить обработчик и автоматически переоткрывать соединение через некоторый промежуток времени (5с, например). Также следует выводить в [Лог].

++++Astra
Sql Server
Сюда записывается информация по СерверSQLБД, важная для проекта.
•	Является основным хранилищем данных проекта.
•	Поддерживает транзакции, можно вкладывать транзакции, но при откате откатывается вся первая транзакция.
Имена транзакций служат только для отображения в [Лог]е.
В транзакции можно указать точку сохранения, с именем, и откатить транзакцию полностью - по имени транзакции, или частично - до точки сохранения, по имени.
SAVE TRANSACTION оператор.
Вызывать транзакции удобно из SqlConnection объекта, который создает SqlTransaction.
•	Для получения последнего IDENTITY таблицы использовать запрос на функцию:
SELECT IDENT_CURRENT('tablename'); Поведение после отката транзакции неясно.
•	timestamp не хранит время, только для обозначения версий строк. Поэтому его нельзя использовать, придется вставлять дату изменения в каждом запросе. Можно использовать триггер, но тогда будет два запроса - на данные и на время. Может быть, оптимизатор запросов в СУБД их объединит?
•	При ошибке исполнения запроса интерфейс СерверSQLБД выбрасывает для вызывающего кода исключение SqlException с описанием причины и кодом сложности.
•	Для больших двоичных данных можно указать SqlDataReader-у режим последовательного чтения из потока. Тогда он не будет загружать в память весь результат запроса, а будет читать по кусочкам. Это может пригодиться, если ячейки будут хранить картинки или звуки. Их тогда следует извлекать отдельной специализированой операцией.

 

++++1
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=РазныеБазыДанных
Предполагается поддержка проектом разных типов СУБД, а таке работа без БазаДанныхСолюшена.
Класс слоя БД MDbLayer предлагается сделать интерфейсным, а для каждого типа СУБД завести специальный производный класс с тем же интерфейсом.

СолюшенБезБД может использовать только временные ячейки и связи, а все функции, обращающиеся к БазаДанныхСолюшена, придется модифицировать для ввода проверок, что БазаДанныхСолюшена существует. 
Для СолюшенБезБД предлагается тоже создать класс АдаптерБД, все функции которого выдают исключения или пишут сообщения в [Лог].
Следует составить список ограничений для СолюшенБезБД.

Для обозначения типа СУБД в файле проекта заведем поле енума MDatabaseType.  
Для определения типа СУБД в операциях будем проверять это поле.
При открытии или создании проекта, в контейнер передается инфа о проекте, и тогда можно выбрать какой класс будет в качестве MDbLayer. Но эту схему можно реализовать только после того, как будет определен весь ИнтерфейсАдаптераБД.



