++ Тип Данных Ячейки
[template: ШаблонКарточкиГлоссария]
Состояние: [В РАЗРАБОТКЕ]

ИдентификаторЯчейки существующей ячейки ЯчейкаТипаДанных, описывающей тип данных, примененный в создаваемой ячейке.


+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* todo.глоссарий.форма: Перечислите обязанности сущности здесь.
* 

+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
 todo.глоссарий.форма: Укажите здесь соответствующий класс кода проекта, если известен.
++++Свойства - данные
++++Методы

+++Дополнительная информация 
todo.глоссарий: Надо разработать иерархию типов ТипДанныхЯчейки. Для начала можно просто объявить нужные типы, а иерархию прицеплять потом, когда она будет удобна. Однако можно и не прицеплять иерархию, она будет существовать независимо.

Например, чтобы добавить в систему ТипДанныхЯчейки "строка", соответствующий классу String в C#, нужно создать ячейку ЯчейкаТипаДанных, и определить для нее [МетодОбработчикЯчейки]ы, осуществляющие работу с данными этого типа. Для конверсии БлокДанныхЯчейки между приложением и ТаблицаЯчеекБд, нужны МетодКонвертер. Для поиска могут потребоваться специальные функции, и так далее.

++++Типы данных для ячейки
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/Concept1/Concept1.wiki?page=ТипыДанных

В поле данных ячейки можно хранить массив байт. Это позволяет хранить данные любого типа.
Пользователь должен создавать собственные типы данных для использования в своей системе.
Типы данных CLR могут использоваться внутри кода МетодОбработчикЯчейки обработчиков.
Любые типы данных могут быть использованы внутри любого типа методов, если они описаны в системе.
То есть, для них реализованы конвертеры в/из массив байт, сериализация в текст, набор методов-аксессоров и методов-операций, и соответствующие семантические слоты.
Простые CLR-типы можно было бы сразу интегрировать в систему как стартовый комплект.

Допустим, что пользователь намерен использовать новый тип данных. Например, строка.
Поскольку это CLR-тип, то нужно сделать МетодОбработчикЯчейки обработчики, дополнить схему семантических слотов для этого нового типа, и собственно создать структуру ячеек для этого типа. Все, теперь новый тип данных можно использовать внутри любых методов.
Теперь допустим, что пользователь намерен использовать новый тип данных, которого нет в CLR. Он создает МетодОбработчикЯчейки обработчики, сериализацию, методы-аксессоры и методы-операции, ячейку типа данных.
Новый тип данных может использоваться в МетодСкрипт и МетодГраф. Поскольку CLR работает с типами, размещенными в сборках, то новый тип данных тоже должен быть размещен в сборке...
Хотя нет. Если есть методы-аксессоры, и методы-операции, то код может работать на этом уровне. Невозможно создать экземпляр типа данных в CLR-памяти и работать с ним типичным для CLR образом. Хотя, чтобы создать МетодОбработчикЯчейки обработчики CLR-версии типа, надо создать сам тип. Он должен быть размещен в указанной сборке, наследовать общие классы-интерфейсы, отвечать определенным требованиям, и являться, таким образом, частью архитектуры системы.

Можно автоматически компилировать существующий в системе тип в сборку, для ускорения работы, и переделать его использование в системе. Но это нужно изучить, нужен опыт. 

Как clr-код будет работать с нетипичными данными
-создать объект данных - как?
-получить значение - вызываем конвертер, который конвертит байты во что? в Object. А потом?
-записать значение - передаем конвертеру что? он конвертит это в массив байт.
-вызвать операцию - операции передается массив байт и аргумент, потом операция делает свою работу, возвращает результат. Вроде все хорошо. Поскольку операция знает, что делать с данными.

Так, получается, конвертер для нетипичных типов не нужен - не во что конвертировать. Можно просто использовать массив байт, обозвав для удобства использования в коде clr каким-то классом данных (MData ?). Добавить этому классу конструктор и вызов семантического слота, причем для типа придется определить все необходимые операции-слоты, как если бы новый тип создавался в С. Возможно, часть МетодОбработчикЯчейки обработчиков можно наследовать из иерархии типов, если она есть.

Конвертер нужен для CLR-типов, которые удобно использовать в коде. Поэтому их хорошо бы сразу включить в комплект системы, но это отдельная большая работа.

MData class представляет пользовательские типы данных в памяти в CLR-методах, для временных копий.
byte[] Value - данные
int Size - размер данных, байт - проперти.
uint TypeID - идентификатор типа данных в системе (ИД ячейки) 
конструктор, интерфейсы
... функции для использования, вызова МетодОбработчикЯчейки обработчиков. 

Можно включить этот класс в класс ячейки для удобства использования.

04.03.2012 08:10 Вся описанная функциональность пока что укладывается в тип Byte[]. MData будем вводить когда появится что-то новое. 
