++ Коллекция Ячеек Контейнера
[template: ШаблонКарточкиГлоссария]
Состояние: [//ДОПОЛНИТЬ]

Коллекция ячеек для централизованного хранения ячеек в памяти [Контейнер]а [Солюшен]а
КоллекцияЯчеекКонтейнера хранит все загруженные в память ячейки ПостояннаяЯчейка и ВременнаяЯчейка. Коллекция реализована как словарь, что обеспечивает быстрый поиск ячейки, но медленное добавление (примерно в три раза медленнее, чем список). Также на этот список возлагаются функции поиска ячеек по шаблону, поиска наибольших существующих идентификаторов временных ячеек. Поиск наибольшего существующего идентификатора постоянных ячеек производится в ТаблицаЯчеекБд, так как там они все обязательно представлены.

+++Версии
* todo.глоссарий.форма: Создайте новую страницу для версии описания сущности, добавив к имени "Версия0". Так осуществляется поддержка версий страниц глоссария. 

+++Обязанности
* [//КоллекцияЯчеекКонтейнера/Словарь ячеек]
* [//КоллекцияЯчеекКонтейнера/Максимальный идентификатор ячейки]
* [//КоллекцияЯчеекКонтейнера/Конструктор]
* [//КоллекцияЯчеекКонтейнера/Проверить наличие ячейки по ее названию]
* [//КоллекцияЯчеекКонтейнера/Проверить наличие ячейки по ИдентификаторЯчейки] 
* [//КоллекцияЯчеекКонтейнера/Получить ячейку по ИдентификаторЯчейки]
* [//КоллекцияЯчеекКонтейнера/Получить список ячеек]
* [//КоллекцияЯчеекКонтейнера/Получить список ячеек по ПоисковыйШаблонЯчейки]
* [//КоллекцияЯчеекКонтейнера/Получить НазваниеЯчейки по ИдентификаторЯчейки]
* [//КоллекцияЯчеекКонтейнера/Получить максимальный идентификатор ВременнаяЯчейка]
* [//КоллекцияЯчеекКонтейнера/Добавить ячейку]
* [//КоллекцияЯчеекКонтейнера/Удалить ячейку по экземпляру элемента]
* [//КоллекцияЯчеекКонтейнера/Удалить ячейку по ИдентификаторЯчейки]
* [//КоллекцияЯчеекКонтейнера/Удалить все ячейки]
* [//КоллекцияЯчеекКонтейнера/Получить число ячеек]
* [//КоллекцияЯчеекКонтейнера/Получить число временных ячеек]
* 
 
+++Сущности предметной области
* todo.глоссарий.форма: Перечислите выявленные сущности предметной области здесь.
* 

+++Соответствующий класс кода
* MCellCollection
++++Свойства - данные
* Словарь ячеек
* Максимальный идентификатор ячейки - 
++++Методы
* 
+++Дополнительная информация 
* Желательно обладать единообразным интерфейсом с КоллекцияСвязейКонтейнера.
* См ОсмотрСловаряDictionary
* 
+++Материалы
* todo.концепция.сс: нужно унифицировать интерфейс КоллекцияСвязейКонтейнера и КоллекцияЯчеекКонтейнера.
    * чтобы унифицировать интерфейс КоллекцияСвязейКонтейнера и КоллекцияЯчеекКонтейнера, надо сначала описать этот интерфейс на основе реального использования, и лучше до написания кода.
    * Однако, нет необходимости в такой унификации. Это лишь желательно, чтобы сделать код проекта понятнее.  
* Нужен метод Закрыть() в коллекции, он должен очищать коллекцию и вызываться в конце функции закрытия солюшена.
    * для этого ксть метод Clear(), а почему он не вызывается там - недоделка.
* после Clear() надо вызывать GC.Collect() для освобождения памяти. Иначе объекты не выгружаются из памяти.
    * Это надо вызывать при очистке солюшена или при закрытии солюшена.
       Вызывать сборку мусора когда попало - неправильно, так как она сильно тормозит процесс. 
       
++++Индексы
Общая проблема этих коллекций - нужен словарь с неуникальным ключом. Он бы возвращал массивы элементов.
Но такого класса пока я не нашел в фреймворке.


++++Функции временных ячеек
Для списка ячеек, возможно, нужна функция, проверяющая, есть ли хотя бы одна временная ячейка. Ее надо вызывать перед выгрузкой ячеек (?), перед запуском [Оптимизатор]а (?)
Это чтобы временные ячейки не были сохранены в БазаДанныхСолюшена.
И перед закрытием Солюшена, чтобы наоборот сохранить их в БазаДанныхСолюшена.
Возможно, еще пригодится функция создания списка временных ячеек, зачем-нибудь (?)

++++Ускорение доступа
Ускорение поиска ячеек в коллекции ячеек.
Ячейки добавляются в коллекцию из бд, когда они запрашиваются кодом.
1)Приложение вызывает MEngine.intGetCell(id). 
2)функция ищет ячейку в коллекции. Если находит, возвращает ссылку.
Если не находит, ищет в бд. 
3)Если не находит в бд, возвращает null.
Если находит, создает MCell объект, загружает в него данные, связи, добавляет в коллекцию, и возвращает ссылку.

Типично, в коллекции будут все ячейки, которые запрашиваются кодом, а также связанные ячейки, которые используются в МетодОбработчикЯчейки обработчиках. То есть, много.
Требуется:
1) ускорить добавление ячеек в коллекцию
2) ускорить поиск ячейки в коллекции.
Варианты решения:
а)простой список - поиск перебором элементов. Поиск медленный, добавление быстрое.
б)сортированный список - поиск по ИдентификаторЯчейки как индексу, добавление приводит к пересортировке списка. 
в)хеш-словарь - поиск быстрый, добавление медленное - перестраивать индекс.

Будем использовать для списка ячеек хеш-словарь с ключом по ИдентификаторЯчейки. Это дает быстрый поиск, увеличенный на 16 байт расход памяти и втрое медленнее добавление ячеек, чем список.

+++++Идея применения сортированного списка с половинным делением
Использовать обычный список для ячеек.
Он может хранить неуникальные значения ключей, располагая их рядом.
В качестве критерия сортировки и поиска использовать ИдентификаторЯчейки
Находить место для вставки новой ячейки методом итеративного половинного деления списка.
Находить требуемую ячейку методом половинного деления списка.
Написание и отладка алгоритмов займет некоторое время.
В списке из 1000000ячеек потребуется 20 сравнений. Равномерно для вставки и для выборки.
* Сколько памяти займет такой список - насколько меньше, чем словарь?
* Выборка медленнее, чем у словаря. Добавление тоже не намного быстрее. Добавление производится реже, чем выборка.
* Вывод: Словарь пока выгоднее. Он уже есть, алгоритм придумывать не надо.


