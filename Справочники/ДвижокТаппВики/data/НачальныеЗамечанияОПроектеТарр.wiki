++ Начальные Замечания О Проекте Тарр

Информация для анализа и выводов и решений.

* За 4 года я так и не доделал Тарр.
* Хотя движок в основной части работоспособен, есть проблемы с функциональностью и концепцией в целом.
* функциональные требования в процессе разработки изменялись.
* Концепция не была проработана и недостаточно соответствовала цели работы.
* Нет списка целевых требований, поэтому нельзя формально проверять соответствие целевых требований и цели, целевых требований и функциональности.
* Разработка функциональности велась в основном интуитивно, а не формально. Документы - описания не были созданы.
* Органайзер и прочие мои сегодняшние проекты показали требования к проекту.
* Эти 4 года я кристаллизовывал требования к Тарр. Так получилось потому, что разработка Тарр велась снизу вверх.
* Снизу-вверх: что можно сделать в этой ситуации. Сверху вниз: что нужно сделать.
* При разработке важно не увлекаться и придерживаться цели проекта и цели текущей задачи.
* Надо регулярно ставить себе задачу рефакторинга документа и сокращения контекста задачи. Возможно, по каждому документу. 
* За 4 года я ни один крупный или средний проект не довел до конца. Все они на стадии сбора или переработки материалов.

+++Важные замечания
* Самое главное тут то, что на разработку концепции Тапп сегодняшними темпами (по две недели через две недели) уйдет два года. И это я занимаюсь только этим проектом, остальные проекты стоят. А мне нужны результаты уже сегодня. Я хочу применять наработки в своих проектах сегодня, а не ждать, когда я все ошибки в концепциях исправлю и построю чудо-штуку. Она мне к этому времени уже не понадобится. 
    * Такое уже было. В итоге процесс разработки завис. Хотя тогда я не вел такую документацию, я просто хотел по-быстрому получить прототип для опытов. Сделал прототип и пока его допиливал, забыл чего хотел от него. Такая вот непоследовательность.
    * Надо ускорить работу над проектом. Надо облегчить работу над проектом. Как это можно сделать?
        * Интернет мог бы дать готовые материалы по темам. Но их надо там найти и отобрать и сделать выжимку. Готового там ничего нет. А это работы немногим меньше, чем самому собрать материалы.
        * todo.разработка: придумать как ускорить разработку концепций Тапп. 
        * Работать по каждой концепции отдельно? 
        * Вопросы для поиска материалов в интернете поставить? 

+++Как организовать разработку проекта Тарр?
* Надо создать новый проект движка Тарр.
* Надо создать документ План проекта.
* Надо назначить новую версию для проекта и кодовое имя проекта для использования в текстах.
* Надо создать файл ToDo для текстового изложения того что уже сделано и того, что надо еще сделать. 
   Такой лог работы с заметками и набросками планов.
   Эти записи потом надо анализировать и вносить в план новые задачи.
   Этот файл и работы с ним относятся к инфраструктуре планирования проекта.


Где вести этот проект?
а) вести все в солюшене визуалстудио? 
  Концепцию можно представить как отдельный проект. 
  В нем подразделы для задач и подсистем, файлы и все такое прицеплять.
  Дерево будет удобно для просмотра, но плохо для работы.
  А сами тексты где тогда писать? Вот это вот неудобно.
б) вести все в вики проекта.
  Глоссарий проекта точно в вики будет.
  Задачи локальные можно тоже в вики назначать. 
  Только эти задачи все равно должны быть внесены в план.
  А мне это лишняя работа - вносить их в план, у меня драйва на это не хватит.  
в) вести задачи в органайзере.
  Вести все планирование проекта в органайзере. 
  Назначать привязанные к времени задачи по пересмотру и рефакторингу планов.
г) вести все в умл-диаграммере.
  А он вряд ли предназначен для таких процессов. 
  Там, как максимум, можно документы прицеплять к сущностям. 
  И то это не наглядно, и фиг найдешь что куда уже прицеплено. 
Надо это все продумать и придумать решение, как вести проект. Решение надо описать в документе.
Можно составить список тех вещей, которые нужны при разработке, свести все в таблицу и по ней выбрать лучшее решение или комбинацию средств.


* Прошлая попытка застряла на стадии концепции. 
Там был слишком большой объем работы, который я попытался сделать одним куском. Не осилил.
Там было много материалов, которые надо было переработать. А драйва, плана и времени на это не хватило.

* Не было списка важных вопросов для решения в первую очередь. Был один общий список задач, в нем все потонуло.
* Вся работа шла по настроению. Сегодня здесь, завтра там. Без детального плана.
* Был приоритет кода над концепцией. Предполагалось, что быстрее будет сразу написать код, а потом его подогнать под концепцию.
* У меня мало опыта работы над проектированием и концепцией проекта. В основном у меня небольшие проекты, их можно делать интуитивно.
* Надо делать переработку материалов, документов и решений для сокращения их контекста.
* Есть проблема с вариантами решения. Их надо как-то отдельно собирать, группировать и проводить эксперименты, вне процесса разработки.
  Именно из-за этих неопределенностей выбора варианта я застрял в прошлый раз. Неопределенностей стало слишком много.
* Надо, наверно, все же создавать и распечатывать диаграммы. Чтобы быстро понимать и в целом представлять проект.
  Экономия на этой наглядности обернулась нарастанием непонимания и потерей контекста проекта.
* По поводу экономии. Один рабочий день стоит мне 1000 рублей. 
   Глупо потерять несколько дней из-за экономии 100 рублей.
   Глупо делать работу, которую можно не делать или просто купить.
* Нужен успешный опыт разработки концепции проекта. Он содержит много решений организации вещей, которые можно просто копировать в новый проект, уменьшив его сложность.
* Нужно проводить мини-эксперименты, чтобы понимать, как это на самом деле устроено.
   Но эксперименты начинают подменять работу над проектом и уводят от цели.
* Нужен общий и детальный план проекта. 
   Нужно регулярно выделять время для работы над собственно этим планом. 
   Чтобы приводить его в порядок, обновлять, дополнять, конкретизировать.
   Это делает менеджер проекта. Тут это должен делать я сам.
* Надо разрабатывать проект путем работы с целями, со списком требований, соответствием функциональности.
   Все документы сводить в разделы. Например, в вики или в дереве студии.
   Что-то вроде: Вот сущность. Ее цель - нечто. К ней предъявляются требования: список требований.
   Потом документ - список Требование -> Функциональность.
   Потом предложения по устройству сущности.
   Сущность надо внести в глоссарий и создать ее описание.   
* Эта работа однообразная. Я еще ни одну такую работу не доделал до конца. 
   Например, набор пунктов  функциональности Органайзер. Тоже концепция.
   Это просто слишком большой объем работы для работы без больших перерывов.
   Я сначала утомился от нее, потом сделал перерыв, а сейчас и вообще забыл, что там и как. 
* Предлагается сначала формулировать задачу, поставить ее в план, собирать для нее ресурсы. 
  Потом выполнять. И отмечать состояние задачи там же в плане и в формулировке задачи, и на выделенной странице задачи.
  Выполнять не более одной задачи за подход. Даже если они простые.   
  Надо действовать формально. Это такой воркфлов получается. 
  Его надо выявить, описать в документе, и применять. 
  И периодически просматривать и дополнять.
  Задача: написать воркфлов для решения задачи по проекту Тарр.
* После написания заметки надо прочитать ее и сделать анализ.
   Написать комментари и выводы.
   Но у меня сейчас драйва хватает только на сам текст.
* Подходящее для работы настроение или состояние бывает недостаточно часто.
   А в остальное время работа приводит к захламлению, созданию ошибок, отклонению от цели и прочим проблемам.  
* Надо периодически осматривать свою работу на предмет ее соответствия цели.
   Это надо запланировать по времени, прямо в органайзере, напоминаниями.
   Можно и в плане предусмотреть такие вставки - задачи.
* Надо проводить рефакторинг после завершения работ по каждой единице плана - подсистеме, задаче, итд.
   Это значит - осмотреть весь результат работы и внести изменения в связанные документы итд.
   Это выглядит неприятной лишней работой, но это надо делать, чтобы поддерживать весь проект в нормальном состоянии адекватности.
* Все это хорошо идет, когда это основная работа. Каждый день, в обязательном порядке. А у меня тут бардак.
   Надо искоренять бардак. Переносить разработку в планиовщик, вс привязкой к датам.
   Иначе я так и буду плыть во времени.
* Еще бы мотивацию сохранять на весь период разработки. Это невозможно.
* Попытка, в прошлый раз, посмотреть, что сделано по проекту, заглохла. 
   Кажется, даже отчет об этом не был создан.       
   Сейчас уже все забылось.
* Надо начинать все заново. Старые работы использовать как материал для переработки.
* Надо делать отчеты и диаграммы. Они позволяют быстро восстановить контекст задачи.
* Надо поставить в план создание описания рабочего сетапа. И создание самого сетапа тоже.
* Надо поставить в план организацию хранения документов. Электронных и бумажных.
   Надо поставить в план задачу описать эту организацию.
* Вывод: вся эта организация, весь сетап - это все надо документировать потому, что я часто меняю виды деятельности - то электроника, то софт, то физика.
   То бытовая хрень слесарная, то копка грядок, то еще хз что. 
   Нет такого стойкого контекста, чтобы его полагать по умолчанию.
   Контекст все время меняется. Поэтому я его не запоминаю.
   Поэтому его надо записывать и периодически осматривать - освежать в памяти.
   Да и в реальном мире все часто меняется.
   Вся обстановка усредняется и становится одинаково непригодной ни для чего конкретно.  
   У меня нет десяти рабочих мест, чтобы на каждом создать собственный сетап.
   И нет десяти голов, чтобы в каждой хранить собственный специализированный контекст.
   Сосредоточить на определенном виде деятельности. 
* Короче, проекту нужен толковый менеджер, а я никак не готов совмещать директора и слесаря и уборщика.
   И никак не готов добавить в проект сотрудников.
   Так вот и идут мои дела.
* В общем-то, для проекта придется создавать и описывать всю инфраструктуру:
  - Используемые программы, в том числе для документации.
  - виды документов, их применение, состав, образцы.
  - шаблоны страниц задач. Задачи должны выписываться на отдельную вики-страницу, где по ним ведутся записи о работах.
  - шаблоны страниц глоссария.
  - инструкции по использованию программ.
  - разное прочее. Исходя из того, что работа не должна зависеть от того, помню я о проекте или нет.
* Кроме собственно рабочей инфраструктуры, также потребуется музыка, наушники и плеер. 
   Чтобы при работе отгородиться от бытовой обстановки.
   И еще что-то потребуется потом в процессе работы. Это тоже надо будет внести в список реквизита.
* Этак весь драйв уйдет на разработку процесса подготовки к разработке.
   Важно этот процесс задокументировать, чтобы в следующий подход хотя бы эту часть быстро воспроизвести.
   И продвигаться дальше.
   
Сначала надо осмотреть карту проектов, выяснить что там как устроено, и с чего начинать.
Выписать ее кратко, выписать, зачем нужен Тарр и где он используется.

Хорошо бы всю карту привести целиком, чтобы видеть эти зависимости.
Она наверно в проекте СИМ должна быть - она к нему целиком относится.

Это проект разработки тарр движка, а не всего СИМ.
Он выводится в отдельный проект, так как очень большой.

БД ставить пока не будем. 
Но надо составить список типов БД и проверить, насколько они соответствуют требованиям функциональности проекта. 
Например, как организованы ТранзакцияБД.

Еще для работы с проектом нужен будет гуй. Его надо разрабатывать позже и отдельным проектом. 

Задача: Эти замечания о проекте надо переработать в задания для организации проекта.
Надо запланировать и выполнить исследования по изучению возможностей софта итд.
Текст замечаний сохранить для возможного последующего анализа.

+++Выводы и задачи
Перенесены в ЗадачиИнициализацииПроекта

* done: проанализировать текст страницы и выписать сюда выводы и задачи.
Оформить выводы как факты. Факты-требования, факты-утверждения.
Оформить задачи для их выполнения.
* done: Надо разделить задачи и требования к процессу разработки. Задачи это конкретные дела, а требования это нечто, что должно действовать в процессе.
* todo.разработка.важно: Надо решить, что делать с требованиями к процессу разработки - где их хранить, как обеспечить их соблюдение или хотя бы регулярный просмотр. См СписокТребованийКПроцессуРазработки.
 



