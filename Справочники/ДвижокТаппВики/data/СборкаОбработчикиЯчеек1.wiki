++ Сборка Обработчики Ячеек1

+++Обработчики для типов данных ячеек
Данные ячеек в таблице хранятся в виде потока байт. Сопоставленный ячейке тип данных определяет операции с этим типом данных ячейки.
Типы данных по идее должны иметь МетодОбработчикЯчейки обработчики, транслирующие байтовый поток в объекты в памяти и обратно.
Также они должны транслировать данные в строковое представление для показа пользователю. Как ToString(). Возможно, это строковое представление будет неполным, и по нему нельзя восстановить объект. Это и не требуется, для сериализации данных их можно выводить как байтовый поток в двоичный файл, а преобразовав в HEX - в текстовый. В текстовом желательно дополнить байтовый поток строковым представлением, поскольку текстовый файл предназначен для пользователя.
Поскольку в систему не закладываются типы данных, изначально в качестве типа данных в таблице используется varbinary, то есть байтовый поток. В классе MCell тип данных должен быть производным от CLR.Object, поскольку это позволяет использовать любые CLR-типы.
Каждый новый тип данных должен обеспечить перевод между этими двумя представлениями, а также представление в виде строки (ToString()). Также, нужно предоставлять полное, со сборкой, символьное имя типа, которое можно использовать для кастинга.
Использовать можно только уже существующие в коде типы, иначе CLR не сможет опознать тип данных и выполнять операции с ним.
Можно предположить, что изначально следует заложить этот интерфейс, чтобы каждый тип данных его реализовывал.
Если этого не сделать, трансляции данных между MCell и таблицей не будет. В случае с пустой базой данные ячейки должны как-то отображаться на таблицу и наоборот, показываться пользователю и еще чего-нибудь. 
Если прописать в коде жестко, новые типы не введешь. 
Если прописать в коде МетодОбработчикЯчейки обработчики для дефолтового типа, а для остальных вызывать их обработчики, это лишний код. Хотя возможно.
Если создавать абстрактный тип, с которого и брать обработчики, и начинать формирование структуры, то это снижает гибкость, поскольку такая же картина будет и со всеми остальными обязательными полями. Получается набор стандартов, которые необходимо соблюдать. Это не есть хорошо. Надо что-то придумать.
