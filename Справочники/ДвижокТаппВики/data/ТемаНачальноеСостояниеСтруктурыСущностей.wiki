++ Тема Начальное Состояние Структуры Сущностей

+++Задача
* Собрать имеющиеся материалы в связную концепцию НачальноеСостояниеСтруктурыСущностей. 
* Построить диаграмму строения НачальноеСостояниеСтруктурыСущностей, дающую достаточное представление об ее устройстве.
* Написать код автоматического создания НачальноеСостояниеСтруктурыСущностей из ячеек и связей, но без методов.

+++Ссылки на источники
* КонцепцияСтруктурыСущностей
* СлужебнаяЧастьСтруктурыСущностей
* НачальноеСостояниеСтруктурыСущностей
* КоллекцияЯчеек
* [Контейнер]
* КонтейнерВерсия0
* НачальнаяЯчейкаСолюшена
* СтруктураСущностей
* ТипПоУмолчанию
* ТипСвязи
* [rel://files/CreateInitialStructure.txt]

+++Начальная структура ячеек v1
++++Замечания
Источник: [rel://files/CreateInitialStructure.txt]
Попытка собрать таблицы свойств ячеек и связей - не закончено: [rel://files/InitialSolutionStructure.xls] 
Это довольно полная, но очень сложная для понимания структура из ячеек и связей.
И она основывается на уникальных именах Сущностей - ячеек. И эти имена получаются довольно длинными и не интуитивно-понятными.
* И она должна бы содержать больше классов, но их и так получилось много, поэтому тут приведены только необходимые классы. Позже надо добавить другие классы, по мере необходимости. 
* Важно держать эту структуру простой и понятной. Проблема в том, чтобы быстро определить класс для Сущности - это редко получается сразу и правильно.
* Называть ячейки надо так, чтобы они были понятными. Например:
    * CellDataType_NoData
    * CellType_EntityCollectionTyped
    * LinkState_Normal
    * Но это легко, когда они образуют енум. А вот более сложные классы из иерархии - уже вызывают трудности: CellType_EntityCollection_UserAccountRootCell - ЯчейкаТипаЯчейки, описывающая класс коллекции Сущностей типа Корневой элемент пользовательского аккаунта, то есть, ячейку-коллекцию аккаунтов пользователей Солюшена, нечто вроде папки в ОС, "C:\Users\". В нее входят папки аккаунтов пользователей, и есть возможность скопировать эту структуру папок сюда в ячейки, только незачем.
    * То есть, следует разделять подчеркиваниями названия классов в названии ячейки, и приводить подробное объяснение сути класса в описании ячейки, желательно приводить примеры-аналогии из некоторой предметной области. Без этого любое название ячейки может быть истолковано неправильно, особеннно если второпях.
    *  следовательно, выбирать существующий класс для ячейки - долгая и трудная задача, которую лучше решать сразу для многих ячеек. А переработка иерархии классов превращается в переделку всего Солюшена, так как в многих местах СтруктураСущностей надо будет заменить классы для ячеек, если Солюшен не пустой. А если еще и методы реализованы, то и вовсе такая переделка  станет проблемой - новая структура может не заработать как требуется.
    * В сущности, Солюшен и эта вся система - отдельный язык программирования. С соответствующими последствиями.      
* 13.01.2019 18:46:37 - описание из источника не полностью сюда перенесено, надо доделывать. Я совсем запутался в этих типах и связях, и запросто мог упустить и перепутать все эти ячейкии их свойства и связи.
    * Надо выписать общий список ячеек
    * Для каждой ячейки надо указать входящие в нее свойства, перечислив их через запятую. Иначе не разгрести это никак.
    * Затем надо выписать общий список связей ячеек в форме Источник-отношение-Приемник.
    * Для каждой связи надо указать входящие в нее свойства, перечислив их через запятую. Иначе не разгрести это никак. 
* Диаграмму создать будет сложно, так как надо отобразить множество иерархий одновременно. Проще будет отобразить иерархическим текстовым деревом ячейки, по одному дереву на Отношение.
* Эта структура будет хорошим тестом на создание ячеек и связей. Но контролировать правильность тоже сложно.
* Для создания этой структуры хорошо бы написать вспомогательные функции, которые будут, например,  создавать ЯчейкаТипаЯчейки и сразу прописывать ее в коллекцию ячеек ЯчейкаТипаЯчейки и связывать с родительским классом ЯчейкаТипаЯчейки. Чтобы уже все делать проще и не забыть важные связи и свойства. Но все это относится к ПользовательскаяКонцепцияСолюшена и к СлужебнаяЧастьСтруктурыСущностей. 

++++Суть - не закончено
1. Надо создать начальную структуру ячеек.

* World - "Начальный класс структуры сущностей"
* "System", "Служебная часть структуры сущностей"
* "CellTypes", "Коллекция ячеек ЯчейкаТипаЯчейки"
* "BaseCellType", "Базовая ЯчейкаТипаЯчейки");
* "CellDataTypes", "Коллекция ячеек ЯчейкаТипаДанныхЯчейки");
* "BaseCellDataType", "Базовая ЯчейкаТипаДанныхЯчейки");
* CellDataType_NoData - ЯчейкаТипаДанныхЯчейки: Тип данных: Нет данных.
* "CellStates", "Коллекция ячеек ЯчейкаСостоянияЯчейки");
* "BaseCellState", "Базовая ЯчейкаСостоянияЯчейки");
* "LinkAxises", "Коллекция ячеек ЯчейкаТипаСвязи");
* "BaseLinkAxis", "Базовая ЯчейкаТипаСвязи");
* "LinkStates", "Коллекция ячеек ЯчейкаСостоянияСвязи");
* "BaseLinkState", "Базовая ЯчейкаСостоянияСвязи");
* "Nothing", "Специальная ячейка Nothing.

Здесь коллекции представляют линейный ряд всех элементов. А Базовые ячейки представляют начало соответствующей иерархии классов. Например: CellTypes представляет коллекцию всех ячеек ЯчейкаТипаЯчейки в Солюшене. А BaseCellType является корнем иерархии типов ячейки, которые наследуются согласно общей логике Солюшена.

2. Теперь надо создать связи ячеек. 
Но для них нужны типы связей. Нужно создать ячейки ЯчейкаТипаСвязи. А не эти болванки-заготовки, что я выше наклепал.
Но и для этих ячеек тоже нужны связи, и для них тоже нужны ячейки ЯчейкаТипаСвязи.
Вот такая итеративная ручная работа. Хорошо еще, что эти типы не требуются сразу при создании, их можно позже дописывать.

Методика получается такая: сначала описываем свойства ячеек и связей, которые надо вписать в уже созданные ячейки и связи.
Затем создаем требуемые для этого ячейки. 
Затем описываем требуемые связи между этими новыми ячейками, типы ячеек, связи итд.
Затем создаем требуемые для этого ячейки.
Так итеративно повторяем, пока не окажется, что создавать ячейки более не нужно.
Теперь все созданные ячейки выстраиваем в один ряд и вписываем в их свойства идентификаторы соответствующих ячеек.
А потом создаем связи между ячейками, описывая их в комментариях. 
Эти связи сейчас древовидные, поэтому группируем их по корню дерева.

 3) типы ячеек - тут я уже увяз в классах и их отношениях, тут надо много прорабатывать эту тему. Сейчас просто напишу что придумается.
Тут хорошо, что типы представлены полями ячейки, а не связями. Иначе я бы тут завис надолго.
* World имеет тип Сущность-НачальнаяСущность
* System имеет тип Сущность-СлужебнаяСущность
* Nothing имеет тип Сущность-СлужебнаяСущность
* CellTypes имеет тип Коллекция Сущностей - Коллекция Однотипных Сущностей. Коллекция чего именно - это вроде бы тоже класс, но потом разберемся, как с ним быть.
* CellDataTypes  имеет тип Коллекция Сущностей - Коллекция Однотипных Сущностей. 
* CellStates  имеет тип Коллекция Сущностей - Коллекция Однотипных Сущностей.
* LinkAxises  имеет тип Коллекция Сущностей - Коллекция Однотипных Сущностей. 
* LinkStates  имеет тип Коллекция Сущностей - Коллекция Однотипных Сущностей.
* BaseCellType имеет тип ЯчейкаТипаЯчейки
* BaseCellDataType имеет тип ЯчейкаТипаДанныхЯчейки
* CellDataTypeNoData  имеет тип ЯчейкаТипаДанныхЯчейки
* BaseCellState имеет тип ЯчейкаСостоянияЯчейки
* BaseLinkAxis имеет тип ЯчейкаТипаСвязи
* BaseLinkState имеет тип ЯчейкаСостоянияСвязи

//создаем ячейки типов ячеек
* "CellTypeEntity", "ЯчейкаТипаЯчейки - Сущность");
* "CellTypeEntityInitial", "ЯчейкаТипаЯчейки - Начальная Сущность");
* "CellTypeEntityService", "ЯчейкаТипаЯчейки - Служебная Сущность");
* "CellTypeEntityCollection", "ЯчейкаТипаЯчейки - Коллекция Сущностей");
* "CellTypeEntityCollectionTyped", "ЯчейкаТипаЯчейки - Коллекция однотипных Сущностей");
* "CellTypeEntityCollectionCellTypeCell", "ЯчейкаТипаЯчейки - Коллекция ЯчейкаТипаЯчейки");
* "CellTypeEntityCollectionCellDataTypeCell", "ЯчейкаТипаЯчейки - Коллекция ЯчейкаТипаДанныхЯчейки");
* "CellTypeEntityCollectionCellStateCell", "ЯчейкаТипаЯчейки - Коллекция ЯчейкаСостоянияЯчейки");
* "CellTypeEntityCollectionLinkTypeCell", "ЯчейкаТипаЯчейки - Коллекция ЯчейкаТипаСвязи");
* "CellTypeEntityCollectionLinkStateCell", "ЯчейкаТипаЯчейки - Коллекция ЯчейкаСостоянияСвязи");
* "CellType_CellTypeCell", "ЯчейкаТипаЯчейки - ЯчейкаТипаЯчейки");//сам себя описывает
* "CellType_CellDataTypeCell", "ЯчейкаТипаЯчейки - ЯчейкаТипаДанныхЯчейки");
* "CellType_CellStateCell", "ЯчейкаТипаЯчейки - ЯчейкаСостоянияЯчейки");
* "CellType_LinkTypeCell", "ЯчейкаТипаЯчейки - ЯчейкаТипаСвязи");
* "CellType_LinkStateCell", "ЯчейкаТипаЯчейки - ЯчейкаСостоянияСвязи");

Пользовательский каталог:
* UserAccountCollection - коллекция пользовательских каталогов
* UserAccountRoot - корневой пользовательский каталог
* CellTypeUserAccountRootCell - ЯчейкаТипаЯчейки Каталог пользователя
* CellTypeEntityCollectionUserAccountRootCell - ЯчейкаТипаЯчейки Коллекция каталогов пользователей.
Это как папки в ОС, только там папки - общая абстракция, а тут все разделено на классы, поскольку надо понимать, что папки должны содержать и что они собой представляют. Типы ячеек выражают мелкие детали предметной области. Поэтому иерархия классов типов ячеек такая большая и это требует много труда ее непротиворечиво составить, а потом понимать, чтобы использовать. Тут работы на целую Академию наук.

4. тип данных ячеек
Все ячейки здесь не хранят данные, поэтому только один тип данных - без данных.
* "CellDataTypeNoData", "ЯчейкаТипаДанныхЯчейки - Ячейка не должна содержать данные");

5. состояние ячейки
Все ячейки в нормальном состоянии, поэтому только одно состояние - нормальное.
* "CellStateNormal", "ЯчейкаСостоянияЯчейки - Ячейка в обычном состоянии");

6. типы связей

6.1 Агрегация: Входит в состав или Является частью 
* System входит в состав World
* Nothing входит в состав System
* CellTypes входит в состав System 
* CellDataTypes входит в состав System 
* CellStates входит в состав System 
* LinkAxises входит в состав System 
* LinkStates входит в состав System

6.2 Абстракция: Является подклассом или Является надклассом
* 

6.3 Элемент коллекции:
* BaseCellType является элементом коллекции CellTypes
* BaseCellDataType является элементом коллекции CellDataTypes
* BaseCellState является элементом коллекции CellStates
* BaseLinkAxis является элементом коллекции LinkAxises
* BaseLinkState является элементом коллекции LinkStates

Агрегация - Входит в состав или Является частью
* "LinkType_Aggregation", "ЯчейкаТипаСвязи - Агрегация: Входит в состав или Является частью");
Абстракция - Является подклассом или Является надклассом
* "LinkType_Abstraction", "ЯчейкаТипаСвязи - Абстракция: Является подклассом или Является надклассом ");
Еще должно быть отношение, связывающее коллекцию и ее элементы: Является элементом коллекции 
* LinkType_ListElement - "ЯчейкаТипаСвязи - Элемент коллекции" 

7. состояние связей
Все связи в нормальном состоянии, поэтому только одно состояние - нормальное.
Но если потребуются другие, то придется их сюда добавить: в иерархию классов и в коллекцию.
* "LinkStateNormal", "ЯчейкаСостоянияСвязи - Связь в обычном состоянии");



+++деревья отношений - эксперимент
* Тут самое большое дерево - CellTypes, и по нему много вопросов. Часть элементов выглядит излишними, и по всем элементам нужны описания - что на самом деле они обозначают. Запутанно это пока для меня.
* Отличие данной схемы от источника - введено отношение коллекции LinkType_ListElement, вместо которого ранее использовалось отношение Агрегации, и это было неправильно. Поскольку агрегация это связанные части целого, а коллекция - это набор независимых несвязанных объектов. Хотя и похоже.
++++Отношение - Агрегация
+++++Главное дерево - Агрегация
* World
    * System
        * Nothing
        * CellTypes
        * CellDataTypes
        * CellStates
        * LinkAxises
        * LinkStates  
    * UserAccountCollection

++++Отношение - Абстракция

+++++CellTypes
 * BaseCellType
    * CellType_Entity
        * CellType_EntityInitial
        * CellType_EntityService
    * CellType_EntityCollection
        * CellType_EntityCollectionTyped
            * CellType_EntityCollectionCellTypeCell
            * CellType_EntityCollectionCellDataTypeCell
            * CellType_EntityCollectionCellStateCell
            * CellType_EntityCollectionLinkTypeCell
            * CellType_EntityCollectionLinkStateCell
            * CellType_EntityCollectionUserAccountRootCell
    * CellType_CellTypeCell
    * CellType_CellDataTypeCell
    * CellType_CellStateCell
    * CellType_LinkTypeCell
    * CellType_LinkStateCell
    * CellType_UserAccountRootCell


    
+++++CellDataTypes
 * BaseCellDataType
    * CellDataTypeNoData
    
+++++CellStates
 * BaseCellState
    * CellState_Normal
    
+++++LinkAxises
 * BaseLinkAxis
    * LinkType_Aggregation
    * LinkType_Abstraction
    * LinkType_ListElement
    
+++++LinkStates
 * BaseLinkState
    * LinkState_Normal


++++Отношение  ЭлементыКоллекции 

+++++UserAccountCollection - ЭлементыКоллекции
 * UserAccountCollection
    * UserAccountRoot
      
+++++CellTypes - ЭлементыКоллекции        
* CellTypes
    * BaseCellType
    * CellType_Entity
    * CellType_EntityInitial
    * CellType_EntityService
    * CellType_EntityCollection
    * CellType_EntityCollectionTyped
    * CellType_EntityCollectionCellTypeCell
    * CellType_EntityCollectionCellDataTypeCell
    * CellType_EntityCollectionCellStateCell
    * CellType_EntityCollectionLinkTypeCell
    * CellType_EntityCollectionLinkStateCell
    * CellType_CellTypeCell
    * CellType_CellDataTypeCell
    * CellType_CellStateCell
    * CellType_LinkTypeCell
    * CellType_LinkStateCell
    * CellType_UserAccountRootCell
    * CellType_EntityCollectionUserAccountRootCell
    
+++++CellDataTypes - ЭлементыКоллекции     
* CellDataTypes
    * BaseCellDataType
    * CellDataTypeNoData
    
+++++CellStates - ЭлементыКоллекции
* CellStates
    * BaseCellState
    * CellStateNormal

+++++LinkAxises - ЭлементыКоллекции
* LinkAxises
    * BaseLinkAxis
    * LinkType_Aggregation
    * LinkType_Abstraction
    * LinkType_ListElement
 
+++++LinkStates - ЭлементыКоллекции
* LinkStates
    * BaseLinkState
    * LinkStateNormal

