++ Концепция Навигатор
Из wiki:///V:/МоиПроекты/SIM/Работать%20здесь/NewConcept/NewConcept.wiki?page=УстройствоНавигатора




++++Описание концепции
Описывает приложение - навигатор, его устройство и работу.

[Навигатор] это приложение – оболочка пользователя, из которой можно работать в МногоконтейнернаяСистема.
[Навигатор] предназначен для просмотра и редактирования структуры ячеек одного [Контейнер]а, принадлежащего одному [Солюшен]у
Предполагается, что ячейки СтруктураСущностей иерархически организованы, и двигаясь по связям нужного типа, можно быстро перейти к требуемой ячейке.

++++Зависимости
[Навигатор] требует концепцию представления ячейки и ее связей.
Диаграммы [Навигатор] требует КонцепцияПредставленияСтруктурыСущностей. Требует ФорматДиаграммыСтруктурыСущностей для их хранения.

++++Общее представление
Складывается некоторое представление о наиболее удобном в настоящее время навигаторе как о расположенном горизонтально сенсорном экране размером около метра по диагонали, на котором отображается собственно навигатор.
Для ввода текста используется убирающаяся полупрозрачная виртуальная клавиатура, располагаемая поверх всех окон как часть оконной подсистемы операционной системы.
Перетаскивание и клики выполняются пальцами рук.


++++Начальная ячейка
Навигатор при запуске должен начинать просмотр с некоторой ячейки в контейнере. Эту НачальнаяЯчейкаСолюшена должен назначить пользователь. И она, что логично, должна входить в СписокМестНавигатора подобно кнопке Домой. Эта ячейка в старой версии называлась World и с нее начиналась вся структура ячеек. Согласно КонцепцияТапп, такая ячейка должна определяться разработчиком в ПользовательскаяКонцепцияСолюшена.

* КонцепцияНавигаторОкноНавигатора

* КонцепцияНавигаторИконкиЯчеек - дополнить когда будет материал.

* КонцепцияНавигаторСписокМест

* Пользователь должен иметь возможность просмотреть ИсторияПереходовНавигатора.

* Мультимедийный контент - картинки, видеоролики и звуки - отображаются в навигаторе, чтобы быстро их идентифицировать. 

++++Операции навигатора
todo.концепция.навигатор: Операции Навигатора надо рассмотреть по существующим прототипам. В общем, они сейчас аляповато сделаны, надо их перечислить, формально описать, придумать, как удобно их реализовать и представить. Сделать это на отдельной странице.
См материалы [Навигатор].

Еще вроде бы предполагалось для приложения, например, [Навигатор], хранить список часто используемых ячеек [Солюшен]а, чтобы загружать их заранее в начале работы, и экономить этим время при дальнейшей работе. Но это пока не пригодилось, так как не было интенсивного применения [Движок].

++++История операций
* Пользователь должен в любой момент иметь возможность просмотреть [Лог] последних операций, чтобы восстановить контекст своей работы.
* Система должна предоставлять пользователю достаточно подробный контекст, извлекая и представляя данные из [Лог]а.
Это снизит трудоемкость при принятии решений.
* В [Лог] нужно записывать комментарии по действиям пользователя и комментарии из методов. Вероятно, навигатор тоже должен писать события в [Лог] системы, иначе пользователю неудобно будет анализировать [Лог]. Таким образом [Лог] один на все приложения, работающие с проектом.
* [Лог] превращается в существенную часть проекта и требует существенного внимания. 



++++Диаграммы десктопа
Также предлагается сделать, отдельно от ОкноНавигатора, ОкноДиаграммы в виде плоскости, на которую из СтруктураСущностей можно перенести графические элементы или изображения, динамические изображения из каналов связи, итд. Эти элементы ДиаграммаДесктоп перетаскиваются, масштабируются, накладываются, обрезаются итд. Результирующая ДиаграммаДесктоп сохраняется в СтруктураСущностей системы, и потом может быть вызвана в любой момент, просмотрена и изменена. Все элементы, фигуры, связи между ними сохраняются в СтруктураСущностей. Графические элементы можно ассоциировать с сущностями СтруктураСущностей - для каждой  диаграммы - что отражает интерпретацию графических элементов в диаграмме.
Ячейки-сущности в такой диаграмме выбираются через навигатор, возможно, в ранее образованных в СтруктураСущностей коллекциях. Диаграмма, таким образом, представляет собой сущность, составленную из сущностей.
Это не диаграмма собственно ячеек и связей в СтруктураСущностей - это диаграмма вроде УМЛ-диаграммы, для прешения некоторой прикладной задачи. Такое удобное средство хранения коллажей на движке Тарр.
* todo.концепция.навигатор: Надо определиться со способами представления данных и документировать варианты, их достоинства и недостатки
* Каждое представление должно отражать контекст выполняемой операции, это ставит под сомнение универсальность формирования представлений.

++++Диаграммы структуры сущностей
Также предлагается, что в ОкноДиаграммы пользователь сможет строить чертежи участков структуры, чтобы отображать некоторую часть существующей СтруктураСущностей в некоторой части связей. С помощью этой ДиаграммаСущностей пользователь может наглядно представить строение участка СтруктураСущностей, вместо того, чтобы гулять по ней навигатором. Этот чертеж не сохраняется в СтруктураСущностей, а сохраняется в ФайлДиаграммыСущностей, только для программы диаграмм, подобно ЧастичныйСнимокСтруктуры. Иначе будет очень много ненужных связей.
Пользователь также здесь же может редактировать СтруктураСущностей, удаляя и создавая связи и ячейки. Чтобы удалить существующую связь или ячейку, надо сначала ее отобразить на диаграмме, осмотреть и убедиться, что это не повредит всю структуру. Ну, это уже предполагаются общие правила работы со СтруктураСущностей системы.

++++Философия
Навигатор сейчас устойчиво понимается как средство перехода между сущностями, связанными между собой.
Собственно связь в них рассматривается без учета ее свойств.
В проектируемой системе свойства связей играют определенную роль, и они также должны учитываться при навигации.
Образно говоря, это двери с табличками. Как представить это в приложении навигатора?
Навигация по причинам, а не по следствиям. По задачам, а не по результатам.

++++Критерии оценки пользовательского интерфейса
* Трудоемкость - количество действий пользователя, необходимых для выполнения задачи.
* Устойчивость контекста - вероятность потери контекста пользователем вследствие переключения внимания, внешних событий итд. Пользователь воспринимает процесс как последовательность параллельных представлений сущностей, без рекурсии.
Рекурсии вызывают прерывание текущего контекста и начало нового. Предыдущий контекст обычно запоминается, но может быть потерян по разным причинам. Визуально объединенное представление составляющих контекста позволяет быстро восстановить контекст. Например, диалоговое окно с контролами представляет контекст операции, поэтому, вернувшись к нему, пользователь понимает, какую операцию он собирался выполнить, и что для этого нужно. Хотя, возможно, он уже не помнит, зачем нужна эта операция, и тут для восстановления контекста нужен [Лог].
* Правильность структуры - пользователь, вследствие потери контекста, или по другим причинам, может создать неправильную структуру ячеек элемента. Эта неправильная структура может быть не замечена при отсутствии средств контроля правильности, и может стать причиной ошибок в работе системы.
* Правильность ввода данных - пользователь может не указать какие-то данные, или ввести ошибочные данные.

Рассмотрим БД.
Данные сведены в коллекцию подобно таблице. Элемент данных из этой таблицы представлен графом ячеек.
* Сначала надо завести проект,создать служебную структуру ячеек, настроить навигатор, ...
* Просмотр имеющихся данных
    * Через навигатор бродить по графу элемента. Представление элемента формируется в памяти пользователя.
        * Трудоемко, так как надо много переходов от ячейки к ячейке. 
        * Возможна потеря контекста, так как данные визуально не связаны. 
    * С помощью метода сформировать документ-представление элемента или коллекции в целом 
        * Неполнота - Существующие варианты представления не показывают отношения между частями представления
        * Трудоемко, так как для коллекции надо создавать метод, и переделывать его при каждом изменении структуры элемента. Универсальный метод будет вызывать Неполноту. 
    * Представить элемент диаграммой ячеек и связей 
        * Это представит данные и их отношения, обеспечив полноту и устойчивость контекста.
        * Это представление не изучено 
        * Трудоемко, так как пользователь должен найти интересующие его данные на диаграмме.
* Добавление данных
    * С помощью навигатора создаем граф ячеек элемента вручную, одновременно заполняем данными
        * Трудоемко, так как надо много переходов от ячейки к ячейке.
        * Потеря контекста, так как данные визуально не связаны, и есть рекурсия.
        * Может быть нарушена правильность структуры
        * Может быть ошибки ввода данных
    * С помощью метода создать граф элемента, затем вручную заполнить данными
        * Правильность структуры определяется методом
        * Трудоемко, так как надо создавать метод, и переделывать его при каждом изменении структуры
        * Трудоемко, так как надо много переходов от ячейки к ячейке при заполнении данными
        * Потеря контекста, так как данные визуально не связаны, и есть рекурсия. 
        * Может быть ошибки ввода данных
    * С помощью метода создать представление, в него ввести данные
        * Трудоемко, так как надо создавать метод, и переделывать его при каждом изменении структуры
        * Ошибки ввода данных проще выявлять, так как контекст визуально доступен.  
    * С помощью механизма запросов на разрешение коллизий производим необходимые операции до состояния отсутствия коллизий в системе.
        * Этот вариант не изучен.
        * Механизм должен быть заложен в архитектуру системы
        * Механизм предполагает отличные от традиционных методы работы
        * Трудоемко, так как пользователь должен обрабатывать каждый запрос
        * Потеря контекста - его вообще нет здесь, это не непрерывный процесс, а реагирование на события. Для каждого события пользователю придется создавать контекст.
        * Правильность структуры контролируется самой системой    
* Удаление данных - достаточно просто, если элемент или его свойства не используются больше нигде, кроме как в этой коллекции. Если же он используется где-то еще, тут надо разбираться согласно ситуации.
    * С помощью навигатора выбираем ячейку элемента и удаляем ее
    * Вызываем метод-деструктор для элемента
* Выборка данных

++++Другие соображения
* Как определить, какие способы в каких случаях использовать? Это должно быть описано в знаниях о классах сущностей предметной области. В зависимости от ситуации и предметной области, выполняемое системой принятие решений может занимать разное время. В стандартной софтвер-индустрии эти решения принимает пользователь, а выполняет их код, оптимизированный под данную конкретную фиксированную обстановку.
* Выходит в общем, пользователь при работе с системой должен реализовывать методами свой мыслительный процесс, а структуры данных будут аналогом памяти. При условии постоянной и индивидуальной работы с системой, со временем такая система будет отражением интеллекта пользователя в данной предметной области.

++++Для Навигатора
Надо сразу проектировать новую версию Тапп как полноценную операционную оболочку [Навигатор].
Пользователь будет не просто создавать структуру данных и методов, но и расширять и эксплуатировать ее.
Возможно, это будет основное средство работы, с элементами ИИ.
Поэтому потребуется средства для записи заметок, идей и комментариев, сгрупированные в темы с возможностью привязки к конкретным частям СтруктураСущностей.
В целом, [Навигатор] должна быть самодостаточной, поэтому интерпретатор методов сейчас является главной проблемой.
Хорошо бы добавить также звуковые заметки и историю операций, TODO и все такое прочее, что есть в IDE.
Пока что это только идея, но надо сразу проектировать с таким расчетом.

* историю операций выводить в [Лог]. [Лог] создается при создании объекта [Движок]а, в конструкторе.
Закрывается, соответственно, в деструкторе. В [Лог] пишутся все операции, исключения и комменты пользователя (если он пожелает их написать). [Лог] может быть показан в отдельной форме [Навигатор]а.
* список TODO - в отдельной форме [Навигатор]а.
* автосохранение версий [Солюшен]а. [Солюшен] включает в себя также файлы, которые при добавлении надо автоматически копировать в отведенные для них каталоги. Нужен механизм для этого. 
* Замечания по проекту, идеи - в отдельных файлах.
* В общем, получается MDI интерфейс и проект как в студии. Можно все хранить в одном XML файле, или можно проект хранить отдельно от данных. Лучше отдельно пока.
* Если бы методы делать скриптами, можно было бы хранить их в БД. А пока что придется в дллках. Но надо.  

++++Иконки для Навигатора
Как-то все-таки надо прицепить иконки к ячейкам. Сериализовать в XML или хранить в файлах? Если в файлах - как быть с версиями [Солюшен]а?
- Предлагается включать файлы в версии [Солюшен]а, чтобы уже все целостно было. Т.е. кроме [Солюшен]а еще и все каталоги с файлами включать в СнимокСтруктуры.
Иконки можно хранить прямо в [Солюшен]е, сериализовать их в объекты класса иконок, а перед применением строить из них Image в памяти.
Надо попробовать написать код такого метода.

+++Материалы
* [file:///V:/МоиПроекты/SIM/OldVersions/SimOldDocs/todo.txt] - Замечания к ГУИ Тапп2