++ Тапп Заметки2016


О текстах и списке требований к Тапп

Сейчас я пытаюсь собрать вместе все материалы по проекту. Надо найти еще подобные материалы.
Надо их собрать вместе как первый этап.
На втором этапе надо все эти документы рассмотреть и разметить по принадлежности к версиям движка, областям, перечисленным в структуре папок.
Эти области как теги в документах.
И там надо определиться, что содержат документы, к какой теме их отнести.
Старые версии оставить для истории проекта.
Остальные документы надо сгруппировать и свести в общие тексты.
Можно разделить на Наброски, попытки конструирования общей модели, и на уточнения и решения.

Короче, Надо разнести тексты документов по темам.
Можно разбить документ на абзацы, пометить абзацы ссылками, и потом ссылаться на них.

У меня не так много материалов и времени на их создание, чтобы держать их в беспорядке, среди мусора.
Надо навести в них порядок и строить из них нормальную систему.
(Наверно, Органайзер в этом был бы полезен. Как средство упорядоченного хранения наработок.) 

Потом с этими текстами надо работать. Из этих текстов должен получиться набор пунктов - фактов, из которых можно бы вывести правила для устройства системы.
Правило типа Ячейка должна содержать список связей.
Преобразовав все тексты в эти варианты, можно будет формализовать. 
Свести все эти варианты в список галочек и затем на функциональном уровне проектировать систему так, чтобы она соответствовала этим требованиям.
Прямо по каждому пункту ставить галочку: Соответствует? Да. или Нет. 
Тогда все это проектирование переходит на более определенный, детализованный  уровень. Где мало абстракций, и все просто и понятно.
Такая методика для формализованного конструирования сложных проектов.
Это очень много работы на самом деле, и я даже не знаю, как ее формализовать и автоматизировать.

Проект очень большой, и в нем без формализации и разделения на ... нереально закончить.
Еще по каждому пункту факту можно проследить историю - чего откуда взялось.
Когда этот механизм отлажен, его проще автоматизировать. 
Сейчас у меня головы не хватает, чтобы все по проекту в ней хранить, и проверять соответствие, и искать многофакторные оптимальные решения.
Я забываю отдельные детали, поэтому прошлые версии не получились. 
Много всего надо доделывать, но я об этом забываю. Даже если записываю, все равно упускаю. То некогда, то неохота.
А тут все четко расписано, что и как делать.
Этой работы бумаготворчества очень много. Но она линейна и предсказуема.
Еще так легко подсчитать, сколько там реально работы.


Об архитектуре проекта.

В качестве студии 2008 - она единственная дает все что нужно.
Мы делим весь проект на сборки, перечисленные в документации.
Все сборкив качестве правил вносим в общий список правил. 
Его в виде большой таблицы экселевской хранить где-то.
Сначала надо хранить в вики, чтобы ссылаться.
Каждому правилу должен быть присвоен код число-буквенный, чтобы в дальнейшем на это правило ссылаться.
Поэтому сначала это в вики располагаться будет, потом в табличку экселя.
Каждому правилу еще надо краткое именование и краткое содержание, описание этгтого правила.
Можно написать собственный софт, который эти правила будет содержать и предоставлять пользователю.
Но пока это нецелесообразно.
В сущности, пока эта модель такая же неопробованная. Ее еще надо обкатать и опробовать методику на неком отдельном проекте, а не сразу на Тапп.
Можно выделить маленький проект и на нем обкатать методику.
Лучше бы обкатать на некотором простом проекте.


Тапп 24 тупо надо делать.
Уже сделать и пользоваться.
Инвентарь нужен чтобы стащить на него гандонов. 
Моя собственная политика и экономика не развивается.


Движок стал настолько сложным, что у меня не хватает мощности на его проектирование.
Как это все должно работать.
Хотя бы как должна работать подсистема ячеек, с множеством контейнеров и множеством пользователей.
Вот эту всю систему надо придумывать. 
В Линуксе для прав пользователей были придуманы группы, и через эти группы эти права можно настроить более гибко.
Но! Это долго. Это должен делать администратор. Это тяжелая и медленная система. 
Это оправдано, когда ты выстраиваешь инфраструктуру с пользователями, устройствами. 
И потом эта инфраструктура долго используется.
И это совершенно не годится, когда ты интенсивно и динамично работаешь, создавая и раздавая файлы, отключая и подключая устройства.
На настройку прав доступа уходит слишком много времени и внимания.
Подходящей аналогией является комната с мебелью. Расставил крупную мебель и она стоит на месте. А мелкие предметы то там, то здесь.
А если тут не жилая комната, а театральная сцена? 


Вот все эти операции движка надо прорабатывать, вяснять, что и как должно действовать.
Надо все операции ячекк выписать в список, создать по ним диаграмму умл и в этой диаграмме все это описывать. 
Сначала просто выполнение операций, потом с поддержкой одной фичи, потом с пддержкой другой фичи, и так нарастить до поддержки всех фич.
(Хотя это слишком много переделок выйдет. Проще сразу все сопоставить и проектировать нацело.) 
В результате у меня будет представление, что должно происходить и как. И это будет прототип для написания кода подсистем движка.
Проект просто тупо надо пилить.
А на это у меня все время чего-то не хватает.

Движок можно прицепить на СерверСолюшена и на этом сервере держать нечто вроде википедии, только круче.
Можно будет встраивать методы, работающие с данными. Это будет нечто подобное самому интернету.
Тут надо сервер на 32гига памяти. 
Движок должен поддерживать многозадачость и многопользовательский режим. 
Это слишком сложо, чтобы сразу начать его проектировать.
Движок такой на сервере лично мне нужен исключительно как база знаний, многопользовательская схема не нужна. Только для меня.
Хотя и превращать проект в основу ИИ тоже не очень-то готов. Это тоже дело долгое и сложное.


Замечания по Тапп.
Можно для контейнера использовать механизмы из SqliteСУБД. Там есть кэш-таблицы в памяти. 
Можно все ячейки и связи хранить в памяти в таблицах SqliteСУБД. 
Не в объектах, а именно как записи в таблицах-в-памяти.
Для поиска и для выполнения запросов. Хотя запросы там не нужны.
Можно поковырять код sqlite  и определенные механизмы из него использовать для решения проблем поиска в контейнере.
Хеш-таблицы например, для списка связей контейнера.
А непосредственно sqlite как БД не очень хорош - он занимает память для кеша доступа.
Этот вариант можно рассмотреть, но он занимает память под кеш таблицы в том же процессе, что и контейнер. 
Зато он более быстрый. Сторонний СерверSQLБД работает в другом процессе, и там память может быть выгружена на своп-файл.
Да все равно фигня. На одном и том же компе даже сторонний СерверSQLБД жрет память, и это сказывается на производительности и размере памяти всех процессов.
А вынести СерверSQLБД на отдельный комп - получишь больше доступной памяти, но потеряешь производительность за счет сетевых задержек.

Еще можно снимки солюшена хранить в SqliteСУБД файле БД, а не в двоичном файле как сейчас.
Это хорошо тем, что формат файла снимка разрабатывать не надо. 
А плохо тем, что файл БД не может занимать более 2гб. 
А снимок для солюшена запросто может оказаться длиннее 2гб.
Ну и другие разные ограничения есть. Так что двоичный файл надежнее.

Вот можно лог держать в SqliteСУБД файле БД. Ему размер файла БД не так важен.
Все равно кусками лог пишется. 
Зато выборку записей по пользователю или по коду события делать быстрее.
И опять же, формат лога разрабатывать не надо сильно-то. 


Методы не обязательно воспринимать именно как алгоритмы. Хотя как алгоритмы, они хорошо, технически чисто записываются.
Но их можно записывать и обычным текстом. Как последовательность действий.
Лучше предусмотреть алгоритмическое действие. Способ представления алгоритма не как граф алгоритма.
Не обязательно расматривать алгоритм метода как именно алгоритм, с ветвлениями, блоками и там.
Можно рассматривать его как текстовое описание задачи. Там должно быть множество всяких дополнительных признаков.
В текстовом описании, в сущности, избыточное описание, которое можно свести к сущность-свойство-действие и если-то.
И всякие И ИЛИ. То есть, то что есть в алгоритмах. Алгоритмы просто более точно все это описывают.
В текстах более расплывчато, но более понятно для человека, так как оперирует в его речевой методике - как он привык разговаривать. 

Методы надо все же хранить аалгоритмами. А как представлять эти алгоритмы ячейками и как их исполнять - этот вопрос надо отдельно прорабатывать после того, как будет готова концепция ячсекк и связей.
И модель отношений как методов - тут вообще ничего не сделано. Тут надо прорабатывать.



Работы очень много.
Нужно запланировать общий осмотр. Результаты этого осмотра фиксировать письменно.  
А то они долго не держатся в памяти, я про них забываю. Потом не получается с ними работать.
Надо собрать все документы в один объем.
Потом надо отсортировать записи, техническую часть отделить от концептуальной, а концептуальную от сторонних заметок.
И идей на будущее.
Потом надо поставить первой задачей создание общего плана работы. 
Надо разделить всю работу над движком на куски. Те на еще более мелкие куски.
Чтобы за один присест сделать небольшой кусочек работы. Его надо сделать хорошо. Сдокументацией, описаниями, комментариями, идеями попутными.
И потом некоторое время его еще надо дообдумывать и записывать все идеи, которые в голову приходят.
Работы очень много, и нужно задаться определенными условиями. Ограничить функциональность, чтобы уменьшить объем работы.
Для этого надо посмотреть, какие есть подсистемы, как они работают, и какие из них можно безопасно исключить, чтобы это не влияло на общую работу.

Сначала надо составить список подсистем и по ним в дальнейшем думать. 
Осмотреть, какие из них потом легко добавить в код без существенной переделки.
Для этого нужно иметь текстовое описание операций. 
Для этого нужно иметь список функциональности движка - Операции со всеми элементами контейнера. 
Для этого надо разработать эти подсистемы контейнера. 
Для этого нужна концепция движка и всех его подсистем.
Для этого нужны описания фантазии о том как движок будет работать. Что будет происходить.
Для этого нужно знать, для чего движок нужен и что он должен будет делать.
Конкретный такой список желаний.
УМЛ предназначен для описания действующего бизнес-процесса. А нам этот процесс надо спроектировать. 
Пока его не спроектировали, не можем создать движок как следует. 
Просто создаем некий механизм, который потом пытаемся куда-то приспособить. Такие попытки кончаются ничем.
Обычно механизм создается под конкретную задачу.
Вот у меня есть конкретная задача - сбор и хранение разнородной информации о радиодеталях.
Вот ее нужно описать, расписать и в таком виде использовать.
Еще у меня есть задача типа Инвентарь. Ее тоже можно использовать, чтобы построить Инвентарь на движке, который я разрабатываю.
Это даст мне представление о том, что мне нужно сделать в Движке и как это должно быть сделано.

-----------
Вот с этими программами на компе проблемы - они предназначены для написания чистовиков - публикуемых документов, презентаций, рисунков.
Которые обычно являются результатом  компиляции из нескольких заготовок и черновиков.
Даже википад - не для удобного написания заметок, а для написания справочника-глоссария для его просмотра с возможностью редактирования. 
Хотя редактирование в вики удобное, поскольку она все же средство создания такого глоссария.
Именно для написания черновых текстов, особенно больших черновых текстов, существующие программы мало приспособлены.
Это все еще в этом смысле печатная машинка.
Хотя - что такого можно в этом техпроцессе придумать, чтобы он стал удобнее для черновиков?
-Записывать и хранить версии абзацев?
-Древовидные комментарии к тексту и самим комментариям?
-Ссылки на абзацы, предложения и отдельные слова?
-Поиск дубликатов фрагментов текста?  
----------- 
Надо собрать глоссарий Тапп.
Чтобы собрать из него цельную концепцию движка и потом согласовывать ее уточнять и превращать в механизм.
(То есть, наоборот, из глоссария делаем концепцию? Это вряд ли получится. 
Тут глоссарий просто должен помочь навести порядок в текстах и облегчить конструирование механизма комбинированием деталей.)
Этот механизм надо дополнить  функциональностью. Без функциональности каждой подсистемы мне не удастся его собрать в единый механизм.
Заготовки глоссария - нехватает менеджера сети и того что есть в последнем релизе.
Еще не все материалы вики использованы. Все решения и отчеты надо собрать вместе и свести. И разбить на версии, чтобы не включать устаревшие данные.
В общем, все заметки и все материалы и тексты, надо собрать вместе и использовать в разработке проекта.
Разнести по темам, подсистемам.
Сам глоссарий надо разбить на разделы, сборки, функциональные единицы - движок, БД, пользовательский проект, утилиты , итд.
Вот это все разделение сделать в вики и с ней потом работать.

Из имеющихся текстов и концепций надо извлечь сущности предметоной области и перечислить их в списке, и по всему этому объему работы надо составить план работ, список задач, которые надо выполнить.
И надо вытащить ярлык на рабочий стол, чтобы на этот список задач натыкаться и помаленьку выполнять.
(Вот это я использую, это работает. Ярлык надо назвать понятным именем. 
Но все равно, чтобы работа продвигалась, надо работать. 
Само оно не двигается. Надо просто пилить проект. 
Автоматизировать тут ничего не получится, и чудес не происходит.)

-----------
Не стоит на проект тратить много времени. Концепция нужна чтобы описать работу движка.
А что именно должен делать движок - определяет та предметная область, в которой он должен работать.
(Так он же универсальный. Это не продукт - это инфраструктура. Вот я все время создаю инфраструктуру, а выгоду от нее получают другие люди. Нехорошо.)
Глоссарий и концепция нужны, чтобы представить себе эту ситуацию и как в ней движок будет использоваться.
Нужно представить себе эту работу в контексте локальной задачи, потом в контексте глобальной задачи. 
Какие операции там можно сделать, какие потребуются мне и как они должны выполняться относительно движка.
Как теми сущностями движка оно будет выполняться, не вдаваясь в детали. Детали будем разрабатывать позже.
Один сценарий - это Инвентарь. Тут мне уже все известно - что требуется и как должно исполняться.
Другой - некая серверная система, где документы (даташиты) хранятся на сервере. а у клиента есть его собственная копия этой структуры и к ней привязаны его собственные документы, там количество радиодеталей, схемы итд.
То есть, его такое собственное дополнение общей структуры.
Публичная часть структуры лежит на сервере, и пользователь привязывает к ней ветки своей приватной структуры.
Это такой сценарий использования. 
Плюс еще автоматизация, которая к этой структуре данных может быть применена.
Тоже описание: какая операция, что она должна делать, какой результат получать.

Другой сценарий - для проекта Вордс.Мне нужен такой движок для хранения классов слов и словоформ. Этих словоформ дофига. Такой большой проект, где я пока ничего не понимаю. Там надо специалиста.
Но вот если я этот проект сделаю, то я возможно смогу им заинтересовать каких-нибудь филологов, которых дофига. В Интеренте дофига знатоков русскго языка, их надо науськать сделать мне эту работу.

Сам по себе движок я уже делал, но он не развивался, так как практически он не использовался.
Надо использовать его практически, чтобы была мотивация его совершенствовать.


Надо сделать движок и браузер. Чтобы можно было заводить разные проекты, создавать структуры данных, собирать данные в эти структуры.
Чтобы в дальнейшем где-то хранить целиком проекты на компе в архиве и при необходимости их распаковать, подключить и использовать. 
(Хранить на сервере в инете - тут фишка именно в стабильности сервера и формата данных. Чтобы один раз сделал, настроил - и все работает, и забыл про него.
А вот с этим все плохо: Самому держать сервер - денег нет, отдать кому-то другому - начнут там реформы  и улучшения проводить. Потом закроют проект и распродадут. Они все на говно изводят.)
Это получается один процесс - один контейнер.
 В этом контейнере лежат данные некой предметной области. Некую большую таблицу на миллион строк.
Эту таблицу я могу потом преобразовать во что-то более полезное.
Таких модулей - контейнеров предполагается очень много. И у всех них должен быть собственный  идентификатор. И они должны легко между собой интегрироваться.
Чтобы было легко их данные связывать и единообразно бесшовно использовать.

Я в них буду набивать данные из таблиц и прочих коллекций. 
Эти данные будут образовывать сеть из множества контейнеров, солюшенов.
И по этой сети потом можно будет запускать методы и что-то делать в этой сети.

Таким образом, эта структура ячеек хороша тем, что она быстро привязать к данным другие данные. 
Но у этих отношений - связей должны быть глобальные типы. У всех контейнеров должны быть глобальные типы отношений.
Один список типов отношений на все солюшены. С этим тоже будут проблемы. Но это проблемы организационные, а у меня сейчас проблема построить сам движок.
(Солюшен получается не отдельная независимая куча данных, а часть общей структуры сущностей, построенной по одним глобальным правилам с глобальными типами связей (отношений) и глобальными основными типами сущностей.
То есть, эти глобальные типы задаются где-то в одном головном солюшене или прописываются в каждом солюшене свои согласно общей единой пользовательской концепции.)
Для чего он мне нужен?  
Чтобы автоматизировать какие-то операции, связанные с обработкой знаний.
Вопрос - зачем мне такая система обработки знаний?
Это будет автоматическая система, на которой можно построить любой из нужных мне проектов.
Например, инвентарь, список задач планировщика. Все это можно построить. 
Движок позволяет и хранить набор данных, и автоматизацию операций и автоматическое построение операций, и 
И анализ, и майнинг данных. В общем, все что можно себе представить.
Но все это будет занимать просто огромный объем памяти и скорее всего каждый контейнер будет работать на собственном сервере.
Каждый контейнер можно организовать как сетевой сервер, и в этом плане надо разрабатывать архитектуру именно с этой точки зрения.
Тогда кам БД может быть внешняя или внутрипроцессная. Это зависит от реализации кода.
И хорошо бы совместить движок и БД, прямо вместе.












  
