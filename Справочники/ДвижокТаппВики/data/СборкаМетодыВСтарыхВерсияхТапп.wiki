++ Сборка Методы В Старых Версиях Тапп


todo.концепция.методы: Выявить сущности глоссария в текстах.


+++методы в концепции потоков Тапп2
Из [file:///V:/МоиПроекты/SIM/OldVersions/SimOldDocs/meth1.txt]
7 мая 2011
Методы - теоретические заметки

Пока ясно, что метод представляет собой очищенный от ненужного содержания поток.
Этот поток хранится в памяти, воспроизводится при наличии некоторых условий для получения определенного результата.

Поток содержит сущности и взаимодействия, существующие параллельно или последовательно.
Первоначально поток формируется путем наблюдения и интерпретации некоторого внешнего процесса - наблюдение.
Интерпретация выделяет сущности и взаимодействия, их следование, так и образуется поток.
Поток сохраняется в памяти, и может быть воспроизведен.

Можно предположить, что сразу после интерпретации поток содержит только сущности и взаимодействия, без какой-либо дополнительной информации.
После того, как поток сохранен в памяти, можно произвести его анализ для выделения причинно-следственных связей, идентификации известных методов, очистки от ненужных элементов, выявления новых методов. Хотя конечно можно производить анализ одновременно с интерпретацией, а в памяти сохранять уже обработанный поток, но при этом ошибки анализа накладываются на ошибки интерпретации. Поэтому лучше всего сохранять в памяти весь поток до его интерпретации.

Вся работа с потоками (хранение, создание, воспроизведение, анализ, синтез, итд) представляет собой интересную тему для изучения.
Для третьей версии проекта нужно составить хорошее представление о потоках.

Поскольку сейчас в проекте нет концепции потока, реализация метода возлагается на исполняемый код или скрипты. Таким образом, поток метода представлен алгоритмом метода, который представлен кодом. Скрипты позволяют автоматизировать создание/изменение алгоритма, возможности потоков несколько выше.
Потоки хорошо использовать для третьей версии, поскольку в ней предполагается цельная концепция автономии - только контейнер и его потоковые интерфейсы.
На входах - потоки, на выходах - потоки, внутри иерархии данных, методов, потоки, и что-то еще. Этакий обработчик потоков. Хаос-фильтр. Вполне укладывается в общую идею.


Методы организуются в иерархию. Иерархия абстракций очевидна. Иерархия агрегации должна представлять собой состав метода, но в этом нет смысла, поскольку состав метода представлен его алгоритмом, то есть, потоком. Поскольку потоки во второй версии не реализованы, ось Х для методов использоваться, видимо, не будет. Можно попробовать реализовать представление потока для метода на этой оси Х, но это выглядит проблематично.

Поскольку ось Х для методов не нужна, служебные методы, обслуживающие эту ось (по аналогии со структурой данных), тоже не нужны.
Однако служебное пространство идентификаторов все же выделено, если они потребуются. 
Код для служебных методов пока не нужен, его можно быстро добавить потом. 

+++Методы в Тапп1
Из [file:///V:/МоиПроекты/SIM/OldVersions/SimOldDocs/Base.doc]
Операции

Для поддержки операций с данными используются функции, хранящиеся в сборках библиотек пользовательских функций. Код операций создается прикладным программистом, который использует UserLayer API, что позволяет выполнять все необходимые операции как с отдельным объектом так и со всей базой. Операции принадлежат классу сущности, вызываются для объектов этого класса. Операции могут быть объединены в классы операций по функциональному назначению, что предоставляет дополнительные возможности. 
Чтобы сохранять целостность структуры данных, операции должны предусматривать возможность отката при сбое. Если откат невозможен, следует загрузить последнюю версию данных из файла.
Типичными операциями для сложного (состоящего из нескольких классов)  типа может быть, например, конструктор, который создает классы сложного типа и его объекты – на основе имеющихся данных.
Типичной операцией класса может быть метод Вид, предоставляющий пользователю данные некоторого объекта, скомбинированные из данных подобъектов, включая данные, возвращенные некоторой операцией над объектами.

Входные параметры методов.
Для реализации операций методы используют ObjID объектов-аргументов. Каждый аргумент должен проверяться на соответствие типу (классу). Это делается перед загрузкой метода в память для выполнения. Следовательно, в базе необходимо хранить:
-список аргументов метода - в виде ID классов
-тип  и класс-приемник возвращаемого значения (раздельно)
-id метода
-имя метода как строка
-дату создания/изменения метода и версию
При исполнении метода необходимо:
- проверить наличие всех аргументов и их типы
- выполнить функцию
- вернуть результат в программу.

Внедрение методов в систему
Для начала внедрить только метод "Вид", а потом уже пробовать остальное.
Вызов методов реализовать в методе класса
Этот метод должен обеспечивать поиск в базе и прочее.
Метод "Вид" принадлежит определенному классу данных, одновременно он принадлежит и классу методов "Вид". Вообще же метод может подходить для нескольких классов, например, "Вид", просто возвращающий значение объекта или перечисляющий значения подобъектов. Методы, осуществляющие уникальные операции, жестко привязаны к классу.
	Необходимо определить структуру связей метода, алгоритмы поиска метода в БД, правила создания метода, обработку ошибок при вызове метода и его исполнении, типы ошибок, способы и средства создания и отладки, удаления, автоматического подбора наиболее подходящего метода и так далее.

Идеи (непроверенные)
Методы сопоставлены с классами данных. Значит, ID будет состоять из  ID класса методов и ID класса данных. Класс методов определяет имя метода. Все методы в классе методов имеют одно и то же имя, разные классы данных и (возможно) разные параметры.
Должен существовать метод "Вид по умолчанию". Этот метод возвращает значение объекта класса или пустую строку. (Можно предложить, в случае, если значение объекта не установлено, присвоить объекту значение, скомбинированное из значений подклассов - но это надо еще обдумать) Этот метод вызывается, если других методов "Вид" не определено для этого класса. Поэтому метод может быть один на все классы, ему можно присвоить ID класса данных из области предопределенных значений.
Методы "Вид" можно объединить в надкласс "Вид". И таким образом спроектировать еще иерархию методов подобно иерархии данных.

+++Методы в Тапп2
Основная работа сейчас над методами.
Реализован прямой вызов метода. Без важных проверок.
Нужно реализовать вызов метода через иерархию абстракций.
	Для этого нужно реализовать проверки соответствия/приведения абстрактных типов, поиска методов и так далее.
	В целом, это типичный функционал ООП компилятора, ничего нового. Алгоритмическая задача.
Нужно реализовать вызов метода привязанного к классу. 
	Такие методы предназначены для выполнения специализированных задач класса - конструкторы, деструкторы, и прочее ООП. 
Список кта накапливают опыт использования метода. 
Методы сейчас реализуются C#-кодом. Предусмотрена возможность реализации скриптом, но пока нет интерпретатора.
Реализация C#-кодом обеспечивает работу без интерпретатора, а также оптимизацию интенсивных вычислительных задач, поэтому она сохранится и дальше.
Скрипты позволяют автоматизировать создание кода метода. На основе метаданных (которые еще надо разработать) 
автоматически создается код метода для интерпретатора.
Концепция метода представляет собой поток сущностей и их взаимодействий. 
Формализованное описание этого потока называется в литературе алгоритмом.
Необходимо создать концепцию потока, распознавание и классификацию сущностей и взаимодействий, и прочее.
Формализованный граф потока является методом.
Такое представление позволяет распознавать, хранить, воспроизводить, анализировать, документировать, комбинировать и оптимизировать методы.
Поскольку концепция потока не изучена, ее применение предполагается в третьей версии проекта. 




