++ Применение Тапп Система Учета Проектов

Вся деятельность в некотором смысле может быть организована в проекты. Каждый проект представляет некоторый процесс для достижения поставленной цели. 
Процесс состоит из объектов и действий. Объекты обычно называются ресурсами, действия - задачами. 
Для проектов нужны ресурсы. Для ресурсов нужны работы по хранению, содержанию и учету.
Проект состоит из задач. Для задач нужны ресурсы, работы по хранению, учету и собственно выполнению задач. Задачи можно/нужно разбить на подзадачи.
В традиционных системах нужно сводить все требования некоторого ресурса воедино. При большом числе одновременных проектов это представляет собой довольно сложную задачу.
Ресурсы требуют учета, складирования, и это тоже представляет собой задачу.
Проекты после выполнения могут порождать производные проекты, например проекты исследования порождают другие проекты исследования и проекты применения результатов.
Каждый элемент в этой системе обычно имеет контекст, метаданные, которые также включают в себя наблюдения в процессе работы с элементом.

Предлагается использовать разрабатываемую систему для:
* системы учета размещений - мест хранения ресурсов, рабочих мест, помещений;
* построения системы учета материальных ресурсов - типа Склад;
* системы учета разных видов ресурсов в соответствии с их спецификой - Книга контактов, справочник, телефонная книга, хранилище документов, ;
* системы учета проектов и субпроектов
* системы учета задач по проектам - чтобы видно было, что готово, что можно сделать сразу, что делать будет сложно, для чего нет ресурсов, для чего все есть, разбивать на подзадачи.  
* автоматизации рутинных операций

К этим данным удобно будет добавить различные справочные данные, для более быстрого поиска и удобства принятия решения, систему поиска итд. Все это предполагает большую гибкость всей системы и автоматизацию различных задач.
 
Можно представить все в виде графа из сущностей и отношений.
В целом, движок уже довольно хорошо определен. Надо его реализовать на одну машину, сделать удобный пользовательский интерфейс.

Пользовательский интерфейс сейчас можно сделать только в виде текста с картинками и контролами ввода данных. Удобно использовать для этого HTML-документ и браузер, это дает однотипный интерфейс и упрощает разработку. Хотя это же накладывает ограничения на архитектуру системы. В сущности, однопользовательская система превращается в веб-сервер, работающий на некотором порте и отсылающий документы/получающий команды.
Поддержку нескольких пользователей сейчас делать не имеет смысла. Поддержку разных языков, в общем, тоже, вполне достаточно уникода.

+++++ С точки зрения пользователя:
Это такая программа, где можно посмотреть, какие задачи доступны для выполнения, выбрать одну для выполнения, выполнить, внести данные. Программа реализует правила, обеспечивающие поддержание набора информации вне зависимости от лени пользователя.
Это такая программа, где можно посмотреть поставленные цели, направления работы, что уже сделано, что еще надо сделать, получить напоминания, внести заметки, вести дневник, список покупок, учет расходов, и так далее. И все в одном механизме, с возможностью ссылаться на другие объекты, с возможностью автоматической обработки всей структуры.
Подобное можно видеть в интернете, но там есть трудности с автоматической обработкой данных, все представлено в виде разных вариантов текста, создание которого требует усилий.
Хотя можно обойтись существующими средствами. Список дел, ресурсов итд можно вести текстом, разместить на сервере, использовать поиск по сайту для добычи результатов, использовать пхп для создания представления, использовать редакторы для создания документов. Но это не красиво, не единообразно и много работы. Плюс в том, что можно таким же образом использовать данные из интернета, но они нестабильны, и есть угроза утечки информации. Каждый пхп-скрипт реализует одну задачу, а для их агрегирования нужны другие скрипты - реализовывать неудобно - надо целый отдел R&D для проектирования и поддержания архитектуры всей системы. Хотя вероятно он все равно будет нужен и в проектируемой системе, зато производительность будет выше, поскольку не нужна постоянная конверсия текстов в данные и назад.
Но все равно, данные придется писать пользователю, а методы-программеру. Разрабатываемая система удобна единообразностью - хочешь просматривай структуру через навигатор, хочешь - создай удобное представление. С любым строением данных и возможностью автоматизации всего что в ней есть. 